
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model UserPreference
 * 
 */
export type UserPreference = $Result.DefaultSelection<Prisma.$UserPreferencePayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model OrganizationMember
 * 
 */
export type OrganizationMember = $Result.DefaultSelection<Prisma.$OrganizationMemberPayload>
/**
 * Model OrganizationInvitation
 * 
 */
export type OrganizationInvitation = $Result.DefaultSelection<Prisma.$OrganizationInvitationPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Workspace
 * 
 */
export type Workspace = $Result.DefaultSelection<Prisma.$WorkspacePayload>
/**
 * Model WebVMInstance
 * 
 */
export type WebVMInstance = $Result.DefaultSelection<Prisma.$WebVMInstancePayload>
/**
 * Model WebVMMetric
 * 
 */
export type WebVMMetric = $Result.DefaultSelection<Prisma.$WebVMMetricPayload>
/**
 * Model StorageBucket
 * 
 */
export type StorageBucket = $Result.DefaultSelection<Prisma.$StorageBucketPayload>
/**
 * Model StorageObject
 * 
 */
export type StorageObject = $Result.DefaultSelection<Prisma.$StorageObjectPayload>
/**
 * Model StorageUsage
 * 
 */
export type StorageUsage = $Result.DefaultSelection<Prisma.$StorageUsagePayload>
/**
 * Model Container
 * 
 */
export type Container = $Result.DefaultSelection<Prisma.$ContainerPayload>
/**
 * Model ContainerStats
 * 
 */
export type ContainerStats = $Result.DefaultSelection<Prisma.$ContainerStatsPayload>
/**
 * Model ContainerLog
 * 
 */
export type ContainerLog = $Result.DefaultSelection<Prisma.$ContainerLogPayload>
/**
 * Model ServiceHealth
 * 
 */
export type ServiceHealth = $Result.DefaultSelection<Prisma.$ServiceHealthPayload>
/**
 * Model InfrastructureMetric
 * 
 */
export type InfrastructureMetric = $Result.DefaultSelection<Prisma.$InfrastructureMetricPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model WebVMTemplate
 * 
 */
export type WebVMTemplate = $Result.DefaultSelection<Prisma.$WebVMTemplatePayload>
/**
 * Model WebVMSnapshot
 * 
 */
export type WebVMSnapshot = $Result.DefaultSelection<Prisma.$WebVMSnapshotPayload>
/**
 * Model WorkspacePersistence
 * 
 */
export type WorkspacePersistence = $Result.DefaultSelection<Prisma.$WorkspacePersistencePayload>
/**
 * Model InfrastructureAlert
 * 
 */
export type InfrastructureAlert = $Result.DefaultSelection<Prisma.$InfrastructureAlertPayload>
/**
 * Model AlertNotification
 * 
 */
export type AlertNotification = $Result.DefaultSelection<Prisma.$AlertNotificationPayload>
/**
 * Model WorkspaceFile
 * 
 */
export type WorkspaceFile = $Result.DefaultSelection<Prisma.$WorkspaceFilePayload>
/**
 * Model FileIndex
 * 
 */
export type FileIndex = $Result.DefaultSelection<Prisma.$FileIndexPayload>
/**
 * Model WorkspaceState
 * 
 */
export type WorkspaceState = $Result.DefaultSelection<Prisma.$WorkspaceStatePayload>
/**
 * Model WorkspaceSync
 * 
 */
export type WorkspaceSync = $Result.DefaultSelection<Prisma.$WorkspaceSyncPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const MemberRole: {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

export type MemberRole = (typeof MemberRole)[keyof typeof MemberRole]


export const TaskStatus: {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const TaskPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

export type TaskPriority = (typeof TaskPriority)[keyof typeof TaskPriority]


export const WorkspaceStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ARCHIVED: 'ARCHIVED',
  ERROR: 'ERROR'
};

export type WorkspaceStatus = (typeof WorkspaceStatus)[keyof typeof WorkspaceStatus]


export const WebVMStatus: {
  STARTING: 'STARTING',
  RUNNING: 'RUNNING',
  STOPPING: 'STOPPING',
  STOPPED: 'STOPPED',
  ERROR: 'ERROR',
  SUSPENDED: 'SUSPENDED'
};

export type WebVMStatus = (typeof WebVMStatus)[keyof typeof WebVMStatus]


export const MetricType: {
  CPU_USAGE: 'CPU_USAGE',
  MEMORY_USAGE: 'MEMORY_USAGE',
  DISK_USAGE: 'DISK_USAGE',
  NETWORK_IN: 'NETWORK_IN',
  NETWORK_OUT: 'NETWORK_OUT',
  RESPONSE_TIME: 'RESPONSE_TIME'
};

export type MetricType = (typeof MetricType)[keyof typeof MetricType]


export const ContainerStatus: {
  CREATING: 'CREATING',
  RUNNING: 'RUNNING',
  STOPPED: 'STOPPED',
  ERROR: 'ERROR',
  DELETING: 'DELETING',
  UNKNOWN: 'UNKNOWN'
};

export type ContainerStatus = (typeof ContainerStatus)[keyof typeof ContainerStatus]


export const LogLevel: {
  DEBUG: 'DEBUG',
  INFO: 'INFO',
  WARN: 'WARN',
  ERROR: 'ERROR',
  FATAL: 'FATAL'
};

export type LogLevel = (typeof LogLevel)[keyof typeof LogLevel]


export const HealthStatus: {
  HEALTHY: 'HEALTHY',
  UNHEALTHY: 'UNHEALTHY',
  DEGRADED: 'DEGRADED',
  UNKNOWN: 'UNKNOWN'
};

export type HealthStatus = (typeof HealthStatus)[keyof typeof HealthStatus]


export const AlertSeverity: {
  CRITICAL: 'CRITICAL',
  WARNING: 'WARNING',
  INFO: 'INFO'
};

export type AlertSeverity = (typeof AlertSeverity)[keyof typeof AlertSeverity]


export const AlertState: {
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING',
  FIRING: 'FIRING',
  RESOLVED: 'RESOLVED'
};

export type AlertState = (typeof AlertState)[keyof typeof AlertState]


export const NotificationType: {
  EMAIL: 'EMAIL',
  SLACK: 'SLACK',
  WEBHOOK: 'WEBHOOK',
  SMS: 'SMS'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const SyncType: {
  REALTIME: 'REALTIME',
  PERIODIC: 'PERIODIC',
  MANUAL: 'MANUAL',
  ONDEMAND: 'ONDEMAND'
};

export type SyncType = (typeof SyncType)[keyof typeof SyncType]


export const SyncStatus: {
  IDLE: 'IDLE',
  SYNCING: 'SYNCING',
  CONFLICT: 'CONFLICT',
  ERROR: 'ERROR',
  PAUSED: 'PAUSED'
};

export type SyncStatus = (typeof SyncStatus)[keyof typeof SyncStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type MemberRole = $Enums.MemberRole

export const MemberRole: typeof $Enums.MemberRole

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

export type TaskPriority = $Enums.TaskPriority

export const TaskPriority: typeof $Enums.TaskPriority

export type WorkspaceStatus = $Enums.WorkspaceStatus

export const WorkspaceStatus: typeof $Enums.WorkspaceStatus

export type WebVMStatus = $Enums.WebVMStatus

export const WebVMStatus: typeof $Enums.WebVMStatus

export type MetricType = $Enums.MetricType

export const MetricType: typeof $Enums.MetricType

export type ContainerStatus = $Enums.ContainerStatus

export const ContainerStatus: typeof $Enums.ContainerStatus

export type LogLevel = $Enums.LogLevel

export const LogLevel: typeof $Enums.LogLevel

export type HealthStatus = $Enums.HealthStatus

export const HealthStatus: typeof $Enums.HealthStatus

export type AlertSeverity = $Enums.AlertSeverity

export const AlertSeverity: typeof $Enums.AlertSeverity

export type AlertState = $Enums.AlertState

export const AlertState: typeof $Enums.AlertState

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type SyncType = $Enums.SyncType

export const SyncType: typeof $Enums.SyncType

export type SyncStatus = $Enums.SyncStatus

export const SyncStatus: typeof $Enums.SyncStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userPreference`: Exposes CRUD operations for the **UserPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPreferences
    * const userPreferences = await prisma.userPreference.findMany()
    * ```
    */
  get userPreference(): Prisma.UserPreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organizationMember`: Exposes CRUD operations for the **OrganizationMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrganizationMembers
    * const organizationMembers = await prisma.organizationMember.findMany()
    * ```
    */
  get organizationMember(): Prisma.OrganizationMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organizationInvitation`: Exposes CRUD operations for the **OrganizationInvitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrganizationInvitations
    * const organizationInvitations = await prisma.organizationInvitation.findMany()
    * ```
    */
  get organizationInvitation(): Prisma.OrganizationInvitationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspace`: Exposes CRUD operations for the **Workspace** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workspaces
    * const workspaces = await prisma.workspace.findMany()
    * ```
    */
  get workspace(): Prisma.WorkspaceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webVMInstance`: Exposes CRUD operations for the **WebVMInstance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebVMInstances
    * const webVMInstances = await prisma.webVMInstance.findMany()
    * ```
    */
  get webVMInstance(): Prisma.WebVMInstanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webVMMetric`: Exposes CRUD operations for the **WebVMMetric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebVMMetrics
    * const webVMMetrics = await prisma.webVMMetric.findMany()
    * ```
    */
  get webVMMetric(): Prisma.WebVMMetricDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.storageBucket`: Exposes CRUD operations for the **StorageBucket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StorageBuckets
    * const storageBuckets = await prisma.storageBucket.findMany()
    * ```
    */
  get storageBucket(): Prisma.StorageBucketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.storageObject`: Exposes CRUD operations for the **StorageObject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StorageObjects
    * const storageObjects = await prisma.storageObject.findMany()
    * ```
    */
  get storageObject(): Prisma.StorageObjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.storageUsage`: Exposes CRUD operations for the **StorageUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StorageUsages
    * const storageUsages = await prisma.storageUsage.findMany()
    * ```
    */
  get storageUsage(): Prisma.StorageUsageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.container`: Exposes CRUD operations for the **Container** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Containers
    * const containers = await prisma.container.findMany()
    * ```
    */
  get container(): Prisma.ContainerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.containerStats`: Exposes CRUD operations for the **ContainerStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContainerStats
    * const containerStats = await prisma.containerStats.findMany()
    * ```
    */
  get containerStats(): Prisma.ContainerStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.containerLog`: Exposes CRUD operations for the **ContainerLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContainerLogs
    * const containerLogs = await prisma.containerLog.findMany()
    * ```
    */
  get containerLog(): Prisma.ContainerLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceHealth`: Exposes CRUD operations for the **ServiceHealth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceHealths
    * const serviceHealths = await prisma.serviceHealth.findMany()
    * ```
    */
  get serviceHealth(): Prisma.ServiceHealthDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.infrastructureMetric`: Exposes CRUD operations for the **InfrastructureMetric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InfrastructureMetrics
    * const infrastructureMetrics = await prisma.infrastructureMetric.findMany()
    * ```
    */
  get infrastructureMetric(): Prisma.InfrastructureMetricDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webVMTemplate`: Exposes CRUD operations for the **WebVMTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebVMTemplates
    * const webVMTemplates = await prisma.webVMTemplate.findMany()
    * ```
    */
  get webVMTemplate(): Prisma.WebVMTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webVMSnapshot`: Exposes CRUD operations for the **WebVMSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebVMSnapshots
    * const webVMSnapshots = await prisma.webVMSnapshot.findMany()
    * ```
    */
  get webVMSnapshot(): Prisma.WebVMSnapshotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspacePersistence`: Exposes CRUD operations for the **WorkspacePersistence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkspacePersistences
    * const workspacePersistences = await prisma.workspacePersistence.findMany()
    * ```
    */
  get workspacePersistence(): Prisma.WorkspacePersistenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.infrastructureAlert`: Exposes CRUD operations for the **InfrastructureAlert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InfrastructureAlerts
    * const infrastructureAlerts = await prisma.infrastructureAlert.findMany()
    * ```
    */
  get infrastructureAlert(): Prisma.InfrastructureAlertDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alertNotification`: Exposes CRUD operations for the **AlertNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlertNotifications
    * const alertNotifications = await prisma.alertNotification.findMany()
    * ```
    */
  get alertNotification(): Prisma.AlertNotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspaceFile`: Exposes CRUD operations for the **WorkspaceFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkspaceFiles
    * const workspaceFiles = await prisma.workspaceFile.findMany()
    * ```
    */
  get workspaceFile(): Prisma.WorkspaceFileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fileIndex`: Exposes CRUD operations for the **FileIndex** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FileIndices
    * const fileIndices = await prisma.fileIndex.findMany()
    * ```
    */
  get fileIndex(): Prisma.FileIndexDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspaceState`: Exposes CRUD operations for the **WorkspaceState** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkspaceStates
    * const workspaceStates = await prisma.workspaceState.findMany()
    * ```
    */
  get workspaceState(): Prisma.WorkspaceStateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspaceSync`: Exposes CRUD operations for the **WorkspaceSync** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkspaceSyncs
    * const workspaceSyncs = await prisma.workspaceSync.findMany()
    * ```
    */
  get workspaceSync(): Prisma.WorkspaceSyncDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.0
   * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    UserPreference: 'UserPreference',
    Organization: 'Organization',
    OrganizationMember: 'OrganizationMember',
    OrganizationInvitation: 'OrganizationInvitation',
    Project: 'Project',
    Task: 'Task',
    Workspace: 'Workspace',
    WebVMInstance: 'WebVMInstance',
    WebVMMetric: 'WebVMMetric',
    StorageBucket: 'StorageBucket',
    StorageObject: 'StorageObject',
    StorageUsage: 'StorageUsage',
    Container: 'Container',
    ContainerStats: 'ContainerStats',
    ContainerLog: 'ContainerLog',
    ServiceHealth: 'ServiceHealth',
    InfrastructureMetric: 'InfrastructureMetric',
    AuditLog: 'AuditLog',
    WebVMTemplate: 'WebVMTemplate',
    WebVMSnapshot: 'WebVMSnapshot',
    WorkspacePersistence: 'WorkspacePersistence',
    InfrastructureAlert: 'InfrastructureAlert',
    AlertNotification: 'AlertNotification',
    WorkspaceFile: 'WorkspaceFile',
    FileIndex: 'FileIndex',
    WorkspaceState: 'WorkspaceState',
    WorkspaceSync: 'WorkspaceSync'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "account" | "session" | "verificationToken" | "userPreference" | "organization" | "organizationMember" | "organizationInvitation" | "project" | "task" | "workspace" | "webVMInstance" | "webVMMetric" | "storageBucket" | "storageObject" | "storageUsage" | "container" | "containerStats" | "containerLog" | "serviceHealth" | "infrastructureMetric" | "auditLog" | "webVMTemplate" | "webVMSnapshot" | "workspacePersistence" | "infrastructureAlert" | "alertNotification" | "workspaceFile" | "fileIndex" | "workspaceState" | "workspaceSync"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      UserPreference: {
        payload: Prisma.$UserPreferencePayload<ExtArgs>
        fields: Prisma.UserPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          findFirst: {
            args: Prisma.UserPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          findMany: {
            args: Prisma.UserPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>[]
          }
          create: {
            args: Prisma.UserPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          createMany: {
            args: Prisma.UserPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>[]
          }
          delete: {
            args: Prisma.UserPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          update: {
            args: Prisma.UserPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          deleteMany: {
            args: Prisma.UserPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserPreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>[]
          }
          upsert: {
            args: Prisma.UserPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          aggregate: {
            args: Prisma.UserPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPreference>
          }
          groupBy: {
            args: Prisma.UserPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<UserPreferenceCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      OrganizationMember: {
        payload: Prisma.$OrganizationMemberPayload<ExtArgs>
        fields: Prisma.OrganizationMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
          }
          findFirst: {
            args: Prisma.OrganizationMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
          }
          findMany: {
            args: Prisma.OrganizationMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>[]
          }
          create: {
            args: Prisma.OrganizationMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
          }
          createMany: {
            args: Prisma.OrganizationMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>[]
          }
          delete: {
            args: Prisma.OrganizationMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
          }
          update: {
            args: Prisma.OrganizationMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationMemberPayload>
          }
          aggregate: {
            args: Prisma.OrganizationMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganizationMember>
          }
          groupBy: {
            args: Prisma.OrganizationMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationMemberCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationMemberCountAggregateOutputType> | number
          }
        }
      }
      OrganizationInvitation: {
        payload: Prisma.$OrganizationInvitationPayload<ExtArgs>
        fields: Prisma.OrganizationInvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationInvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationInvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationInvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationInvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
          }
          findMany: {
            args: Prisma.OrganizationInvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>[]
          }
          create: {
            args: Prisma.OrganizationInvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
          }
          createMany: {
            args: Prisma.OrganizationInvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationInvitationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationInvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
          }
          update: {
            args: Prisma.OrganizationInvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationInvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationInvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationInvitationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationInvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationInvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganizationInvitation>
          }
          groupBy: {
            args: Prisma.OrganizationInvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationInvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationInvitationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationInvitationCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Workspace: {
        payload: Prisma.$WorkspacePayload<ExtArgs>
        fields: Prisma.WorkspaceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          findFirst: {
            args: Prisma.WorkspaceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          findMany: {
            args: Prisma.WorkspaceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          create: {
            args: Prisma.WorkspaceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          createMany: {
            args: Prisma.WorkspaceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          delete: {
            args: Prisma.WorkspaceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          update: {
            args: Prisma.WorkspaceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspaceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          upsert: {
            args: Prisma.WorkspaceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          aggregate: {
            args: Prisma.WorkspaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspace>
          }
          groupBy: {
            args: Prisma.WorkspaceGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceCountAggregateOutputType> | number
          }
        }
      }
      WebVMInstance: {
        payload: Prisma.$WebVMInstancePayload<ExtArgs>
        fields: Prisma.WebVMInstanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebVMInstanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebVMInstanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload>
          }
          findFirst: {
            args: Prisma.WebVMInstanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebVMInstanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload>
          }
          findMany: {
            args: Prisma.WebVMInstanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload>[]
          }
          create: {
            args: Prisma.WebVMInstanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload>
          }
          createMany: {
            args: Prisma.WebVMInstanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebVMInstanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload>[]
          }
          delete: {
            args: Prisma.WebVMInstanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload>
          }
          update: {
            args: Prisma.WebVMInstanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload>
          }
          deleteMany: {
            args: Prisma.WebVMInstanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebVMInstanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WebVMInstanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload>[]
          }
          upsert: {
            args: Prisma.WebVMInstanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMInstancePayload>
          }
          aggregate: {
            args: Prisma.WebVMInstanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebVMInstance>
          }
          groupBy: {
            args: Prisma.WebVMInstanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebVMInstanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebVMInstanceCountArgs<ExtArgs>
            result: $Utils.Optional<WebVMInstanceCountAggregateOutputType> | number
          }
        }
      }
      WebVMMetric: {
        payload: Prisma.$WebVMMetricPayload<ExtArgs>
        fields: Prisma.WebVMMetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebVMMetricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebVMMetricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload>
          }
          findFirst: {
            args: Prisma.WebVMMetricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebVMMetricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload>
          }
          findMany: {
            args: Prisma.WebVMMetricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload>[]
          }
          create: {
            args: Prisma.WebVMMetricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload>
          }
          createMany: {
            args: Prisma.WebVMMetricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebVMMetricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload>[]
          }
          delete: {
            args: Prisma.WebVMMetricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload>
          }
          update: {
            args: Prisma.WebVMMetricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload>
          }
          deleteMany: {
            args: Prisma.WebVMMetricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebVMMetricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WebVMMetricUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload>[]
          }
          upsert: {
            args: Prisma.WebVMMetricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMMetricPayload>
          }
          aggregate: {
            args: Prisma.WebVMMetricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebVMMetric>
          }
          groupBy: {
            args: Prisma.WebVMMetricGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebVMMetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebVMMetricCountArgs<ExtArgs>
            result: $Utils.Optional<WebVMMetricCountAggregateOutputType> | number
          }
        }
      }
      StorageBucket: {
        payload: Prisma.$StorageBucketPayload<ExtArgs>
        fields: Prisma.StorageBucketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StorageBucketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StorageBucketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload>
          }
          findFirst: {
            args: Prisma.StorageBucketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StorageBucketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload>
          }
          findMany: {
            args: Prisma.StorageBucketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload>[]
          }
          create: {
            args: Prisma.StorageBucketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload>
          }
          createMany: {
            args: Prisma.StorageBucketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StorageBucketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload>[]
          }
          delete: {
            args: Prisma.StorageBucketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload>
          }
          update: {
            args: Prisma.StorageBucketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload>
          }
          deleteMany: {
            args: Prisma.StorageBucketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StorageBucketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StorageBucketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload>[]
          }
          upsert: {
            args: Prisma.StorageBucketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageBucketPayload>
          }
          aggregate: {
            args: Prisma.StorageBucketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStorageBucket>
          }
          groupBy: {
            args: Prisma.StorageBucketGroupByArgs<ExtArgs>
            result: $Utils.Optional<StorageBucketGroupByOutputType>[]
          }
          count: {
            args: Prisma.StorageBucketCountArgs<ExtArgs>
            result: $Utils.Optional<StorageBucketCountAggregateOutputType> | number
          }
        }
      }
      StorageObject: {
        payload: Prisma.$StorageObjectPayload<ExtArgs>
        fields: Prisma.StorageObjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StorageObjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StorageObjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload>
          }
          findFirst: {
            args: Prisma.StorageObjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StorageObjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload>
          }
          findMany: {
            args: Prisma.StorageObjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload>[]
          }
          create: {
            args: Prisma.StorageObjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload>
          }
          createMany: {
            args: Prisma.StorageObjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StorageObjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload>[]
          }
          delete: {
            args: Prisma.StorageObjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload>
          }
          update: {
            args: Prisma.StorageObjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload>
          }
          deleteMany: {
            args: Prisma.StorageObjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StorageObjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StorageObjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload>[]
          }
          upsert: {
            args: Prisma.StorageObjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageObjectPayload>
          }
          aggregate: {
            args: Prisma.StorageObjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStorageObject>
          }
          groupBy: {
            args: Prisma.StorageObjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<StorageObjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.StorageObjectCountArgs<ExtArgs>
            result: $Utils.Optional<StorageObjectCountAggregateOutputType> | number
          }
        }
      }
      StorageUsage: {
        payload: Prisma.$StorageUsagePayload<ExtArgs>
        fields: Prisma.StorageUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StorageUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StorageUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload>
          }
          findFirst: {
            args: Prisma.StorageUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StorageUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload>
          }
          findMany: {
            args: Prisma.StorageUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload>[]
          }
          create: {
            args: Prisma.StorageUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload>
          }
          createMany: {
            args: Prisma.StorageUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StorageUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload>[]
          }
          delete: {
            args: Prisma.StorageUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload>
          }
          update: {
            args: Prisma.StorageUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload>
          }
          deleteMany: {
            args: Prisma.StorageUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StorageUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StorageUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload>[]
          }
          upsert: {
            args: Prisma.StorageUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorageUsagePayload>
          }
          aggregate: {
            args: Prisma.StorageUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStorageUsage>
          }
          groupBy: {
            args: Prisma.StorageUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<StorageUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.StorageUsageCountArgs<ExtArgs>
            result: $Utils.Optional<StorageUsageCountAggregateOutputType> | number
          }
        }
      }
      Container: {
        payload: Prisma.$ContainerPayload<ExtArgs>
        fields: Prisma.ContainerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContainerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContainerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          findFirst: {
            args: Prisma.ContainerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContainerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          findMany: {
            args: Prisma.ContainerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>[]
          }
          create: {
            args: Prisma.ContainerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          createMany: {
            args: Prisma.ContainerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContainerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>[]
          }
          delete: {
            args: Prisma.ContainerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          update: {
            args: Prisma.ContainerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          deleteMany: {
            args: Prisma.ContainerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContainerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContainerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>[]
          }
          upsert: {
            args: Prisma.ContainerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          aggregate: {
            args: Prisma.ContainerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContainer>
          }
          groupBy: {
            args: Prisma.ContainerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContainerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContainerCountArgs<ExtArgs>
            result: $Utils.Optional<ContainerCountAggregateOutputType> | number
          }
        }
      }
      ContainerStats: {
        payload: Prisma.$ContainerStatsPayload<ExtArgs>
        fields: Prisma.ContainerStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContainerStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContainerStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload>
          }
          findFirst: {
            args: Prisma.ContainerStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContainerStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload>
          }
          findMany: {
            args: Prisma.ContainerStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload>[]
          }
          create: {
            args: Prisma.ContainerStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload>
          }
          createMany: {
            args: Prisma.ContainerStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContainerStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload>[]
          }
          delete: {
            args: Prisma.ContainerStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload>
          }
          update: {
            args: Prisma.ContainerStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload>
          }
          deleteMany: {
            args: Prisma.ContainerStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContainerStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContainerStatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload>[]
          }
          upsert: {
            args: Prisma.ContainerStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerStatsPayload>
          }
          aggregate: {
            args: Prisma.ContainerStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContainerStats>
          }
          groupBy: {
            args: Prisma.ContainerStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContainerStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContainerStatsCountArgs<ExtArgs>
            result: $Utils.Optional<ContainerStatsCountAggregateOutputType> | number
          }
        }
      }
      ContainerLog: {
        payload: Prisma.$ContainerLogPayload<ExtArgs>
        fields: Prisma.ContainerLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContainerLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContainerLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload>
          }
          findFirst: {
            args: Prisma.ContainerLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContainerLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload>
          }
          findMany: {
            args: Prisma.ContainerLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload>[]
          }
          create: {
            args: Prisma.ContainerLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload>
          }
          createMany: {
            args: Prisma.ContainerLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContainerLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload>[]
          }
          delete: {
            args: Prisma.ContainerLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload>
          }
          update: {
            args: Prisma.ContainerLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload>
          }
          deleteMany: {
            args: Prisma.ContainerLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContainerLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContainerLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload>[]
          }
          upsert: {
            args: Prisma.ContainerLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerLogPayload>
          }
          aggregate: {
            args: Prisma.ContainerLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContainerLog>
          }
          groupBy: {
            args: Prisma.ContainerLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContainerLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContainerLogCountArgs<ExtArgs>
            result: $Utils.Optional<ContainerLogCountAggregateOutputType> | number
          }
        }
      }
      ServiceHealth: {
        payload: Prisma.$ServiceHealthPayload<ExtArgs>
        fields: Prisma.ServiceHealthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceHealthFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceHealthFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload>
          }
          findFirst: {
            args: Prisma.ServiceHealthFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceHealthFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload>
          }
          findMany: {
            args: Prisma.ServiceHealthFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload>[]
          }
          create: {
            args: Prisma.ServiceHealthCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload>
          }
          createMany: {
            args: Prisma.ServiceHealthCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceHealthCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload>[]
          }
          delete: {
            args: Prisma.ServiceHealthDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload>
          }
          update: {
            args: Prisma.ServiceHealthUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload>
          }
          deleteMany: {
            args: Prisma.ServiceHealthDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceHealthUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceHealthUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload>[]
          }
          upsert: {
            args: Prisma.ServiceHealthUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceHealthPayload>
          }
          aggregate: {
            args: Prisma.ServiceHealthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceHealth>
          }
          groupBy: {
            args: Prisma.ServiceHealthGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceHealthGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceHealthCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceHealthCountAggregateOutputType> | number
          }
        }
      }
      InfrastructureMetric: {
        payload: Prisma.$InfrastructureMetricPayload<ExtArgs>
        fields: Prisma.InfrastructureMetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InfrastructureMetricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InfrastructureMetricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload>
          }
          findFirst: {
            args: Prisma.InfrastructureMetricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InfrastructureMetricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload>
          }
          findMany: {
            args: Prisma.InfrastructureMetricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload>[]
          }
          create: {
            args: Prisma.InfrastructureMetricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload>
          }
          createMany: {
            args: Prisma.InfrastructureMetricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InfrastructureMetricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload>[]
          }
          delete: {
            args: Prisma.InfrastructureMetricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload>
          }
          update: {
            args: Prisma.InfrastructureMetricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload>
          }
          deleteMany: {
            args: Prisma.InfrastructureMetricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InfrastructureMetricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InfrastructureMetricUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload>[]
          }
          upsert: {
            args: Prisma.InfrastructureMetricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureMetricPayload>
          }
          aggregate: {
            args: Prisma.InfrastructureMetricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInfrastructureMetric>
          }
          groupBy: {
            args: Prisma.InfrastructureMetricGroupByArgs<ExtArgs>
            result: $Utils.Optional<InfrastructureMetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.InfrastructureMetricCountArgs<ExtArgs>
            result: $Utils.Optional<InfrastructureMetricCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      WebVMTemplate: {
        payload: Prisma.$WebVMTemplatePayload<ExtArgs>
        fields: Prisma.WebVMTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebVMTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebVMTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload>
          }
          findFirst: {
            args: Prisma.WebVMTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebVMTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload>
          }
          findMany: {
            args: Prisma.WebVMTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload>[]
          }
          create: {
            args: Prisma.WebVMTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload>
          }
          createMany: {
            args: Prisma.WebVMTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebVMTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload>[]
          }
          delete: {
            args: Prisma.WebVMTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload>
          }
          update: {
            args: Prisma.WebVMTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload>
          }
          deleteMany: {
            args: Prisma.WebVMTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebVMTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WebVMTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload>[]
          }
          upsert: {
            args: Prisma.WebVMTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMTemplatePayload>
          }
          aggregate: {
            args: Prisma.WebVMTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebVMTemplate>
          }
          groupBy: {
            args: Prisma.WebVMTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebVMTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebVMTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<WebVMTemplateCountAggregateOutputType> | number
          }
        }
      }
      WebVMSnapshot: {
        payload: Prisma.$WebVMSnapshotPayload<ExtArgs>
        fields: Prisma.WebVMSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebVMSnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebVMSnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload>
          }
          findFirst: {
            args: Prisma.WebVMSnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebVMSnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload>
          }
          findMany: {
            args: Prisma.WebVMSnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload>[]
          }
          create: {
            args: Prisma.WebVMSnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload>
          }
          createMany: {
            args: Prisma.WebVMSnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebVMSnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload>[]
          }
          delete: {
            args: Prisma.WebVMSnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload>
          }
          update: {
            args: Prisma.WebVMSnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.WebVMSnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebVMSnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WebVMSnapshotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload>[]
          }
          upsert: {
            args: Prisma.WebVMSnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebVMSnapshotPayload>
          }
          aggregate: {
            args: Prisma.WebVMSnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebVMSnapshot>
          }
          groupBy: {
            args: Prisma.WebVMSnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebVMSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebVMSnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<WebVMSnapshotCountAggregateOutputType> | number
          }
        }
      }
      WorkspacePersistence: {
        payload: Prisma.$WorkspacePersistencePayload<ExtArgs>
        fields: Prisma.WorkspacePersistenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspacePersistenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspacePersistenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload>
          }
          findFirst: {
            args: Prisma.WorkspacePersistenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspacePersistenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload>
          }
          findMany: {
            args: Prisma.WorkspacePersistenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload>[]
          }
          create: {
            args: Prisma.WorkspacePersistenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload>
          }
          createMany: {
            args: Prisma.WorkspacePersistenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspacePersistenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload>[]
          }
          delete: {
            args: Prisma.WorkspacePersistenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload>
          }
          update: {
            args: Prisma.WorkspacePersistenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload>
          }
          deleteMany: {
            args: Prisma.WorkspacePersistenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspacePersistenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspacePersistenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload>[]
          }
          upsert: {
            args: Prisma.WorkspacePersistenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePersistencePayload>
          }
          aggregate: {
            args: Prisma.WorkspacePersistenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspacePersistence>
          }
          groupBy: {
            args: Prisma.WorkspacePersistenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspacePersistenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspacePersistenceCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspacePersistenceCountAggregateOutputType> | number
          }
        }
      }
      InfrastructureAlert: {
        payload: Prisma.$InfrastructureAlertPayload<ExtArgs>
        fields: Prisma.InfrastructureAlertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InfrastructureAlertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InfrastructureAlertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload>
          }
          findFirst: {
            args: Prisma.InfrastructureAlertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InfrastructureAlertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload>
          }
          findMany: {
            args: Prisma.InfrastructureAlertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload>[]
          }
          create: {
            args: Prisma.InfrastructureAlertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload>
          }
          createMany: {
            args: Prisma.InfrastructureAlertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InfrastructureAlertCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload>[]
          }
          delete: {
            args: Prisma.InfrastructureAlertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload>
          }
          update: {
            args: Prisma.InfrastructureAlertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload>
          }
          deleteMany: {
            args: Prisma.InfrastructureAlertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InfrastructureAlertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InfrastructureAlertUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload>[]
          }
          upsert: {
            args: Prisma.InfrastructureAlertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfrastructureAlertPayload>
          }
          aggregate: {
            args: Prisma.InfrastructureAlertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInfrastructureAlert>
          }
          groupBy: {
            args: Prisma.InfrastructureAlertGroupByArgs<ExtArgs>
            result: $Utils.Optional<InfrastructureAlertGroupByOutputType>[]
          }
          count: {
            args: Prisma.InfrastructureAlertCountArgs<ExtArgs>
            result: $Utils.Optional<InfrastructureAlertCountAggregateOutputType> | number
          }
        }
      }
      AlertNotification: {
        payload: Prisma.$AlertNotificationPayload<ExtArgs>
        fields: Prisma.AlertNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertNotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertNotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload>
          }
          findFirst: {
            args: Prisma.AlertNotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertNotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload>
          }
          findMany: {
            args: Prisma.AlertNotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload>[]
          }
          create: {
            args: Prisma.AlertNotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload>
          }
          createMany: {
            args: Prisma.AlertNotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlertNotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload>[]
          }
          delete: {
            args: Prisma.AlertNotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload>
          }
          update: {
            args: Prisma.AlertNotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload>
          }
          deleteMany: {
            args: Prisma.AlertNotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertNotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlertNotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload>[]
          }
          upsert: {
            args: Prisma.AlertNotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertNotificationPayload>
          }
          aggregate: {
            args: Prisma.AlertNotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlertNotification>
          }
          groupBy: {
            args: Prisma.AlertNotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertNotificationCountArgs<ExtArgs>
            result: $Utils.Optional<AlertNotificationCountAggregateOutputType> | number
          }
        }
      }
      WorkspaceFile: {
        payload: Prisma.$WorkspaceFilePayload<ExtArgs>
        fields: Prisma.WorkspaceFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload>
          }
          findFirst: {
            args: Prisma.WorkspaceFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload>
          }
          findMany: {
            args: Prisma.WorkspaceFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload>[]
          }
          create: {
            args: Prisma.WorkspaceFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload>
          }
          createMany: {
            args: Prisma.WorkspaceFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload>[]
          }
          delete: {
            args: Prisma.WorkspaceFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload>
          }
          update: {
            args: Prisma.WorkspaceFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspaceFileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload>[]
          }
          upsert: {
            args: Prisma.WorkspaceFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceFilePayload>
          }
          aggregate: {
            args: Prisma.WorkspaceFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspaceFile>
          }
          groupBy: {
            args: Prisma.WorkspaceFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceFileCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceFileCountAggregateOutputType> | number
          }
        }
      }
      FileIndex: {
        payload: Prisma.$FileIndexPayload<ExtArgs>
        fields: Prisma.FileIndexFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileIndexFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileIndexFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload>
          }
          findFirst: {
            args: Prisma.FileIndexFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileIndexFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload>
          }
          findMany: {
            args: Prisma.FileIndexFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload>[]
          }
          create: {
            args: Prisma.FileIndexCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload>
          }
          createMany: {
            args: Prisma.FileIndexCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileIndexCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload>[]
          }
          delete: {
            args: Prisma.FileIndexDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload>
          }
          update: {
            args: Prisma.FileIndexUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload>
          }
          deleteMany: {
            args: Prisma.FileIndexDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileIndexUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileIndexUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload>[]
          }
          upsert: {
            args: Prisma.FileIndexUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileIndexPayload>
          }
          aggregate: {
            args: Prisma.FileIndexAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFileIndex>
          }
          groupBy: {
            args: Prisma.FileIndexGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileIndexGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileIndexCountArgs<ExtArgs>
            result: $Utils.Optional<FileIndexCountAggregateOutputType> | number
          }
        }
      }
      WorkspaceState: {
        payload: Prisma.$WorkspaceStatePayload<ExtArgs>
        fields: Prisma.WorkspaceStateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceStateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceStateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload>
          }
          findFirst: {
            args: Prisma.WorkspaceStateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceStateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload>
          }
          findMany: {
            args: Prisma.WorkspaceStateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload>[]
          }
          create: {
            args: Prisma.WorkspaceStateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload>
          }
          createMany: {
            args: Prisma.WorkspaceStateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceStateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload>[]
          }
          delete: {
            args: Prisma.WorkspaceStateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload>
          }
          update: {
            args: Prisma.WorkspaceStateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceStateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceStateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspaceStateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload>[]
          }
          upsert: {
            args: Prisma.WorkspaceStateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceStatePayload>
          }
          aggregate: {
            args: Prisma.WorkspaceStateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspaceState>
          }
          groupBy: {
            args: Prisma.WorkspaceStateGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceStateGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceStateCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceStateCountAggregateOutputType> | number
          }
        }
      }
      WorkspaceSync: {
        payload: Prisma.$WorkspaceSyncPayload<ExtArgs>
        fields: Prisma.WorkspaceSyncFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceSyncFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceSyncFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload>
          }
          findFirst: {
            args: Prisma.WorkspaceSyncFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceSyncFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload>
          }
          findMany: {
            args: Prisma.WorkspaceSyncFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload>[]
          }
          create: {
            args: Prisma.WorkspaceSyncCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload>
          }
          createMany: {
            args: Prisma.WorkspaceSyncCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceSyncCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload>[]
          }
          delete: {
            args: Prisma.WorkspaceSyncDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload>
          }
          update: {
            args: Prisma.WorkspaceSyncUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceSyncDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceSyncUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspaceSyncUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload>[]
          }
          upsert: {
            args: Prisma.WorkspaceSyncUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceSyncPayload>
          }
          aggregate: {
            args: Prisma.WorkspaceSyncAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspaceSync>
          }
          groupBy: {
            args: Prisma.WorkspaceSyncGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceSyncGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceSyncCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceSyncCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
    userPreference?: UserPreferenceOmit
    organization?: OrganizationOmit
    organizationMember?: OrganizationMemberOmit
    organizationInvitation?: OrganizationInvitationOmit
    project?: ProjectOmit
    task?: TaskOmit
    workspace?: WorkspaceOmit
    webVMInstance?: WebVMInstanceOmit
    webVMMetric?: WebVMMetricOmit
    storageBucket?: StorageBucketOmit
    storageObject?: StorageObjectOmit
    storageUsage?: StorageUsageOmit
    container?: ContainerOmit
    containerStats?: ContainerStatsOmit
    containerLog?: ContainerLogOmit
    serviceHealth?: ServiceHealthOmit
    infrastructureMetric?: InfrastructureMetricOmit
    auditLog?: AuditLogOmit
    webVMTemplate?: WebVMTemplateOmit
    webVMSnapshot?: WebVMSnapshotOmit
    workspacePersistence?: WorkspacePersistenceOmit
    infrastructureAlert?: InfrastructureAlertOmit
    alertNotification?: AlertNotificationOmit
    workspaceFile?: WorkspaceFileOmit
    fileIndex?: FileIndexOmit
    workspaceState?: WorkspaceStateOmit
    workspaceSync?: WorkspaceSyncOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    organizations: number
    assignedTasks: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    organizations?: boolean | UserCountOutputTypeCountOrganizationsArgs
    assignedTasks?: boolean | UserCountOutputTypeCountAssignedTasksArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrganizationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    members: number
    projects: number
    invitations: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | OrganizationCountOutputTypeCountMembersArgs
    projects?: boolean | OrganizationCountOutputTypeCountProjectsArgs
    invitations?: boolean | OrganizationCountOutputTypeCountInvitationsArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationMemberWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationInvitationWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    tasks: number
    workspaces: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | ProjectCountOutputTypeCountTasksArgs
    workspaces?: boolean | ProjectCountOutputTypeCountWorkspacesArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountWorkspacesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceWhereInput
  }


  /**
   * Count Type WorkspaceCountOutputType
   */

  export type WorkspaceCountOutputType = {
    instances: number
    files: number
    states: number
    syncs: number
  }

  export type WorkspaceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instances?: boolean | WorkspaceCountOutputTypeCountInstancesArgs
    files?: boolean | WorkspaceCountOutputTypeCountFilesArgs
    states?: boolean | WorkspaceCountOutputTypeCountStatesArgs
    syncs?: boolean | WorkspaceCountOutputTypeCountSyncsArgs
  }

  // Custom InputTypes
  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceCountOutputType
     */
    select?: WorkspaceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebVMInstanceWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceFileWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountStatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceStateWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountSyncsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceSyncWhereInput
  }


  /**
   * Count Type WebVMInstanceCountOutputType
   */

  export type WebVMInstanceCountOutputType = {
    metrics: number
    snapshots: number
  }

  export type WebVMInstanceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metrics?: boolean | WebVMInstanceCountOutputTypeCountMetricsArgs
    snapshots?: boolean | WebVMInstanceCountOutputTypeCountSnapshotsArgs
  }

  // Custom InputTypes
  /**
   * WebVMInstanceCountOutputType without action
   */
  export type WebVMInstanceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstanceCountOutputType
     */
    select?: WebVMInstanceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WebVMInstanceCountOutputType without action
   */
  export type WebVMInstanceCountOutputTypeCountMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebVMMetricWhereInput
  }

  /**
   * WebVMInstanceCountOutputType without action
   */
  export type WebVMInstanceCountOutputTypeCountSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebVMSnapshotWhereInput
  }


  /**
   * Count Type StorageBucketCountOutputType
   */

  export type StorageBucketCountOutputType = {
    objects: number
    usage: number
  }

  export type StorageBucketCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    objects?: boolean | StorageBucketCountOutputTypeCountObjectsArgs
    usage?: boolean | StorageBucketCountOutputTypeCountUsageArgs
  }

  // Custom InputTypes
  /**
   * StorageBucketCountOutputType without action
   */
  export type StorageBucketCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucketCountOutputType
     */
    select?: StorageBucketCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StorageBucketCountOutputType without action
   */
  export type StorageBucketCountOutputTypeCountObjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StorageObjectWhereInput
  }

  /**
   * StorageBucketCountOutputType without action
   */
  export type StorageBucketCountOutputTypeCountUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StorageUsageWhereInput
  }


  /**
   * Count Type ContainerCountOutputType
   */

  export type ContainerCountOutputType = {
    stats: number
    logs: number
  }

  export type ContainerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stats?: boolean | ContainerCountOutputTypeCountStatsArgs
    logs?: boolean | ContainerCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * ContainerCountOutputType without action
   */
  export type ContainerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerCountOutputType
     */
    select?: ContainerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContainerCountOutputType without action
   */
  export type ContainerCountOutputTypeCountStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContainerStatsWhereInput
  }

  /**
   * ContainerCountOutputType without action
   */
  export type ContainerCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContainerLogWhereInput
  }


  /**
   * Count Type WebVMTemplateCountOutputType
   */

  export type WebVMTemplateCountOutputType = {
    instances: number
  }

  export type WebVMTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instances?: boolean | WebVMTemplateCountOutputTypeCountInstancesArgs
  }

  // Custom InputTypes
  /**
   * WebVMTemplateCountOutputType without action
   */
  export type WebVMTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplateCountOutputType
     */
    select?: WebVMTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WebVMTemplateCountOutputType without action
   */
  export type WebVMTemplateCountOutputTypeCountInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebVMInstanceWhereInput
  }


  /**
   * Count Type InfrastructureAlertCountOutputType
   */

  export type InfrastructureAlertCountOutputType = {
    notifications: number
  }

  export type InfrastructureAlertCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | InfrastructureAlertCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * InfrastructureAlertCountOutputType without action
   */
  export type InfrastructureAlertCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlertCountOutputType
     */
    select?: InfrastructureAlertCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InfrastructureAlertCountOutputType without action
   */
  export type InfrastructureAlertCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertNotificationWhereInput
  }


  /**
   * Count Type WorkspaceFileCountOutputType
   */

  export type WorkspaceFileCountOutputType = {
    children: number
    indexes: number
  }

  export type WorkspaceFileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | WorkspaceFileCountOutputTypeCountChildrenArgs
    indexes?: boolean | WorkspaceFileCountOutputTypeCountIndexesArgs
  }

  // Custom InputTypes
  /**
   * WorkspaceFileCountOutputType without action
   */
  export type WorkspaceFileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFileCountOutputType
     */
    select?: WorkspaceFileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkspaceFileCountOutputType without action
   */
  export type WorkspaceFileCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceFileWhereInput
  }

  /**
   * WorkspaceFileCountOutputType without action
   */
  export type WorkspaceFileCountOutputTypeCountIndexesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileIndexWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    organizations?: boolean | User$organizationsArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "password" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    organizations?: boolean | User$organizationsArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      organizations: Prisma.$OrganizationMemberPayload<ExtArgs>[]
      assignedTasks: Prisma.$TaskPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      preferences: Prisma.$UserPreferencePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string | null
      emailVerified: Date | null
      image: string | null
      password: string | null
      role: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organizations<T extends User$organizationsArgs<ExtArgs> = {}>(args?: Subset<T, User$organizationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedTasks<T extends User$assignedTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferences<T extends User$preferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$preferencesArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.organizations
   */
  export type User$organizationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    where?: OrganizationMemberWhereInput
    orderBy?: OrganizationMemberOrderByWithRelationInput | OrganizationMemberOrderByWithRelationInput[]
    cursor?: OrganizationMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrganizationMemberScalarFieldEnum | OrganizationMemberScalarFieldEnum[]
  }

  /**
   * User.assignedTasks
   */
  export type User$assignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.preferences
   */
  export type User$preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    where?: UserPreferenceWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model UserPreference
   */

  export type AggregateUserPreference = {
    _count: UserPreferenceCountAggregateOutputType | null
    _min: UserPreferenceMinAggregateOutputType | null
    _max: UserPreferenceMaxAggregateOutputType | null
  }

  export type UserPreferenceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    theme: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferenceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    theme: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferenceCountAggregateOutputType = {
    id: number
    userId: number
    theme: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserPreferenceMinAggregateInputType = {
    id?: true
    userId?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferenceMaxAggregateInputType = {
    id?: true
    userId?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferenceCountAggregateInputType = {
    id?: true
    userId?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreference to aggregate.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPreferences
    **/
    _count?: true | UserPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPreferenceMaxAggregateInputType
  }

  export type GetUserPreferenceAggregateType<T extends UserPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPreference[P]>
      : GetScalarType<T[P], AggregateUserPreference[P]>
  }




  export type UserPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferenceWhereInput
    orderBy?: UserPreferenceOrderByWithAggregationInput | UserPreferenceOrderByWithAggregationInput[]
    by: UserPreferenceScalarFieldEnum[] | UserPreferenceScalarFieldEnum
    having?: UserPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPreferenceCountAggregateInputType | true
    _min?: UserPreferenceMinAggregateInputType
    _max?: UserPreferenceMaxAggregateInputType
  }

  export type UserPreferenceGroupByOutputType = {
    id: string
    userId: string
    theme: string
    createdAt: Date
    updatedAt: Date
    _count: UserPreferenceCountAggregateOutputType | null
    _min: UserPreferenceMinAggregateOutputType | null
    _max: UserPreferenceMaxAggregateOutputType | null
  }

  type GetUserPreferenceGroupByPayload<T extends UserPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], UserPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type UserPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    theme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreference"]>

  export type UserPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    theme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreference"]>

  export type UserPreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    theme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreference"]>

  export type UserPreferenceSelectScalar = {
    id?: boolean
    userId?: boolean
    theme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "theme" | "createdAt" | "updatedAt", ExtArgs["result"]["userPreference"]>
  export type UserPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPreferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPreference"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      theme: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userPreference"]>
    composites: {}
  }

  type UserPreferenceGetPayload<S extends boolean | null | undefined | UserPreferenceDefaultArgs> = $Result.GetResult<Prisma.$UserPreferencePayload, S>

  type UserPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserPreferenceCountAggregateInputType | true
    }

  export interface UserPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPreference'], meta: { name: 'UserPreference' } }
    /**
     * Find zero or one UserPreference that matches the filter.
     * @param {UserPreferenceFindUniqueArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPreferenceFindUniqueArgs>(args: SelectSubset<T, UserPreferenceFindUniqueArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserPreferenceFindUniqueOrThrowArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindFirstArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPreferenceFindFirstArgs>(args?: SelectSubset<T, UserPreferenceFindFirstArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindFirstOrThrowArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPreferences
     * const userPreferences = await prisma.userPreference.findMany()
     * 
     * // Get first 10 UserPreferences
     * const userPreferences = await prisma.userPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPreferenceWithIdOnly = await prisma.userPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPreferenceFindManyArgs>(args?: SelectSubset<T, UserPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserPreference.
     * @param {UserPreferenceCreateArgs} args - Arguments to create a UserPreference.
     * @example
     * // Create one UserPreference
     * const UserPreference = await prisma.userPreference.create({
     *   data: {
     *     // ... data to create a UserPreference
     *   }
     * })
     * 
     */
    create<T extends UserPreferenceCreateArgs>(args: SelectSubset<T, UserPreferenceCreateArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserPreferences.
     * @param {UserPreferenceCreateManyArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreference = await prisma.userPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPreferenceCreateManyArgs>(args?: SelectSubset<T, UserPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPreferences and returns the data saved in the database.
     * @param {UserPreferenceCreateManyAndReturnArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreference = await prisma.userPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPreferences and only return the `id`
     * const userPreferenceWithIdOnly = await prisma.userPreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserPreference.
     * @param {UserPreferenceDeleteArgs} args - Arguments to delete one UserPreference.
     * @example
     * // Delete one UserPreference
     * const UserPreference = await prisma.userPreference.delete({
     *   where: {
     *     // ... filter to delete one UserPreference
     *   }
     * })
     * 
     */
    delete<T extends UserPreferenceDeleteArgs>(args: SelectSubset<T, UserPreferenceDeleteArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserPreference.
     * @param {UserPreferenceUpdateArgs} args - Arguments to update one UserPreference.
     * @example
     * // Update one UserPreference
     * const userPreference = await prisma.userPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPreferenceUpdateArgs>(args: SelectSubset<T, UserPreferenceUpdateArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserPreferences.
     * @param {UserPreferenceDeleteManyArgs} args - Arguments to filter UserPreferences to delete.
     * @example
     * // Delete a few UserPreferences
     * const { count } = await prisma.userPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPreferenceDeleteManyArgs>(args?: SelectSubset<T, UserPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPreferences
     * const userPreference = await prisma.userPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPreferenceUpdateManyArgs>(args: SelectSubset<T, UserPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences and returns the data updated in the database.
     * @param {UserPreferenceUpdateManyAndReturnArgs} args - Arguments to update many UserPreferences.
     * @example
     * // Update many UserPreferences
     * const userPreference = await prisma.userPreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserPreferences and only return the `id`
     * const userPreferenceWithIdOnly = await prisma.userPreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserPreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, UserPreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserPreference.
     * @param {UserPreferenceUpsertArgs} args - Arguments to update or create a UserPreference.
     * @example
     * // Update or create a UserPreference
     * const userPreference = await prisma.userPreference.upsert({
     *   create: {
     *     // ... data to create a UserPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPreference we want to update
     *   }
     * })
     */
    upsert<T extends UserPreferenceUpsertArgs>(args: SelectSubset<T, UserPreferenceUpsertArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceCountArgs} args - Arguments to filter UserPreferences to count.
     * @example
     * // Count the number of UserPreferences
     * const count = await prisma.userPreference.count({
     *   where: {
     *     // ... the filter for the UserPreferences we want to count
     *   }
     * })
    **/
    count<T extends UserPreferenceCountArgs>(
      args?: Subset<T, UserPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPreferenceAggregateArgs>(args: Subset<T, UserPreferenceAggregateArgs>): Prisma.PrismaPromise<GetUserPreferenceAggregateType<T>>

    /**
     * Group by UserPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: UserPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPreference model
   */
  readonly fields: UserPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPreference model
   */
  interface UserPreferenceFieldRefs {
    readonly id: FieldRef<"UserPreference", 'String'>
    readonly userId: FieldRef<"UserPreference", 'String'>
    readonly theme: FieldRef<"UserPreference", 'String'>
    readonly createdAt: FieldRef<"UserPreference", 'DateTime'>
    readonly updatedAt: FieldRef<"UserPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPreference findUnique
   */
  export type UserPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference findUniqueOrThrow
   */
  export type UserPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference findFirst
   */
  export type UserPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference findFirstOrThrow
   */
  export type UserPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference findMany
   */
  export type UserPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference create
   */
  export type UserPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPreference.
     */
    data: XOR<UserPreferenceCreateInput, UserPreferenceUncheckedCreateInput>
  }

  /**
   * UserPreference createMany
   */
  export type UserPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferenceCreateManyInput | UserPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPreference createManyAndReturn
   */
  export type UserPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferenceCreateManyInput | UserPreferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPreference update
   */
  export type UserPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPreference.
     */
    data: XOR<UserPreferenceUpdateInput, UserPreferenceUncheckedUpdateInput>
    /**
     * Choose, which UserPreference to update.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference updateMany
   */
  export type UserPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferenceUpdateManyMutationInput, UserPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferenceWhereInput
    /**
     * Limit how many UserPreferences to update.
     */
    limit?: number
  }

  /**
   * UserPreference updateManyAndReturn
   */
  export type UserPreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferenceUpdateManyMutationInput, UserPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferenceWhereInput
    /**
     * Limit how many UserPreferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPreference upsert
   */
  export type UserPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPreference to update in case it exists.
     */
    where: UserPreferenceWhereUniqueInput
    /**
     * In case the UserPreference found by the `where` argument doesn't exist, create a new UserPreference with this data.
     */
    create: XOR<UserPreferenceCreateInput, UserPreferenceUncheckedCreateInput>
    /**
     * In case the UserPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPreferenceUpdateInput, UserPreferenceUncheckedUpdateInput>
  }

  /**
   * UserPreference delete
   */
  export type UserPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter which UserPreference to delete.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference deleteMany
   */
  export type UserPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to delete
     */
    where?: UserPreferenceWhereInput
    /**
     * Limit how many UserPreferences to delete.
     */
    limit?: number
  }

  /**
   * UserPreference without action
   */
  export type UserPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreference
     */
    omit?: UserPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    image: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    slug: string
    image: string | null
    createdAt: Date
    updatedAt: Date
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Organization$membersArgs<ExtArgs>
    projects?: boolean | Organization$projectsArgs<ExtArgs>
    invitations?: boolean | Organization$invitationsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "image" | "createdAt" | "updatedAt", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Organization$membersArgs<ExtArgs>
    projects?: boolean | Organization$projectsArgs<ExtArgs>
    invitations?: boolean | Organization$invitationsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      members: Prisma.$OrganizationMemberPayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      invitations: Prisma.$OrganizationInvitationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      image: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Organization$membersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends Organization$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invitations<T extends Organization$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly slug: FieldRef<"Organization", 'String'>
    readonly image: FieldRef<"Organization", 'String'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly updatedAt: FieldRef<"Organization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.members
   */
  export type Organization$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    where?: OrganizationMemberWhereInput
    orderBy?: OrganizationMemberOrderByWithRelationInput | OrganizationMemberOrderByWithRelationInput[]
    cursor?: OrganizationMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrganizationMemberScalarFieldEnum | OrganizationMemberScalarFieldEnum[]
  }

  /**
   * Organization.projects
   */
  export type Organization$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Organization.invitations
   */
  export type Organization$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
    where?: OrganizationInvitationWhereInput
    orderBy?: OrganizationInvitationOrderByWithRelationInput | OrganizationInvitationOrderByWithRelationInput[]
    cursor?: OrganizationInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrganizationInvitationScalarFieldEnum | OrganizationInvitationScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model OrganizationMember
   */

  export type AggregateOrganizationMember = {
    _count: OrganizationMemberCountAggregateOutputType | null
    _min: OrganizationMemberMinAggregateOutputType | null
    _max: OrganizationMemberMaxAggregateOutputType | null
  }

  export type OrganizationMemberMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    role: $Enums.MemberRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationMemberMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    role: $Enums.MemberRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationMemberCountAggregateOutputType = {
    id: number
    organizationId: number
    userId: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrganizationMemberMinAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationMemberMaxAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationMemberCountAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrganizationMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrganizationMember to aggregate.
     */
    where?: OrganizationMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationMembers to fetch.
     */
    orderBy?: OrganizationMemberOrderByWithRelationInput | OrganizationMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrganizationMembers
    **/
    _count?: true | OrganizationMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMemberMaxAggregateInputType
  }

  export type GetOrganizationMemberAggregateType<T extends OrganizationMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganizationMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganizationMember[P]>
      : GetScalarType<T[P], AggregateOrganizationMember[P]>
  }




  export type OrganizationMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationMemberWhereInput
    orderBy?: OrganizationMemberOrderByWithAggregationInput | OrganizationMemberOrderByWithAggregationInput[]
    by: OrganizationMemberScalarFieldEnum[] | OrganizationMemberScalarFieldEnum
    having?: OrganizationMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationMemberCountAggregateInputType | true
    _min?: OrganizationMemberMinAggregateInputType
    _max?: OrganizationMemberMaxAggregateInputType
  }

  export type OrganizationMemberGroupByOutputType = {
    id: string
    organizationId: string
    userId: string
    role: $Enums.MemberRole
    createdAt: Date
    updatedAt: Date
    _count: OrganizationMemberCountAggregateOutputType | null
    _min: OrganizationMemberMinAggregateOutputType | null
    _max: OrganizationMemberMaxAggregateOutputType | null
  }

  type GetOrganizationMemberGroupByPayload<T extends OrganizationMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationMemberGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationMemberGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizationMember"]>

  export type OrganizationMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizationMember"]>

  export type OrganizationMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizationMember"]>

  export type OrganizationMemberSelectScalar = {
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrganizationMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "userId" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["organizationMember"]>
  export type OrganizationMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrganizationMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrganizationMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrganizationMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrganizationMember"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      userId: string
      role: $Enums.MemberRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["organizationMember"]>
    composites: {}
  }

  type OrganizationMemberGetPayload<S extends boolean | null | undefined | OrganizationMemberDefaultArgs> = $Result.GetResult<Prisma.$OrganizationMemberPayload, S>

  type OrganizationMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationMemberCountAggregateInputType | true
    }

  export interface OrganizationMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrganizationMember'], meta: { name: 'OrganizationMember' } }
    /**
     * Find zero or one OrganizationMember that matches the filter.
     * @param {OrganizationMemberFindUniqueArgs} args - Arguments to find a OrganizationMember
     * @example
     * // Get one OrganizationMember
     * const organizationMember = await prisma.organizationMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationMemberFindUniqueArgs>(args: SelectSubset<T, OrganizationMemberFindUniqueArgs<ExtArgs>>): Prisma__OrganizationMemberClient<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrganizationMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationMemberFindUniqueOrThrowArgs} args - Arguments to find a OrganizationMember
     * @example
     * // Get one OrganizationMember
     * const organizationMember = await prisma.organizationMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationMemberClient<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrganizationMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMemberFindFirstArgs} args - Arguments to find a OrganizationMember
     * @example
     * // Get one OrganizationMember
     * const organizationMember = await prisma.organizationMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationMemberFindFirstArgs>(args?: SelectSubset<T, OrganizationMemberFindFirstArgs<ExtArgs>>): Prisma__OrganizationMemberClient<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrganizationMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMemberFindFirstOrThrowArgs} args - Arguments to find a OrganizationMember
     * @example
     * // Get one OrganizationMember
     * const organizationMember = await prisma.organizationMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationMemberClient<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrganizationMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrganizationMembers
     * const organizationMembers = await prisma.organizationMember.findMany()
     * 
     * // Get first 10 OrganizationMembers
     * const organizationMembers = await prisma.organizationMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationMemberWithIdOnly = await prisma.organizationMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationMemberFindManyArgs>(args?: SelectSubset<T, OrganizationMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrganizationMember.
     * @param {OrganizationMemberCreateArgs} args - Arguments to create a OrganizationMember.
     * @example
     * // Create one OrganizationMember
     * const OrganizationMember = await prisma.organizationMember.create({
     *   data: {
     *     // ... data to create a OrganizationMember
     *   }
     * })
     * 
     */
    create<T extends OrganizationMemberCreateArgs>(args: SelectSubset<T, OrganizationMemberCreateArgs<ExtArgs>>): Prisma__OrganizationMemberClient<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrganizationMembers.
     * @param {OrganizationMemberCreateManyArgs} args - Arguments to create many OrganizationMembers.
     * @example
     * // Create many OrganizationMembers
     * const organizationMember = await prisma.organizationMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationMemberCreateManyArgs>(args?: SelectSubset<T, OrganizationMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrganizationMembers and returns the data saved in the database.
     * @param {OrganizationMemberCreateManyAndReturnArgs} args - Arguments to create many OrganizationMembers.
     * @example
     * // Create many OrganizationMembers
     * const organizationMember = await prisma.organizationMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrganizationMembers and only return the `id`
     * const organizationMemberWithIdOnly = await prisma.organizationMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrganizationMember.
     * @param {OrganizationMemberDeleteArgs} args - Arguments to delete one OrganizationMember.
     * @example
     * // Delete one OrganizationMember
     * const OrganizationMember = await prisma.organizationMember.delete({
     *   where: {
     *     // ... filter to delete one OrganizationMember
     *   }
     * })
     * 
     */
    delete<T extends OrganizationMemberDeleteArgs>(args: SelectSubset<T, OrganizationMemberDeleteArgs<ExtArgs>>): Prisma__OrganizationMemberClient<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrganizationMember.
     * @param {OrganizationMemberUpdateArgs} args - Arguments to update one OrganizationMember.
     * @example
     * // Update one OrganizationMember
     * const organizationMember = await prisma.organizationMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationMemberUpdateArgs>(args: SelectSubset<T, OrganizationMemberUpdateArgs<ExtArgs>>): Prisma__OrganizationMemberClient<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrganizationMembers.
     * @param {OrganizationMemberDeleteManyArgs} args - Arguments to filter OrganizationMembers to delete.
     * @example
     * // Delete a few OrganizationMembers
     * const { count } = await prisma.organizationMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationMemberDeleteManyArgs>(args?: SelectSubset<T, OrganizationMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrganizationMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrganizationMembers
     * const organizationMember = await prisma.organizationMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationMemberUpdateManyArgs>(args: SelectSubset<T, OrganizationMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrganizationMembers and returns the data updated in the database.
     * @param {OrganizationMemberUpdateManyAndReturnArgs} args - Arguments to update many OrganizationMembers.
     * @example
     * // Update many OrganizationMembers
     * const organizationMember = await prisma.organizationMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrganizationMembers and only return the `id`
     * const organizationMemberWithIdOnly = await prisma.organizationMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrganizationMember.
     * @param {OrganizationMemberUpsertArgs} args - Arguments to update or create a OrganizationMember.
     * @example
     * // Update or create a OrganizationMember
     * const organizationMember = await prisma.organizationMember.upsert({
     *   create: {
     *     // ... data to create a OrganizationMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrganizationMember we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationMemberUpsertArgs>(args: SelectSubset<T, OrganizationMemberUpsertArgs<ExtArgs>>): Prisma__OrganizationMemberClient<$Result.GetResult<Prisma.$OrganizationMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrganizationMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMemberCountArgs} args - Arguments to filter OrganizationMembers to count.
     * @example
     * // Count the number of OrganizationMembers
     * const count = await prisma.organizationMember.count({
     *   where: {
     *     // ... the filter for the OrganizationMembers we want to count
     *   }
     * })
    **/
    count<T extends OrganizationMemberCountArgs>(
      args?: Subset<T, OrganizationMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrganizationMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationMemberAggregateArgs>(args: Subset<T, OrganizationMemberAggregateArgs>): Prisma.PrismaPromise<GetOrganizationMemberAggregateType<T>>

    /**
     * Group by OrganizationMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationMemberGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrganizationMember model
   */
  readonly fields: OrganizationMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrganizationMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrganizationMember model
   */
  interface OrganizationMemberFieldRefs {
    readonly id: FieldRef<"OrganizationMember", 'String'>
    readonly organizationId: FieldRef<"OrganizationMember", 'String'>
    readonly userId: FieldRef<"OrganizationMember", 'String'>
    readonly role: FieldRef<"OrganizationMember", 'MemberRole'>
    readonly createdAt: FieldRef<"OrganizationMember", 'DateTime'>
    readonly updatedAt: FieldRef<"OrganizationMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrganizationMember findUnique
   */
  export type OrganizationMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationMember to fetch.
     */
    where: OrganizationMemberWhereUniqueInput
  }

  /**
   * OrganizationMember findUniqueOrThrow
   */
  export type OrganizationMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationMember to fetch.
     */
    where: OrganizationMemberWhereUniqueInput
  }

  /**
   * OrganizationMember findFirst
   */
  export type OrganizationMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationMember to fetch.
     */
    where?: OrganizationMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationMembers to fetch.
     */
    orderBy?: OrganizationMemberOrderByWithRelationInput | OrganizationMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrganizationMembers.
     */
    cursor?: OrganizationMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrganizationMembers.
     */
    distinct?: OrganizationMemberScalarFieldEnum | OrganizationMemberScalarFieldEnum[]
  }

  /**
   * OrganizationMember findFirstOrThrow
   */
  export type OrganizationMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationMember to fetch.
     */
    where?: OrganizationMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationMembers to fetch.
     */
    orderBy?: OrganizationMemberOrderByWithRelationInput | OrganizationMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrganizationMembers.
     */
    cursor?: OrganizationMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrganizationMembers.
     */
    distinct?: OrganizationMemberScalarFieldEnum | OrganizationMemberScalarFieldEnum[]
  }

  /**
   * OrganizationMember findMany
   */
  export type OrganizationMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationMembers to fetch.
     */
    where?: OrganizationMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationMembers to fetch.
     */
    orderBy?: OrganizationMemberOrderByWithRelationInput | OrganizationMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrganizationMembers.
     */
    cursor?: OrganizationMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationMembers.
     */
    skip?: number
    distinct?: OrganizationMemberScalarFieldEnum | OrganizationMemberScalarFieldEnum[]
  }

  /**
   * OrganizationMember create
   */
  export type OrganizationMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a OrganizationMember.
     */
    data: XOR<OrganizationMemberCreateInput, OrganizationMemberUncheckedCreateInput>
  }

  /**
   * OrganizationMember createMany
   */
  export type OrganizationMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrganizationMembers.
     */
    data: OrganizationMemberCreateManyInput | OrganizationMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrganizationMember createManyAndReturn
   */
  export type OrganizationMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * The data used to create many OrganizationMembers.
     */
    data: OrganizationMemberCreateManyInput | OrganizationMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrganizationMember update
   */
  export type OrganizationMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a OrganizationMember.
     */
    data: XOR<OrganizationMemberUpdateInput, OrganizationMemberUncheckedUpdateInput>
    /**
     * Choose, which OrganizationMember to update.
     */
    where: OrganizationMemberWhereUniqueInput
  }

  /**
   * OrganizationMember updateMany
   */
  export type OrganizationMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrganizationMembers.
     */
    data: XOR<OrganizationMemberUpdateManyMutationInput, OrganizationMemberUncheckedUpdateManyInput>
    /**
     * Filter which OrganizationMembers to update
     */
    where?: OrganizationMemberWhereInput
    /**
     * Limit how many OrganizationMembers to update.
     */
    limit?: number
  }

  /**
   * OrganizationMember updateManyAndReturn
   */
  export type OrganizationMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * The data used to update OrganizationMembers.
     */
    data: XOR<OrganizationMemberUpdateManyMutationInput, OrganizationMemberUncheckedUpdateManyInput>
    /**
     * Filter which OrganizationMembers to update
     */
    where?: OrganizationMemberWhereInput
    /**
     * Limit how many OrganizationMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrganizationMember upsert
   */
  export type OrganizationMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the OrganizationMember to update in case it exists.
     */
    where: OrganizationMemberWhereUniqueInput
    /**
     * In case the OrganizationMember found by the `where` argument doesn't exist, create a new OrganizationMember with this data.
     */
    create: XOR<OrganizationMemberCreateInput, OrganizationMemberUncheckedCreateInput>
    /**
     * In case the OrganizationMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationMemberUpdateInput, OrganizationMemberUncheckedUpdateInput>
  }

  /**
   * OrganizationMember delete
   */
  export type OrganizationMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
    /**
     * Filter which OrganizationMember to delete.
     */
    where: OrganizationMemberWhereUniqueInput
  }

  /**
   * OrganizationMember deleteMany
   */
  export type OrganizationMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrganizationMembers to delete
     */
    where?: OrganizationMemberWhereInput
    /**
     * Limit how many OrganizationMembers to delete.
     */
    limit?: number
  }

  /**
   * OrganizationMember without action
   */
  export type OrganizationMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationMember
     */
    select?: OrganizationMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationMember
     */
    omit?: OrganizationMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationMemberInclude<ExtArgs> | null
  }


  /**
   * Model OrganizationInvitation
   */

  export type AggregateOrganizationInvitation = {
    _count: OrganizationInvitationCountAggregateOutputType | null
    _min: OrganizationInvitationMinAggregateOutputType | null
    _max: OrganizationInvitationMaxAggregateOutputType | null
  }

  export type OrganizationInvitationMinAggregateOutputType = {
    id: string | null
    email: string | null
    organizationId: string | null
    role: $Enums.MemberRole | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type OrganizationInvitationMaxAggregateOutputType = {
    id: string | null
    email: string | null
    organizationId: string | null
    role: $Enums.MemberRole | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type OrganizationInvitationCountAggregateOutputType = {
    id: number
    email: number
    organizationId: number
    role: number
    token: number
    expires: number
    createdAt: number
    _all: number
  }


  export type OrganizationInvitationMinAggregateInputType = {
    id?: true
    email?: true
    organizationId?: true
    role?: true
    token?: true
    expires?: true
    createdAt?: true
  }

  export type OrganizationInvitationMaxAggregateInputType = {
    id?: true
    email?: true
    organizationId?: true
    role?: true
    token?: true
    expires?: true
    createdAt?: true
  }

  export type OrganizationInvitationCountAggregateInputType = {
    id?: true
    email?: true
    organizationId?: true
    role?: true
    token?: true
    expires?: true
    createdAt?: true
    _all?: true
  }

  export type OrganizationInvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrganizationInvitation to aggregate.
     */
    where?: OrganizationInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationInvitations to fetch.
     */
    orderBy?: OrganizationInvitationOrderByWithRelationInput | OrganizationInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrganizationInvitations
    **/
    _count?: true | OrganizationInvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationInvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationInvitationMaxAggregateInputType
  }

  export type GetOrganizationInvitationAggregateType<T extends OrganizationInvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganizationInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganizationInvitation[P]>
      : GetScalarType<T[P], AggregateOrganizationInvitation[P]>
  }




  export type OrganizationInvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationInvitationWhereInput
    orderBy?: OrganizationInvitationOrderByWithAggregationInput | OrganizationInvitationOrderByWithAggregationInput[]
    by: OrganizationInvitationScalarFieldEnum[] | OrganizationInvitationScalarFieldEnum
    having?: OrganizationInvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationInvitationCountAggregateInputType | true
    _min?: OrganizationInvitationMinAggregateInputType
    _max?: OrganizationInvitationMaxAggregateInputType
  }

  export type OrganizationInvitationGroupByOutputType = {
    id: string
    email: string
    organizationId: string
    role: $Enums.MemberRole
    token: string
    expires: Date
    createdAt: Date
    _count: OrganizationInvitationCountAggregateOutputType | null
    _min: OrganizationInvitationMinAggregateOutputType | null
    _max: OrganizationInvitationMaxAggregateOutputType | null
  }

  type GetOrganizationInvitationGroupByPayload<T extends OrganizationInvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationInvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationInvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationInvitationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationInvitationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationInvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    organizationId?: boolean
    role?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizationInvitation"]>

  export type OrganizationInvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    organizationId?: boolean
    role?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizationInvitation"]>

  export type OrganizationInvitationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    organizationId?: boolean
    role?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizationInvitation"]>

  export type OrganizationInvitationSelectScalar = {
    id?: boolean
    email?: boolean
    organizationId?: boolean
    role?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
  }

  export type OrganizationInvitationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "organizationId" | "role" | "token" | "expires" | "createdAt", ExtArgs["result"]["organizationInvitation"]>
  export type OrganizationInvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type OrganizationInvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type OrganizationInvitationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $OrganizationInvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrganizationInvitation"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      organizationId: string
      role: $Enums.MemberRole
      token: string
      expires: Date
      createdAt: Date
    }, ExtArgs["result"]["organizationInvitation"]>
    composites: {}
  }

  type OrganizationInvitationGetPayload<S extends boolean | null | undefined | OrganizationInvitationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationInvitationPayload, S>

  type OrganizationInvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationInvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationInvitationCountAggregateInputType | true
    }

  export interface OrganizationInvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrganizationInvitation'], meta: { name: 'OrganizationInvitation' } }
    /**
     * Find zero or one OrganizationInvitation that matches the filter.
     * @param {OrganizationInvitationFindUniqueArgs} args - Arguments to find a OrganizationInvitation
     * @example
     * // Get one OrganizationInvitation
     * const organizationInvitation = await prisma.organizationInvitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationInvitationFindUniqueArgs>(args: SelectSubset<T, OrganizationInvitationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationInvitationClient<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrganizationInvitation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationInvitationFindUniqueOrThrowArgs} args - Arguments to find a OrganizationInvitation
     * @example
     * // Get one OrganizationInvitation
     * const organizationInvitation = await prisma.organizationInvitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationInvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationInvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationInvitationClient<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrganizationInvitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationInvitationFindFirstArgs} args - Arguments to find a OrganizationInvitation
     * @example
     * // Get one OrganizationInvitation
     * const organizationInvitation = await prisma.organizationInvitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationInvitationFindFirstArgs>(args?: SelectSubset<T, OrganizationInvitationFindFirstArgs<ExtArgs>>): Prisma__OrganizationInvitationClient<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrganizationInvitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationInvitationFindFirstOrThrowArgs} args - Arguments to find a OrganizationInvitation
     * @example
     * // Get one OrganizationInvitation
     * const organizationInvitation = await prisma.organizationInvitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationInvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationInvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationInvitationClient<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrganizationInvitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationInvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrganizationInvitations
     * const organizationInvitations = await prisma.organizationInvitation.findMany()
     * 
     * // Get first 10 OrganizationInvitations
     * const organizationInvitations = await prisma.organizationInvitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationInvitationWithIdOnly = await prisma.organizationInvitation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationInvitationFindManyArgs>(args?: SelectSubset<T, OrganizationInvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrganizationInvitation.
     * @param {OrganizationInvitationCreateArgs} args - Arguments to create a OrganizationInvitation.
     * @example
     * // Create one OrganizationInvitation
     * const OrganizationInvitation = await prisma.organizationInvitation.create({
     *   data: {
     *     // ... data to create a OrganizationInvitation
     *   }
     * })
     * 
     */
    create<T extends OrganizationInvitationCreateArgs>(args: SelectSubset<T, OrganizationInvitationCreateArgs<ExtArgs>>): Prisma__OrganizationInvitationClient<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrganizationInvitations.
     * @param {OrganizationInvitationCreateManyArgs} args - Arguments to create many OrganizationInvitations.
     * @example
     * // Create many OrganizationInvitations
     * const organizationInvitation = await prisma.organizationInvitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationInvitationCreateManyArgs>(args?: SelectSubset<T, OrganizationInvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrganizationInvitations and returns the data saved in the database.
     * @param {OrganizationInvitationCreateManyAndReturnArgs} args - Arguments to create many OrganizationInvitations.
     * @example
     * // Create many OrganizationInvitations
     * const organizationInvitation = await prisma.organizationInvitation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrganizationInvitations and only return the `id`
     * const organizationInvitationWithIdOnly = await prisma.organizationInvitation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationInvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationInvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrganizationInvitation.
     * @param {OrganizationInvitationDeleteArgs} args - Arguments to delete one OrganizationInvitation.
     * @example
     * // Delete one OrganizationInvitation
     * const OrganizationInvitation = await prisma.organizationInvitation.delete({
     *   where: {
     *     // ... filter to delete one OrganizationInvitation
     *   }
     * })
     * 
     */
    delete<T extends OrganizationInvitationDeleteArgs>(args: SelectSubset<T, OrganizationInvitationDeleteArgs<ExtArgs>>): Prisma__OrganizationInvitationClient<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrganizationInvitation.
     * @param {OrganizationInvitationUpdateArgs} args - Arguments to update one OrganizationInvitation.
     * @example
     * // Update one OrganizationInvitation
     * const organizationInvitation = await prisma.organizationInvitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationInvitationUpdateArgs>(args: SelectSubset<T, OrganizationInvitationUpdateArgs<ExtArgs>>): Prisma__OrganizationInvitationClient<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrganizationInvitations.
     * @param {OrganizationInvitationDeleteManyArgs} args - Arguments to filter OrganizationInvitations to delete.
     * @example
     * // Delete a few OrganizationInvitations
     * const { count } = await prisma.organizationInvitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationInvitationDeleteManyArgs>(args?: SelectSubset<T, OrganizationInvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrganizationInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationInvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrganizationInvitations
     * const organizationInvitation = await prisma.organizationInvitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationInvitationUpdateManyArgs>(args: SelectSubset<T, OrganizationInvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrganizationInvitations and returns the data updated in the database.
     * @param {OrganizationInvitationUpdateManyAndReturnArgs} args - Arguments to update many OrganizationInvitations.
     * @example
     * // Update many OrganizationInvitations
     * const organizationInvitation = await prisma.organizationInvitation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrganizationInvitations and only return the `id`
     * const organizationInvitationWithIdOnly = await prisma.organizationInvitation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationInvitationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationInvitationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrganizationInvitation.
     * @param {OrganizationInvitationUpsertArgs} args - Arguments to update or create a OrganizationInvitation.
     * @example
     * // Update or create a OrganizationInvitation
     * const organizationInvitation = await prisma.organizationInvitation.upsert({
     *   create: {
     *     // ... data to create a OrganizationInvitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrganizationInvitation we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationInvitationUpsertArgs>(args: SelectSubset<T, OrganizationInvitationUpsertArgs<ExtArgs>>): Prisma__OrganizationInvitationClient<$Result.GetResult<Prisma.$OrganizationInvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrganizationInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationInvitationCountArgs} args - Arguments to filter OrganizationInvitations to count.
     * @example
     * // Count the number of OrganizationInvitations
     * const count = await prisma.organizationInvitation.count({
     *   where: {
     *     // ... the filter for the OrganizationInvitations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationInvitationCountArgs>(
      args?: Subset<T, OrganizationInvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationInvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrganizationInvitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationInvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationInvitationAggregateArgs>(args: Subset<T, OrganizationInvitationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationInvitationAggregateType<T>>

    /**
     * Group by OrganizationInvitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationInvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationInvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationInvitationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationInvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationInvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrganizationInvitation model
   */
  readonly fields: OrganizationInvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrganizationInvitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationInvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrganizationInvitation model
   */
  interface OrganizationInvitationFieldRefs {
    readonly id: FieldRef<"OrganizationInvitation", 'String'>
    readonly email: FieldRef<"OrganizationInvitation", 'String'>
    readonly organizationId: FieldRef<"OrganizationInvitation", 'String'>
    readonly role: FieldRef<"OrganizationInvitation", 'MemberRole'>
    readonly token: FieldRef<"OrganizationInvitation", 'String'>
    readonly expires: FieldRef<"OrganizationInvitation", 'DateTime'>
    readonly createdAt: FieldRef<"OrganizationInvitation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrganizationInvitation findUnique
   */
  export type OrganizationInvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationInvitation to fetch.
     */
    where: OrganizationInvitationWhereUniqueInput
  }

  /**
   * OrganizationInvitation findUniqueOrThrow
   */
  export type OrganizationInvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationInvitation to fetch.
     */
    where: OrganizationInvitationWhereUniqueInput
  }

  /**
   * OrganizationInvitation findFirst
   */
  export type OrganizationInvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationInvitation to fetch.
     */
    where?: OrganizationInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationInvitations to fetch.
     */
    orderBy?: OrganizationInvitationOrderByWithRelationInput | OrganizationInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrganizationInvitations.
     */
    cursor?: OrganizationInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrganizationInvitations.
     */
    distinct?: OrganizationInvitationScalarFieldEnum | OrganizationInvitationScalarFieldEnum[]
  }

  /**
   * OrganizationInvitation findFirstOrThrow
   */
  export type OrganizationInvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationInvitation to fetch.
     */
    where?: OrganizationInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationInvitations to fetch.
     */
    orderBy?: OrganizationInvitationOrderByWithRelationInput | OrganizationInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrganizationInvitations.
     */
    cursor?: OrganizationInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrganizationInvitations.
     */
    distinct?: OrganizationInvitationScalarFieldEnum | OrganizationInvitationScalarFieldEnum[]
  }

  /**
   * OrganizationInvitation findMany
   */
  export type OrganizationInvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationInvitations to fetch.
     */
    where?: OrganizationInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationInvitations to fetch.
     */
    orderBy?: OrganizationInvitationOrderByWithRelationInput | OrganizationInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrganizationInvitations.
     */
    cursor?: OrganizationInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationInvitations.
     */
    skip?: number
    distinct?: OrganizationInvitationScalarFieldEnum | OrganizationInvitationScalarFieldEnum[]
  }

  /**
   * OrganizationInvitation create
   */
  export type OrganizationInvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
    /**
     * The data needed to create a OrganizationInvitation.
     */
    data: XOR<OrganizationInvitationCreateInput, OrganizationInvitationUncheckedCreateInput>
  }

  /**
   * OrganizationInvitation createMany
   */
  export type OrganizationInvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrganizationInvitations.
     */
    data: OrganizationInvitationCreateManyInput | OrganizationInvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrganizationInvitation createManyAndReturn
   */
  export type OrganizationInvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * The data used to create many OrganizationInvitations.
     */
    data: OrganizationInvitationCreateManyInput | OrganizationInvitationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrganizationInvitation update
   */
  export type OrganizationInvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
    /**
     * The data needed to update a OrganizationInvitation.
     */
    data: XOR<OrganizationInvitationUpdateInput, OrganizationInvitationUncheckedUpdateInput>
    /**
     * Choose, which OrganizationInvitation to update.
     */
    where: OrganizationInvitationWhereUniqueInput
  }

  /**
   * OrganizationInvitation updateMany
   */
  export type OrganizationInvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrganizationInvitations.
     */
    data: XOR<OrganizationInvitationUpdateManyMutationInput, OrganizationInvitationUncheckedUpdateManyInput>
    /**
     * Filter which OrganizationInvitations to update
     */
    where?: OrganizationInvitationWhereInput
    /**
     * Limit how many OrganizationInvitations to update.
     */
    limit?: number
  }

  /**
   * OrganizationInvitation updateManyAndReturn
   */
  export type OrganizationInvitationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * The data used to update OrganizationInvitations.
     */
    data: XOR<OrganizationInvitationUpdateManyMutationInput, OrganizationInvitationUncheckedUpdateManyInput>
    /**
     * Filter which OrganizationInvitations to update
     */
    where?: OrganizationInvitationWhereInput
    /**
     * Limit how many OrganizationInvitations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrganizationInvitation upsert
   */
  export type OrganizationInvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
    /**
     * The filter to search for the OrganizationInvitation to update in case it exists.
     */
    where: OrganizationInvitationWhereUniqueInput
    /**
     * In case the OrganizationInvitation found by the `where` argument doesn't exist, create a new OrganizationInvitation with this data.
     */
    create: XOR<OrganizationInvitationCreateInput, OrganizationInvitationUncheckedCreateInput>
    /**
     * In case the OrganizationInvitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationInvitationUpdateInput, OrganizationInvitationUncheckedUpdateInput>
  }

  /**
   * OrganizationInvitation delete
   */
  export type OrganizationInvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
    /**
     * Filter which OrganizationInvitation to delete.
     */
    where: OrganizationInvitationWhereUniqueInput
  }

  /**
   * OrganizationInvitation deleteMany
   */
  export type OrganizationInvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrganizationInvitations to delete
     */
    where?: OrganizationInvitationWhereInput
    /**
     * Limit how many OrganizationInvitations to delete.
     */
    limit?: number
  }

  /**
   * OrganizationInvitation without action
   */
  export type OrganizationInvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationInvitation
     */
    select?: OrganizationInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrganizationInvitation
     */
    omit?: OrganizationInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInvitationInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    organizationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    organizationId: string
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    workspaces?: boolean | Project$workspacesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "organizationId" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    workspaces?: boolean | Project$workspacesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      workspaces: Prisma.$WorkspacePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      organizationId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tasks<T extends Project$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Project$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workspaces<T extends Project$workspacesArgs<ExtArgs> = {}>(args?: Subset<T, Project$workspacesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly organizationId: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project updateManyAndReturn
   */
  export type ProjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.tasks
   */
  export type Project$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Project.workspaces
   */
  export type Project$workspacesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    where?: WorkspaceWhereInput
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    cursor?: WorkspaceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.TaskStatus | null
    priority: $Enums.TaskPriority | null
    projectId: string | null
    assigneeId: string | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.TaskStatus | null
    priority: $Enums.TaskPriority | null
    projectId: string | null
    assigneeId: string | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    projectId: number
    assigneeId: number
    dueDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    projectId?: true
    assigneeId?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    projectId?: true
    assigneeId?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    projectId?: true
    assigneeId?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    title: string
    description: string | null
    status: $Enums.TaskStatus
    priority: $Enums.TaskPriority
    projectId: string
    assigneeId: string | null
    dueDate: Date | null
    createdAt: Date
    updatedAt: Date
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    projectId?: boolean
    assigneeId?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    projectId?: boolean
    assigneeId?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    projectId?: boolean
    assigneeId?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    projectId?: boolean
    assigneeId?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "status" | "priority" | "projectId" | "assigneeId" | "dueDate" | "createdAt" | "updatedAt", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      assignee: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      status: $Enums.TaskStatus
      priority: $Enums.TaskPriority
      projectId: string
      assigneeId: string | null
      dueDate: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignee<T extends Task$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Task$assigneeArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'TaskStatus'>
    readonly priority: FieldRef<"Task", 'TaskPriority'>
    readonly projectId: FieldRef<"Task", 'String'>
    readonly assigneeId: FieldRef<"Task", 'String'>
    readonly dueDate: FieldRef<"Task", 'DateTime'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.assignee
   */
  export type Task$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Workspace
   */

  export type AggregateWorkspace = {
    _count: WorkspaceCountAggregateOutputType | null
    _min: WorkspaceMinAggregateOutputType | null
    _max: WorkspaceMaxAggregateOutputType | null
  }

  export type WorkspaceMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    projectId: string | null
    status: $Enums.WorkspaceStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    projectId: string | null
    status: $Enums.WorkspaceStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceCountAggregateOutputType = {
    id: number
    name: number
    description: number
    projectId: number
    status: number
    config: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkspaceMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    projectId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    projectId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    projectId?: true
    status?: true
    config?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkspaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workspace to aggregate.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workspaces
    **/
    _count?: true | WorkspaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceMaxAggregateInputType
  }

  export type GetWorkspaceAggregateType<T extends WorkspaceAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspace[P]>
      : GetScalarType<T[P], AggregateWorkspace[P]>
  }




  export type WorkspaceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceWhereInput
    orderBy?: WorkspaceOrderByWithAggregationInput | WorkspaceOrderByWithAggregationInput[]
    by: WorkspaceScalarFieldEnum[] | WorkspaceScalarFieldEnum
    having?: WorkspaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceCountAggregateInputType | true
    _min?: WorkspaceMinAggregateInputType
    _max?: WorkspaceMaxAggregateInputType
  }

  export type WorkspaceGroupByOutputType = {
    id: string
    name: string
    description: string | null
    projectId: string
    status: $Enums.WorkspaceStatus
    config: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: WorkspaceCountAggregateOutputType | null
    _min: WorkspaceMinAggregateOutputType | null
    _max: WorkspaceMaxAggregateOutputType | null
  }

  type GetWorkspaceGroupByPayload<T extends WorkspaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    projectId?: boolean
    status?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    instances?: boolean | Workspace$instancesArgs<ExtArgs>
    persistence?: boolean | Workspace$persistenceArgs<ExtArgs>
    files?: boolean | Workspace$filesArgs<ExtArgs>
    states?: boolean | Workspace$statesArgs<ExtArgs>
    syncs?: boolean | Workspace$syncsArgs<ExtArgs>
    _count?: boolean | WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    projectId?: boolean
    status?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    projectId?: boolean
    status?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    projectId?: boolean
    status?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkspaceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "projectId" | "status" | "config" | "createdAt" | "updatedAt", ExtArgs["result"]["workspace"]>
  export type WorkspaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    instances?: boolean | Workspace$instancesArgs<ExtArgs>
    persistence?: boolean | Workspace$persistenceArgs<ExtArgs>
    files?: boolean | Workspace$filesArgs<ExtArgs>
    states?: boolean | Workspace$statesArgs<ExtArgs>
    syncs?: boolean | Workspace$syncsArgs<ExtArgs>
    _count?: boolean | WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkspaceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type WorkspaceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $WorkspacePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workspace"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      instances: Prisma.$WebVMInstancePayload<ExtArgs>[]
      persistence: Prisma.$WorkspacePersistencePayload<ExtArgs> | null
      files: Prisma.$WorkspaceFilePayload<ExtArgs>[]
      states: Prisma.$WorkspaceStatePayload<ExtArgs>[]
      syncs: Prisma.$WorkspaceSyncPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      projectId: string
      status: $Enums.WorkspaceStatus
      config: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workspace"]>
    composites: {}
  }

  type WorkspaceGetPayload<S extends boolean | null | undefined | WorkspaceDefaultArgs> = $Result.GetResult<Prisma.$WorkspacePayload, S>

  type WorkspaceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspaceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspaceCountAggregateInputType | true
    }

  export interface WorkspaceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workspace'], meta: { name: 'Workspace' } }
    /**
     * Find zero or one Workspace that matches the filter.
     * @param {WorkspaceFindUniqueArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceFindUniqueArgs>(args: SelectSubset<T, WorkspaceFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Workspace that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceFindUniqueOrThrowArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workspace that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindFirstArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceFindFirstArgs>(args?: SelectSubset<T, WorkspaceFindFirstArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workspace that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindFirstOrThrowArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Workspaces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workspaces
     * const workspaces = await prisma.workspace.findMany()
     * 
     * // Get first 10 Workspaces
     * const workspaces = await prisma.workspace.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceWithIdOnly = await prisma.workspace.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceFindManyArgs>(args?: SelectSubset<T, WorkspaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Workspace.
     * @param {WorkspaceCreateArgs} args - Arguments to create a Workspace.
     * @example
     * // Create one Workspace
     * const Workspace = await prisma.workspace.create({
     *   data: {
     *     // ... data to create a Workspace
     *   }
     * })
     * 
     */
    create<T extends WorkspaceCreateArgs>(args: SelectSubset<T, WorkspaceCreateArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Workspaces.
     * @param {WorkspaceCreateManyArgs} args - Arguments to create many Workspaces.
     * @example
     * // Create many Workspaces
     * const workspace = await prisma.workspace.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceCreateManyArgs>(args?: SelectSubset<T, WorkspaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workspaces and returns the data saved in the database.
     * @param {WorkspaceCreateManyAndReturnArgs} args - Arguments to create many Workspaces.
     * @example
     * // Create many Workspaces
     * const workspace = await prisma.workspace.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workspaces and only return the `id`
     * const workspaceWithIdOnly = await prisma.workspace.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Workspace.
     * @param {WorkspaceDeleteArgs} args - Arguments to delete one Workspace.
     * @example
     * // Delete one Workspace
     * const Workspace = await prisma.workspace.delete({
     *   where: {
     *     // ... filter to delete one Workspace
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceDeleteArgs>(args: SelectSubset<T, WorkspaceDeleteArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Workspace.
     * @param {WorkspaceUpdateArgs} args - Arguments to update one Workspace.
     * @example
     * // Update one Workspace
     * const workspace = await prisma.workspace.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceUpdateArgs>(args: SelectSubset<T, WorkspaceUpdateArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Workspaces.
     * @param {WorkspaceDeleteManyArgs} args - Arguments to filter Workspaces to delete.
     * @example
     * // Delete a few Workspaces
     * const { count } = await prisma.workspace.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceDeleteManyArgs>(args?: SelectSubset<T, WorkspaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workspaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workspaces
     * const workspace = await prisma.workspace.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceUpdateManyArgs>(args: SelectSubset<T, WorkspaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workspaces and returns the data updated in the database.
     * @param {WorkspaceUpdateManyAndReturnArgs} args - Arguments to update many Workspaces.
     * @example
     * // Update many Workspaces
     * const workspace = await prisma.workspace.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workspaces and only return the `id`
     * const workspaceWithIdOnly = await prisma.workspace.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspaceUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspaceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Workspace.
     * @param {WorkspaceUpsertArgs} args - Arguments to update or create a Workspace.
     * @example
     * // Update or create a Workspace
     * const workspace = await prisma.workspace.upsert({
     *   create: {
     *     // ... data to create a Workspace
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workspace we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceUpsertArgs>(args: SelectSubset<T, WorkspaceUpsertArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Workspaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceCountArgs} args - Arguments to filter Workspaces to count.
     * @example
     * // Count the number of Workspaces
     * const count = await prisma.workspace.count({
     *   where: {
     *     // ... the filter for the Workspaces we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceCountArgs>(
      args?: Subset<T, WorkspaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workspace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceAggregateArgs>(args: Subset<T, WorkspaceAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceAggregateType<T>>

    /**
     * Group by Workspace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workspace model
   */
  readonly fields: WorkspaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workspace.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instances<T extends Workspace$instancesArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$instancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    persistence<T extends Workspace$persistenceArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$persistenceArgs<ExtArgs>>): Prisma__WorkspacePersistenceClient<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    files<T extends Workspace$filesArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    states<T extends Workspace$statesArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$statesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    syncs<T extends Workspace$syncsArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$syncsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Workspace model
   */
  interface WorkspaceFieldRefs {
    readonly id: FieldRef<"Workspace", 'String'>
    readonly name: FieldRef<"Workspace", 'String'>
    readonly description: FieldRef<"Workspace", 'String'>
    readonly projectId: FieldRef<"Workspace", 'String'>
    readonly status: FieldRef<"Workspace", 'WorkspaceStatus'>
    readonly config: FieldRef<"Workspace", 'Json'>
    readonly createdAt: FieldRef<"Workspace", 'DateTime'>
    readonly updatedAt: FieldRef<"Workspace", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Workspace findUnique
   */
  export type WorkspaceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace findUniqueOrThrow
   */
  export type WorkspaceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace findFirst
   */
  export type WorkspaceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workspaces.
     */
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace findFirstOrThrow
   */
  export type WorkspaceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workspaces.
     */
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace findMany
   */
  export type WorkspaceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspaces to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace create
   */
  export type WorkspaceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The data needed to create a Workspace.
     */
    data: XOR<WorkspaceCreateInput, WorkspaceUncheckedCreateInput>
  }

  /**
   * Workspace createMany
   */
  export type WorkspaceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workspaces.
     */
    data: WorkspaceCreateManyInput | WorkspaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workspace createManyAndReturn
   */
  export type WorkspaceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * The data used to create many Workspaces.
     */
    data: WorkspaceCreateManyInput | WorkspaceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workspace update
   */
  export type WorkspaceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The data needed to update a Workspace.
     */
    data: XOR<WorkspaceUpdateInput, WorkspaceUncheckedUpdateInput>
    /**
     * Choose, which Workspace to update.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace updateMany
   */
  export type WorkspaceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workspaces.
     */
    data: XOR<WorkspaceUpdateManyMutationInput, WorkspaceUncheckedUpdateManyInput>
    /**
     * Filter which Workspaces to update
     */
    where?: WorkspaceWhereInput
    /**
     * Limit how many Workspaces to update.
     */
    limit?: number
  }

  /**
   * Workspace updateManyAndReturn
   */
  export type WorkspaceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * The data used to update Workspaces.
     */
    data: XOR<WorkspaceUpdateManyMutationInput, WorkspaceUncheckedUpdateManyInput>
    /**
     * Filter which Workspaces to update
     */
    where?: WorkspaceWhereInput
    /**
     * Limit how many Workspaces to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workspace upsert
   */
  export type WorkspaceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The filter to search for the Workspace to update in case it exists.
     */
    where: WorkspaceWhereUniqueInput
    /**
     * In case the Workspace found by the `where` argument doesn't exist, create a new Workspace with this data.
     */
    create: XOR<WorkspaceCreateInput, WorkspaceUncheckedCreateInput>
    /**
     * In case the Workspace was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceUpdateInput, WorkspaceUncheckedUpdateInput>
  }

  /**
   * Workspace delete
   */
  export type WorkspaceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter which Workspace to delete.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace deleteMany
   */
  export type WorkspaceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workspaces to delete
     */
    where?: WorkspaceWhereInput
    /**
     * Limit how many Workspaces to delete.
     */
    limit?: number
  }

  /**
   * Workspace.instances
   */
  export type Workspace$instancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    where?: WebVMInstanceWhereInput
    orderBy?: WebVMInstanceOrderByWithRelationInput | WebVMInstanceOrderByWithRelationInput[]
    cursor?: WebVMInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebVMInstanceScalarFieldEnum | WebVMInstanceScalarFieldEnum[]
  }

  /**
   * Workspace.persistence
   */
  export type Workspace$persistenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
    where?: WorkspacePersistenceWhereInput
  }

  /**
   * Workspace.files
   */
  export type Workspace$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    where?: WorkspaceFileWhereInput
    orderBy?: WorkspaceFileOrderByWithRelationInput | WorkspaceFileOrderByWithRelationInput[]
    cursor?: WorkspaceFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceFileScalarFieldEnum | WorkspaceFileScalarFieldEnum[]
  }

  /**
   * Workspace.states
   */
  export type Workspace$statesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
    where?: WorkspaceStateWhereInput
    orderBy?: WorkspaceStateOrderByWithRelationInput | WorkspaceStateOrderByWithRelationInput[]
    cursor?: WorkspaceStateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceStateScalarFieldEnum | WorkspaceStateScalarFieldEnum[]
  }

  /**
   * Workspace.syncs
   */
  export type Workspace$syncsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
    where?: WorkspaceSyncWhereInput
    orderBy?: WorkspaceSyncOrderByWithRelationInput | WorkspaceSyncOrderByWithRelationInput[]
    cursor?: WorkspaceSyncWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceSyncScalarFieldEnum | WorkspaceSyncScalarFieldEnum[]
  }

  /**
   * Workspace without action
   */
  export type WorkspaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
  }


  /**
   * Model WebVMInstance
   */

  export type AggregateWebVMInstance = {
    _count: WebVMInstanceCountAggregateOutputType | null
    _min: WebVMInstanceMinAggregateOutputType | null
    _max: WebVMInstanceMaxAggregateOutputType | null
  }

  export type WebVMInstanceMinAggregateOutputType = {
    id: string | null
    name: string | null
    workspaceId: string | null
    status: $Enums.WebVMStatus | null
    imageUrl: string | null
    connectionUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    startedAt: Date | null
    stoppedAt: Date | null
    templateId: string | null
  }

  export type WebVMInstanceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    workspaceId: string | null
    status: $Enums.WebVMStatus | null
    imageUrl: string | null
    connectionUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    startedAt: Date | null
    stoppedAt: Date | null
    templateId: string | null
  }

  export type WebVMInstanceCountAggregateOutputType = {
    id: number
    name: number
    workspaceId: number
    status: number
    imageUrl: number
    config: number
    resources: number
    networkConfig: number
    connectionUrl: number
    createdAt: number
    updatedAt: number
    startedAt: number
    stoppedAt: number
    templateId: number
    _all: number
  }


  export type WebVMInstanceMinAggregateInputType = {
    id?: true
    name?: true
    workspaceId?: true
    status?: true
    imageUrl?: true
    connectionUrl?: true
    createdAt?: true
    updatedAt?: true
    startedAt?: true
    stoppedAt?: true
    templateId?: true
  }

  export type WebVMInstanceMaxAggregateInputType = {
    id?: true
    name?: true
    workspaceId?: true
    status?: true
    imageUrl?: true
    connectionUrl?: true
    createdAt?: true
    updatedAt?: true
    startedAt?: true
    stoppedAt?: true
    templateId?: true
  }

  export type WebVMInstanceCountAggregateInputType = {
    id?: true
    name?: true
    workspaceId?: true
    status?: true
    imageUrl?: true
    config?: true
    resources?: true
    networkConfig?: true
    connectionUrl?: true
    createdAt?: true
    updatedAt?: true
    startedAt?: true
    stoppedAt?: true
    templateId?: true
    _all?: true
  }

  export type WebVMInstanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebVMInstance to aggregate.
     */
    where?: WebVMInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMInstances to fetch.
     */
    orderBy?: WebVMInstanceOrderByWithRelationInput | WebVMInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebVMInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebVMInstances
    **/
    _count?: true | WebVMInstanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebVMInstanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebVMInstanceMaxAggregateInputType
  }

  export type GetWebVMInstanceAggregateType<T extends WebVMInstanceAggregateArgs> = {
        [P in keyof T & keyof AggregateWebVMInstance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebVMInstance[P]>
      : GetScalarType<T[P], AggregateWebVMInstance[P]>
  }




  export type WebVMInstanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebVMInstanceWhereInput
    orderBy?: WebVMInstanceOrderByWithAggregationInput | WebVMInstanceOrderByWithAggregationInput[]
    by: WebVMInstanceScalarFieldEnum[] | WebVMInstanceScalarFieldEnum
    having?: WebVMInstanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebVMInstanceCountAggregateInputType | true
    _min?: WebVMInstanceMinAggregateInputType
    _max?: WebVMInstanceMaxAggregateInputType
  }

  export type WebVMInstanceGroupByOutputType = {
    id: string
    name: string
    workspaceId: string
    status: $Enums.WebVMStatus
    imageUrl: string | null
    config: JsonValue | null
    resources: JsonValue | null
    networkConfig: JsonValue | null
    connectionUrl: string | null
    createdAt: Date
    updatedAt: Date
    startedAt: Date | null
    stoppedAt: Date | null
    templateId: string | null
    _count: WebVMInstanceCountAggregateOutputType | null
    _min: WebVMInstanceMinAggregateOutputType | null
    _max: WebVMInstanceMaxAggregateOutputType | null
  }

  type GetWebVMInstanceGroupByPayload<T extends WebVMInstanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebVMInstanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebVMInstanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebVMInstanceGroupByOutputType[P]>
            : GetScalarType<T[P], WebVMInstanceGroupByOutputType[P]>
        }
      >
    >


  export type WebVMInstanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    workspaceId?: boolean
    status?: boolean
    imageUrl?: boolean
    config?: boolean
    resources?: boolean
    networkConfig?: boolean
    connectionUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startedAt?: boolean
    stoppedAt?: boolean
    templateId?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    metrics?: boolean | WebVMInstance$metricsArgs<ExtArgs>
    snapshots?: boolean | WebVMInstance$snapshotsArgs<ExtArgs>
    template?: boolean | WebVMInstance$templateArgs<ExtArgs>
    _count?: boolean | WebVMInstanceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webVMInstance"]>

  export type WebVMInstanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    workspaceId?: boolean
    status?: boolean
    imageUrl?: boolean
    config?: boolean
    resources?: boolean
    networkConfig?: boolean
    connectionUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startedAt?: boolean
    stoppedAt?: boolean
    templateId?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    template?: boolean | WebVMInstance$templateArgs<ExtArgs>
  }, ExtArgs["result"]["webVMInstance"]>

  export type WebVMInstanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    workspaceId?: boolean
    status?: boolean
    imageUrl?: boolean
    config?: boolean
    resources?: boolean
    networkConfig?: boolean
    connectionUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startedAt?: boolean
    stoppedAt?: boolean
    templateId?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    template?: boolean | WebVMInstance$templateArgs<ExtArgs>
  }, ExtArgs["result"]["webVMInstance"]>

  export type WebVMInstanceSelectScalar = {
    id?: boolean
    name?: boolean
    workspaceId?: boolean
    status?: boolean
    imageUrl?: boolean
    config?: boolean
    resources?: boolean
    networkConfig?: boolean
    connectionUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startedAt?: boolean
    stoppedAt?: boolean
    templateId?: boolean
  }

  export type WebVMInstanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "workspaceId" | "status" | "imageUrl" | "config" | "resources" | "networkConfig" | "connectionUrl" | "createdAt" | "updatedAt" | "startedAt" | "stoppedAt" | "templateId", ExtArgs["result"]["webVMInstance"]>
  export type WebVMInstanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    metrics?: boolean | WebVMInstance$metricsArgs<ExtArgs>
    snapshots?: boolean | WebVMInstance$snapshotsArgs<ExtArgs>
    template?: boolean | WebVMInstance$templateArgs<ExtArgs>
    _count?: boolean | WebVMInstanceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WebVMInstanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    template?: boolean | WebVMInstance$templateArgs<ExtArgs>
  }
  export type WebVMInstanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    template?: boolean | WebVMInstance$templateArgs<ExtArgs>
  }

  export type $WebVMInstancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebVMInstance"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      metrics: Prisma.$WebVMMetricPayload<ExtArgs>[]
      snapshots: Prisma.$WebVMSnapshotPayload<ExtArgs>[]
      template: Prisma.$WebVMTemplatePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      workspaceId: string
      status: $Enums.WebVMStatus
      imageUrl: string | null
      config: Prisma.JsonValue | null
      resources: Prisma.JsonValue | null
      networkConfig: Prisma.JsonValue | null
      connectionUrl: string | null
      createdAt: Date
      updatedAt: Date
      startedAt: Date | null
      stoppedAt: Date | null
      templateId: string | null
    }, ExtArgs["result"]["webVMInstance"]>
    composites: {}
  }

  type WebVMInstanceGetPayload<S extends boolean | null | undefined | WebVMInstanceDefaultArgs> = $Result.GetResult<Prisma.$WebVMInstancePayload, S>

  type WebVMInstanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebVMInstanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebVMInstanceCountAggregateInputType | true
    }

  export interface WebVMInstanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebVMInstance'], meta: { name: 'WebVMInstance' } }
    /**
     * Find zero or one WebVMInstance that matches the filter.
     * @param {WebVMInstanceFindUniqueArgs} args - Arguments to find a WebVMInstance
     * @example
     * // Get one WebVMInstance
     * const webVMInstance = await prisma.webVMInstance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebVMInstanceFindUniqueArgs>(args: SelectSubset<T, WebVMInstanceFindUniqueArgs<ExtArgs>>): Prisma__WebVMInstanceClient<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WebVMInstance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebVMInstanceFindUniqueOrThrowArgs} args - Arguments to find a WebVMInstance
     * @example
     * // Get one WebVMInstance
     * const webVMInstance = await prisma.webVMInstance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebVMInstanceFindUniqueOrThrowArgs>(args: SelectSubset<T, WebVMInstanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebVMInstanceClient<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebVMInstance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMInstanceFindFirstArgs} args - Arguments to find a WebVMInstance
     * @example
     * // Get one WebVMInstance
     * const webVMInstance = await prisma.webVMInstance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebVMInstanceFindFirstArgs>(args?: SelectSubset<T, WebVMInstanceFindFirstArgs<ExtArgs>>): Prisma__WebVMInstanceClient<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebVMInstance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMInstanceFindFirstOrThrowArgs} args - Arguments to find a WebVMInstance
     * @example
     * // Get one WebVMInstance
     * const webVMInstance = await prisma.webVMInstance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebVMInstanceFindFirstOrThrowArgs>(args?: SelectSubset<T, WebVMInstanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebVMInstanceClient<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WebVMInstances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMInstanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebVMInstances
     * const webVMInstances = await prisma.webVMInstance.findMany()
     * 
     * // Get first 10 WebVMInstances
     * const webVMInstances = await prisma.webVMInstance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webVMInstanceWithIdOnly = await prisma.webVMInstance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebVMInstanceFindManyArgs>(args?: SelectSubset<T, WebVMInstanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WebVMInstance.
     * @param {WebVMInstanceCreateArgs} args - Arguments to create a WebVMInstance.
     * @example
     * // Create one WebVMInstance
     * const WebVMInstance = await prisma.webVMInstance.create({
     *   data: {
     *     // ... data to create a WebVMInstance
     *   }
     * })
     * 
     */
    create<T extends WebVMInstanceCreateArgs>(args: SelectSubset<T, WebVMInstanceCreateArgs<ExtArgs>>): Prisma__WebVMInstanceClient<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WebVMInstances.
     * @param {WebVMInstanceCreateManyArgs} args - Arguments to create many WebVMInstances.
     * @example
     * // Create many WebVMInstances
     * const webVMInstance = await prisma.webVMInstance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebVMInstanceCreateManyArgs>(args?: SelectSubset<T, WebVMInstanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebVMInstances and returns the data saved in the database.
     * @param {WebVMInstanceCreateManyAndReturnArgs} args - Arguments to create many WebVMInstances.
     * @example
     * // Create many WebVMInstances
     * const webVMInstance = await prisma.webVMInstance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebVMInstances and only return the `id`
     * const webVMInstanceWithIdOnly = await prisma.webVMInstance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebVMInstanceCreateManyAndReturnArgs>(args?: SelectSubset<T, WebVMInstanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WebVMInstance.
     * @param {WebVMInstanceDeleteArgs} args - Arguments to delete one WebVMInstance.
     * @example
     * // Delete one WebVMInstance
     * const WebVMInstance = await prisma.webVMInstance.delete({
     *   where: {
     *     // ... filter to delete one WebVMInstance
     *   }
     * })
     * 
     */
    delete<T extends WebVMInstanceDeleteArgs>(args: SelectSubset<T, WebVMInstanceDeleteArgs<ExtArgs>>): Prisma__WebVMInstanceClient<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WebVMInstance.
     * @param {WebVMInstanceUpdateArgs} args - Arguments to update one WebVMInstance.
     * @example
     * // Update one WebVMInstance
     * const webVMInstance = await prisma.webVMInstance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebVMInstanceUpdateArgs>(args: SelectSubset<T, WebVMInstanceUpdateArgs<ExtArgs>>): Prisma__WebVMInstanceClient<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WebVMInstances.
     * @param {WebVMInstanceDeleteManyArgs} args - Arguments to filter WebVMInstances to delete.
     * @example
     * // Delete a few WebVMInstances
     * const { count } = await prisma.webVMInstance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebVMInstanceDeleteManyArgs>(args?: SelectSubset<T, WebVMInstanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebVMInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMInstanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebVMInstances
     * const webVMInstance = await prisma.webVMInstance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebVMInstanceUpdateManyArgs>(args: SelectSubset<T, WebVMInstanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebVMInstances and returns the data updated in the database.
     * @param {WebVMInstanceUpdateManyAndReturnArgs} args - Arguments to update many WebVMInstances.
     * @example
     * // Update many WebVMInstances
     * const webVMInstance = await prisma.webVMInstance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WebVMInstances and only return the `id`
     * const webVMInstanceWithIdOnly = await prisma.webVMInstance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WebVMInstanceUpdateManyAndReturnArgs>(args: SelectSubset<T, WebVMInstanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WebVMInstance.
     * @param {WebVMInstanceUpsertArgs} args - Arguments to update or create a WebVMInstance.
     * @example
     * // Update or create a WebVMInstance
     * const webVMInstance = await prisma.webVMInstance.upsert({
     *   create: {
     *     // ... data to create a WebVMInstance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebVMInstance we want to update
     *   }
     * })
     */
    upsert<T extends WebVMInstanceUpsertArgs>(args: SelectSubset<T, WebVMInstanceUpsertArgs<ExtArgs>>): Prisma__WebVMInstanceClient<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WebVMInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMInstanceCountArgs} args - Arguments to filter WebVMInstances to count.
     * @example
     * // Count the number of WebVMInstances
     * const count = await prisma.webVMInstance.count({
     *   where: {
     *     // ... the filter for the WebVMInstances we want to count
     *   }
     * })
    **/
    count<T extends WebVMInstanceCountArgs>(
      args?: Subset<T, WebVMInstanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebVMInstanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebVMInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMInstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebVMInstanceAggregateArgs>(args: Subset<T, WebVMInstanceAggregateArgs>): Prisma.PrismaPromise<GetWebVMInstanceAggregateType<T>>

    /**
     * Group by WebVMInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMInstanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebVMInstanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebVMInstanceGroupByArgs['orderBy'] }
        : { orderBy?: WebVMInstanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebVMInstanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebVMInstanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebVMInstance model
   */
  readonly fields: WebVMInstanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebVMInstance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebVMInstanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    metrics<T extends WebVMInstance$metricsArgs<ExtArgs> = {}>(args?: Subset<T, WebVMInstance$metricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    snapshots<T extends WebVMInstance$snapshotsArgs<ExtArgs> = {}>(args?: Subset<T, WebVMInstance$snapshotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    template<T extends WebVMInstance$templateArgs<ExtArgs> = {}>(args?: Subset<T, WebVMInstance$templateArgs<ExtArgs>>): Prisma__WebVMTemplateClient<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebVMInstance model
   */
  interface WebVMInstanceFieldRefs {
    readonly id: FieldRef<"WebVMInstance", 'String'>
    readonly name: FieldRef<"WebVMInstance", 'String'>
    readonly workspaceId: FieldRef<"WebVMInstance", 'String'>
    readonly status: FieldRef<"WebVMInstance", 'WebVMStatus'>
    readonly imageUrl: FieldRef<"WebVMInstance", 'String'>
    readonly config: FieldRef<"WebVMInstance", 'Json'>
    readonly resources: FieldRef<"WebVMInstance", 'Json'>
    readonly networkConfig: FieldRef<"WebVMInstance", 'Json'>
    readonly connectionUrl: FieldRef<"WebVMInstance", 'String'>
    readonly createdAt: FieldRef<"WebVMInstance", 'DateTime'>
    readonly updatedAt: FieldRef<"WebVMInstance", 'DateTime'>
    readonly startedAt: FieldRef<"WebVMInstance", 'DateTime'>
    readonly stoppedAt: FieldRef<"WebVMInstance", 'DateTime'>
    readonly templateId: FieldRef<"WebVMInstance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WebVMInstance findUnique
   */
  export type WebVMInstanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    /**
     * Filter, which WebVMInstance to fetch.
     */
    where: WebVMInstanceWhereUniqueInput
  }

  /**
   * WebVMInstance findUniqueOrThrow
   */
  export type WebVMInstanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    /**
     * Filter, which WebVMInstance to fetch.
     */
    where: WebVMInstanceWhereUniqueInput
  }

  /**
   * WebVMInstance findFirst
   */
  export type WebVMInstanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    /**
     * Filter, which WebVMInstance to fetch.
     */
    where?: WebVMInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMInstances to fetch.
     */
    orderBy?: WebVMInstanceOrderByWithRelationInput | WebVMInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebVMInstances.
     */
    cursor?: WebVMInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebVMInstances.
     */
    distinct?: WebVMInstanceScalarFieldEnum | WebVMInstanceScalarFieldEnum[]
  }

  /**
   * WebVMInstance findFirstOrThrow
   */
  export type WebVMInstanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    /**
     * Filter, which WebVMInstance to fetch.
     */
    where?: WebVMInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMInstances to fetch.
     */
    orderBy?: WebVMInstanceOrderByWithRelationInput | WebVMInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebVMInstances.
     */
    cursor?: WebVMInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebVMInstances.
     */
    distinct?: WebVMInstanceScalarFieldEnum | WebVMInstanceScalarFieldEnum[]
  }

  /**
   * WebVMInstance findMany
   */
  export type WebVMInstanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    /**
     * Filter, which WebVMInstances to fetch.
     */
    where?: WebVMInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMInstances to fetch.
     */
    orderBy?: WebVMInstanceOrderByWithRelationInput | WebVMInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebVMInstances.
     */
    cursor?: WebVMInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMInstances.
     */
    skip?: number
    distinct?: WebVMInstanceScalarFieldEnum | WebVMInstanceScalarFieldEnum[]
  }

  /**
   * WebVMInstance create
   */
  export type WebVMInstanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    /**
     * The data needed to create a WebVMInstance.
     */
    data: XOR<WebVMInstanceCreateInput, WebVMInstanceUncheckedCreateInput>
  }

  /**
   * WebVMInstance createMany
   */
  export type WebVMInstanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebVMInstances.
     */
    data: WebVMInstanceCreateManyInput | WebVMInstanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebVMInstance createManyAndReturn
   */
  export type WebVMInstanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * The data used to create many WebVMInstances.
     */
    data: WebVMInstanceCreateManyInput | WebVMInstanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebVMInstance update
   */
  export type WebVMInstanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    /**
     * The data needed to update a WebVMInstance.
     */
    data: XOR<WebVMInstanceUpdateInput, WebVMInstanceUncheckedUpdateInput>
    /**
     * Choose, which WebVMInstance to update.
     */
    where: WebVMInstanceWhereUniqueInput
  }

  /**
   * WebVMInstance updateMany
   */
  export type WebVMInstanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebVMInstances.
     */
    data: XOR<WebVMInstanceUpdateManyMutationInput, WebVMInstanceUncheckedUpdateManyInput>
    /**
     * Filter which WebVMInstances to update
     */
    where?: WebVMInstanceWhereInput
    /**
     * Limit how many WebVMInstances to update.
     */
    limit?: number
  }

  /**
   * WebVMInstance updateManyAndReturn
   */
  export type WebVMInstanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * The data used to update WebVMInstances.
     */
    data: XOR<WebVMInstanceUpdateManyMutationInput, WebVMInstanceUncheckedUpdateManyInput>
    /**
     * Filter which WebVMInstances to update
     */
    where?: WebVMInstanceWhereInput
    /**
     * Limit how many WebVMInstances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebVMInstance upsert
   */
  export type WebVMInstanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    /**
     * The filter to search for the WebVMInstance to update in case it exists.
     */
    where: WebVMInstanceWhereUniqueInput
    /**
     * In case the WebVMInstance found by the `where` argument doesn't exist, create a new WebVMInstance with this data.
     */
    create: XOR<WebVMInstanceCreateInput, WebVMInstanceUncheckedCreateInput>
    /**
     * In case the WebVMInstance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebVMInstanceUpdateInput, WebVMInstanceUncheckedUpdateInput>
  }

  /**
   * WebVMInstance delete
   */
  export type WebVMInstanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    /**
     * Filter which WebVMInstance to delete.
     */
    where: WebVMInstanceWhereUniqueInput
  }

  /**
   * WebVMInstance deleteMany
   */
  export type WebVMInstanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebVMInstances to delete
     */
    where?: WebVMInstanceWhereInput
    /**
     * Limit how many WebVMInstances to delete.
     */
    limit?: number
  }

  /**
   * WebVMInstance.metrics
   */
  export type WebVMInstance$metricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
    where?: WebVMMetricWhereInput
    orderBy?: WebVMMetricOrderByWithRelationInput | WebVMMetricOrderByWithRelationInput[]
    cursor?: WebVMMetricWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebVMMetricScalarFieldEnum | WebVMMetricScalarFieldEnum[]
  }

  /**
   * WebVMInstance.snapshots
   */
  export type WebVMInstance$snapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
    where?: WebVMSnapshotWhereInput
    orderBy?: WebVMSnapshotOrderByWithRelationInput | WebVMSnapshotOrderByWithRelationInput[]
    cursor?: WebVMSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebVMSnapshotScalarFieldEnum | WebVMSnapshotScalarFieldEnum[]
  }

  /**
   * WebVMInstance.template
   */
  export type WebVMInstance$templateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
    where?: WebVMTemplateWhereInput
  }

  /**
   * WebVMInstance without action
   */
  export type WebVMInstanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
  }


  /**
   * Model WebVMMetric
   */

  export type AggregateWebVMMetric = {
    _count: WebVMMetricCountAggregateOutputType | null
    _avg: WebVMMetricAvgAggregateOutputType | null
    _sum: WebVMMetricSumAggregateOutputType | null
    _min: WebVMMetricMinAggregateOutputType | null
    _max: WebVMMetricMaxAggregateOutputType | null
  }

  export type WebVMMetricAvgAggregateOutputType = {
    value: number | null
  }

  export type WebVMMetricSumAggregateOutputType = {
    value: number | null
  }

  export type WebVMMetricMinAggregateOutputType = {
    id: string | null
    instanceId: string | null
    metricType: $Enums.MetricType | null
    value: number | null
    unit: string | null
    timestamp: Date | null
  }

  export type WebVMMetricMaxAggregateOutputType = {
    id: string | null
    instanceId: string | null
    metricType: $Enums.MetricType | null
    value: number | null
    unit: string | null
    timestamp: Date | null
  }

  export type WebVMMetricCountAggregateOutputType = {
    id: number
    instanceId: number
    metricType: number
    value: number
    unit: number
    timestamp: number
    _all: number
  }


  export type WebVMMetricAvgAggregateInputType = {
    value?: true
  }

  export type WebVMMetricSumAggregateInputType = {
    value?: true
  }

  export type WebVMMetricMinAggregateInputType = {
    id?: true
    instanceId?: true
    metricType?: true
    value?: true
    unit?: true
    timestamp?: true
  }

  export type WebVMMetricMaxAggregateInputType = {
    id?: true
    instanceId?: true
    metricType?: true
    value?: true
    unit?: true
    timestamp?: true
  }

  export type WebVMMetricCountAggregateInputType = {
    id?: true
    instanceId?: true
    metricType?: true
    value?: true
    unit?: true
    timestamp?: true
    _all?: true
  }

  export type WebVMMetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebVMMetric to aggregate.
     */
    where?: WebVMMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMMetrics to fetch.
     */
    orderBy?: WebVMMetricOrderByWithRelationInput | WebVMMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebVMMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebVMMetrics
    **/
    _count?: true | WebVMMetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebVMMetricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebVMMetricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebVMMetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebVMMetricMaxAggregateInputType
  }

  export type GetWebVMMetricAggregateType<T extends WebVMMetricAggregateArgs> = {
        [P in keyof T & keyof AggregateWebVMMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebVMMetric[P]>
      : GetScalarType<T[P], AggregateWebVMMetric[P]>
  }




  export type WebVMMetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebVMMetricWhereInput
    orderBy?: WebVMMetricOrderByWithAggregationInput | WebVMMetricOrderByWithAggregationInput[]
    by: WebVMMetricScalarFieldEnum[] | WebVMMetricScalarFieldEnum
    having?: WebVMMetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebVMMetricCountAggregateInputType | true
    _avg?: WebVMMetricAvgAggregateInputType
    _sum?: WebVMMetricSumAggregateInputType
    _min?: WebVMMetricMinAggregateInputType
    _max?: WebVMMetricMaxAggregateInputType
  }

  export type WebVMMetricGroupByOutputType = {
    id: string
    instanceId: string
    metricType: $Enums.MetricType
    value: number
    unit: string
    timestamp: Date
    _count: WebVMMetricCountAggregateOutputType | null
    _avg: WebVMMetricAvgAggregateOutputType | null
    _sum: WebVMMetricSumAggregateOutputType | null
    _min: WebVMMetricMinAggregateOutputType | null
    _max: WebVMMetricMaxAggregateOutputType | null
  }

  type GetWebVMMetricGroupByPayload<T extends WebVMMetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebVMMetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebVMMetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebVMMetricGroupByOutputType[P]>
            : GetScalarType<T[P], WebVMMetricGroupByOutputType[P]>
        }
      >
    >


  export type WebVMMetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceId?: boolean
    metricType?: boolean
    value?: boolean
    unit?: boolean
    timestamp?: boolean
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webVMMetric"]>

  export type WebVMMetricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceId?: boolean
    metricType?: boolean
    value?: boolean
    unit?: boolean
    timestamp?: boolean
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webVMMetric"]>

  export type WebVMMetricSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceId?: boolean
    metricType?: boolean
    value?: boolean
    unit?: boolean
    timestamp?: boolean
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webVMMetric"]>

  export type WebVMMetricSelectScalar = {
    id?: boolean
    instanceId?: boolean
    metricType?: boolean
    value?: boolean
    unit?: boolean
    timestamp?: boolean
  }

  export type WebVMMetricOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "instanceId" | "metricType" | "value" | "unit" | "timestamp", ExtArgs["result"]["webVMMetric"]>
  export type WebVMMetricInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }
  export type WebVMMetricIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }
  export type WebVMMetricIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }

  export type $WebVMMetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebVMMetric"
    objects: {
      instance: Prisma.$WebVMInstancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      instanceId: string
      metricType: $Enums.MetricType
      value: number
      unit: string
      timestamp: Date
    }, ExtArgs["result"]["webVMMetric"]>
    composites: {}
  }

  type WebVMMetricGetPayload<S extends boolean | null | undefined | WebVMMetricDefaultArgs> = $Result.GetResult<Prisma.$WebVMMetricPayload, S>

  type WebVMMetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebVMMetricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebVMMetricCountAggregateInputType | true
    }

  export interface WebVMMetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebVMMetric'], meta: { name: 'WebVMMetric' } }
    /**
     * Find zero or one WebVMMetric that matches the filter.
     * @param {WebVMMetricFindUniqueArgs} args - Arguments to find a WebVMMetric
     * @example
     * // Get one WebVMMetric
     * const webVMMetric = await prisma.webVMMetric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebVMMetricFindUniqueArgs>(args: SelectSubset<T, WebVMMetricFindUniqueArgs<ExtArgs>>): Prisma__WebVMMetricClient<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WebVMMetric that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebVMMetricFindUniqueOrThrowArgs} args - Arguments to find a WebVMMetric
     * @example
     * // Get one WebVMMetric
     * const webVMMetric = await prisma.webVMMetric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebVMMetricFindUniqueOrThrowArgs>(args: SelectSubset<T, WebVMMetricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebVMMetricClient<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebVMMetric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMMetricFindFirstArgs} args - Arguments to find a WebVMMetric
     * @example
     * // Get one WebVMMetric
     * const webVMMetric = await prisma.webVMMetric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebVMMetricFindFirstArgs>(args?: SelectSubset<T, WebVMMetricFindFirstArgs<ExtArgs>>): Prisma__WebVMMetricClient<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebVMMetric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMMetricFindFirstOrThrowArgs} args - Arguments to find a WebVMMetric
     * @example
     * // Get one WebVMMetric
     * const webVMMetric = await prisma.webVMMetric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebVMMetricFindFirstOrThrowArgs>(args?: SelectSubset<T, WebVMMetricFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebVMMetricClient<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WebVMMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMMetricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebVMMetrics
     * const webVMMetrics = await prisma.webVMMetric.findMany()
     * 
     * // Get first 10 WebVMMetrics
     * const webVMMetrics = await prisma.webVMMetric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webVMMetricWithIdOnly = await prisma.webVMMetric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebVMMetricFindManyArgs>(args?: SelectSubset<T, WebVMMetricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WebVMMetric.
     * @param {WebVMMetricCreateArgs} args - Arguments to create a WebVMMetric.
     * @example
     * // Create one WebVMMetric
     * const WebVMMetric = await prisma.webVMMetric.create({
     *   data: {
     *     // ... data to create a WebVMMetric
     *   }
     * })
     * 
     */
    create<T extends WebVMMetricCreateArgs>(args: SelectSubset<T, WebVMMetricCreateArgs<ExtArgs>>): Prisma__WebVMMetricClient<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WebVMMetrics.
     * @param {WebVMMetricCreateManyArgs} args - Arguments to create many WebVMMetrics.
     * @example
     * // Create many WebVMMetrics
     * const webVMMetric = await prisma.webVMMetric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebVMMetricCreateManyArgs>(args?: SelectSubset<T, WebVMMetricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebVMMetrics and returns the data saved in the database.
     * @param {WebVMMetricCreateManyAndReturnArgs} args - Arguments to create many WebVMMetrics.
     * @example
     * // Create many WebVMMetrics
     * const webVMMetric = await prisma.webVMMetric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebVMMetrics and only return the `id`
     * const webVMMetricWithIdOnly = await prisma.webVMMetric.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebVMMetricCreateManyAndReturnArgs>(args?: SelectSubset<T, WebVMMetricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WebVMMetric.
     * @param {WebVMMetricDeleteArgs} args - Arguments to delete one WebVMMetric.
     * @example
     * // Delete one WebVMMetric
     * const WebVMMetric = await prisma.webVMMetric.delete({
     *   where: {
     *     // ... filter to delete one WebVMMetric
     *   }
     * })
     * 
     */
    delete<T extends WebVMMetricDeleteArgs>(args: SelectSubset<T, WebVMMetricDeleteArgs<ExtArgs>>): Prisma__WebVMMetricClient<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WebVMMetric.
     * @param {WebVMMetricUpdateArgs} args - Arguments to update one WebVMMetric.
     * @example
     * // Update one WebVMMetric
     * const webVMMetric = await prisma.webVMMetric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebVMMetricUpdateArgs>(args: SelectSubset<T, WebVMMetricUpdateArgs<ExtArgs>>): Prisma__WebVMMetricClient<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WebVMMetrics.
     * @param {WebVMMetricDeleteManyArgs} args - Arguments to filter WebVMMetrics to delete.
     * @example
     * // Delete a few WebVMMetrics
     * const { count } = await prisma.webVMMetric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebVMMetricDeleteManyArgs>(args?: SelectSubset<T, WebVMMetricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebVMMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMMetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebVMMetrics
     * const webVMMetric = await prisma.webVMMetric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebVMMetricUpdateManyArgs>(args: SelectSubset<T, WebVMMetricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebVMMetrics and returns the data updated in the database.
     * @param {WebVMMetricUpdateManyAndReturnArgs} args - Arguments to update many WebVMMetrics.
     * @example
     * // Update many WebVMMetrics
     * const webVMMetric = await prisma.webVMMetric.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WebVMMetrics and only return the `id`
     * const webVMMetricWithIdOnly = await prisma.webVMMetric.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WebVMMetricUpdateManyAndReturnArgs>(args: SelectSubset<T, WebVMMetricUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WebVMMetric.
     * @param {WebVMMetricUpsertArgs} args - Arguments to update or create a WebVMMetric.
     * @example
     * // Update or create a WebVMMetric
     * const webVMMetric = await prisma.webVMMetric.upsert({
     *   create: {
     *     // ... data to create a WebVMMetric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebVMMetric we want to update
     *   }
     * })
     */
    upsert<T extends WebVMMetricUpsertArgs>(args: SelectSubset<T, WebVMMetricUpsertArgs<ExtArgs>>): Prisma__WebVMMetricClient<$Result.GetResult<Prisma.$WebVMMetricPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WebVMMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMMetricCountArgs} args - Arguments to filter WebVMMetrics to count.
     * @example
     * // Count the number of WebVMMetrics
     * const count = await prisma.webVMMetric.count({
     *   where: {
     *     // ... the filter for the WebVMMetrics we want to count
     *   }
     * })
    **/
    count<T extends WebVMMetricCountArgs>(
      args?: Subset<T, WebVMMetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebVMMetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebVMMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMMetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebVMMetricAggregateArgs>(args: Subset<T, WebVMMetricAggregateArgs>): Prisma.PrismaPromise<GetWebVMMetricAggregateType<T>>

    /**
     * Group by WebVMMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMMetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebVMMetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebVMMetricGroupByArgs['orderBy'] }
        : { orderBy?: WebVMMetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebVMMetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebVMMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebVMMetric model
   */
  readonly fields: WebVMMetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebVMMetric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebVMMetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instance<T extends WebVMInstanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WebVMInstanceDefaultArgs<ExtArgs>>): Prisma__WebVMInstanceClient<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebVMMetric model
   */
  interface WebVMMetricFieldRefs {
    readonly id: FieldRef<"WebVMMetric", 'String'>
    readonly instanceId: FieldRef<"WebVMMetric", 'String'>
    readonly metricType: FieldRef<"WebVMMetric", 'MetricType'>
    readonly value: FieldRef<"WebVMMetric", 'Float'>
    readonly unit: FieldRef<"WebVMMetric", 'String'>
    readonly timestamp: FieldRef<"WebVMMetric", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebVMMetric findUnique
   */
  export type WebVMMetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
    /**
     * Filter, which WebVMMetric to fetch.
     */
    where: WebVMMetricWhereUniqueInput
  }

  /**
   * WebVMMetric findUniqueOrThrow
   */
  export type WebVMMetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
    /**
     * Filter, which WebVMMetric to fetch.
     */
    where: WebVMMetricWhereUniqueInput
  }

  /**
   * WebVMMetric findFirst
   */
  export type WebVMMetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
    /**
     * Filter, which WebVMMetric to fetch.
     */
    where?: WebVMMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMMetrics to fetch.
     */
    orderBy?: WebVMMetricOrderByWithRelationInput | WebVMMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebVMMetrics.
     */
    cursor?: WebVMMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebVMMetrics.
     */
    distinct?: WebVMMetricScalarFieldEnum | WebVMMetricScalarFieldEnum[]
  }

  /**
   * WebVMMetric findFirstOrThrow
   */
  export type WebVMMetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
    /**
     * Filter, which WebVMMetric to fetch.
     */
    where?: WebVMMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMMetrics to fetch.
     */
    orderBy?: WebVMMetricOrderByWithRelationInput | WebVMMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebVMMetrics.
     */
    cursor?: WebVMMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebVMMetrics.
     */
    distinct?: WebVMMetricScalarFieldEnum | WebVMMetricScalarFieldEnum[]
  }

  /**
   * WebVMMetric findMany
   */
  export type WebVMMetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
    /**
     * Filter, which WebVMMetrics to fetch.
     */
    where?: WebVMMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMMetrics to fetch.
     */
    orderBy?: WebVMMetricOrderByWithRelationInput | WebVMMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebVMMetrics.
     */
    cursor?: WebVMMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMMetrics.
     */
    skip?: number
    distinct?: WebVMMetricScalarFieldEnum | WebVMMetricScalarFieldEnum[]
  }

  /**
   * WebVMMetric create
   */
  export type WebVMMetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
    /**
     * The data needed to create a WebVMMetric.
     */
    data: XOR<WebVMMetricCreateInput, WebVMMetricUncheckedCreateInput>
  }

  /**
   * WebVMMetric createMany
   */
  export type WebVMMetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebVMMetrics.
     */
    data: WebVMMetricCreateManyInput | WebVMMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebVMMetric createManyAndReturn
   */
  export type WebVMMetricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * The data used to create many WebVMMetrics.
     */
    data: WebVMMetricCreateManyInput | WebVMMetricCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebVMMetric update
   */
  export type WebVMMetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
    /**
     * The data needed to update a WebVMMetric.
     */
    data: XOR<WebVMMetricUpdateInput, WebVMMetricUncheckedUpdateInput>
    /**
     * Choose, which WebVMMetric to update.
     */
    where: WebVMMetricWhereUniqueInput
  }

  /**
   * WebVMMetric updateMany
   */
  export type WebVMMetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebVMMetrics.
     */
    data: XOR<WebVMMetricUpdateManyMutationInput, WebVMMetricUncheckedUpdateManyInput>
    /**
     * Filter which WebVMMetrics to update
     */
    where?: WebVMMetricWhereInput
    /**
     * Limit how many WebVMMetrics to update.
     */
    limit?: number
  }

  /**
   * WebVMMetric updateManyAndReturn
   */
  export type WebVMMetricUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * The data used to update WebVMMetrics.
     */
    data: XOR<WebVMMetricUpdateManyMutationInput, WebVMMetricUncheckedUpdateManyInput>
    /**
     * Filter which WebVMMetrics to update
     */
    where?: WebVMMetricWhereInput
    /**
     * Limit how many WebVMMetrics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebVMMetric upsert
   */
  export type WebVMMetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
    /**
     * The filter to search for the WebVMMetric to update in case it exists.
     */
    where: WebVMMetricWhereUniqueInput
    /**
     * In case the WebVMMetric found by the `where` argument doesn't exist, create a new WebVMMetric with this data.
     */
    create: XOR<WebVMMetricCreateInput, WebVMMetricUncheckedCreateInput>
    /**
     * In case the WebVMMetric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebVMMetricUpdateInput, WebVMMetricUncheckedUpdateInput>
  }

  /**
   * WebVMMetric delete
   */
  export type WebVMMetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
    /**
     * Filter which WebVMMetric to delete.
     */
    where: WebVMMetricWhereUniqueInput
  }

  /**
   * WebVMMetric deleteMany
   */
  export type WebVMMetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebVMMetrics to delete
     */
    where?: WebVMMetricWhereInput
    /**
     * Limit how many WebVMMetrics to delete.
     */
    limit?: number
  }

  /**
   * WebVMMetric without action
   */
  export type WebVMMetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMMetric
     */
    select?: WebVMMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMMetric
     */
    omit?: WebVMMetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMMetricInclude<ExtArgs> | null
  }


  /**
   * Model StorageBucket
   */

  export type AggregateStorageBucket = {
    _count: StorageBucketCountAggregateOutputType | null
    _avg: StorageBucketAvgAggregateOutputType | null
    _sum: StorageBucketSumAggregateOutputType | null
    _min: StorageBucketMinAggregateOutputType | null
    _max: StorageBucketMaxAggregateOutputType | null
  }

  export type StorageBucketAvgAggregateOutputType = {
    size: number | null
    objectCount: number | null
  }

  export type StorageBucketSumAggregateOutputType = {
    size: bigint | null
    objectCount: number | null
  }

  export type StorageBucketMinAggregateOutputType = {
    id: string | null
    name: string | null
    region: string | null
    versioning: boolean | null
    encryption: boolean | null
    size: bigint | null
    objectCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StorageBucketMaxAggregateOutputType = {
    id: string | null
    name: string | null
    region: string | null
    versioning: boolean | null
    encryption: boolean | null
    size: bigint | null
    objectCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StorageBucketCountAggregateOutputType = {
    id: number
    name: number
    region: number
    versioning: number
    encryption: number
    size: number
    objectCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StorageBucketAvgAggregateInputType = {
    size?: true
    objectCount?: true
  }

  export type StorageBucketSumAggregateInputType = {
    size?: true
    objectCount?: true
  }

  export type StorageBucketMinAggregateInputType = {
    id?: true
    name?: true
    region?: true
    versioning?: true
    encryption?: true
    size?: true
    objectCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StorageBucketMaxAggregateInputType = {
    id?: true
    name?: true
    region?: true
    versioning?: true
    encryption?: true
    size?: true
    objectCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StorageBucketCountAggregateInputType = {
    id?: true
    name?: true
    region?: true
    versioning?: true
    encryption?: true
    size?: true
    objectCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StorageBucketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StorageBucket to aggregate.
     */
    where?: StorageBucketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageBuckets to fetch.
     */
    orderBy?: StorageBucketOrderByWithRelationInput | StorageBucketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StorageBucketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageBuckets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageBuckets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StorageBuckets
    **/
    _count?: true | StorageBucketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StorageBucketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StorageBucketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StorageBucketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StorageBucketMaxAggregateInputType
  }

  export type GetStorageBucketAggregateType<T extends StorageBucketAggregateArgs> = {
        [P in keyof T & keyof AggregateStorageBucket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStorageBucket[P]>
      : GetScalarType<T[P], AggregateStorageBucket[P]>
  }




  export type StorageBucketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StorageBucketWhereInput
    orderBy?: StorageBucketOrderByWithAggregationInput | StorageBucketOrderByWithAggregationInput[]
    by: StorageBucketScalarFieldEnum[] | StorageBucketScalarFieldEnum
    having?: StorageBucketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StorageBucketCountAggregateInputType | true
    _avg?: StorageBucketAvgAggregateInputType
    _sum?: StorageBucketSumAggregateInputType
    _min?: StorageBucketMinAggregateInputType
    _max?: StorageBucketMaxAggregateInputType
  }

  export type StorageBucketGroupByOutputType = {
    id: string
    name: string
    region: string
    versioning: boolean
    encryption: boolean
    size: bigint
    objectCount: number
    createdAt: Date
    updatedAt: Date
    _count: StorageBucketCountAggregateOutputType | null
    _avg: StorageBucketAvgAggregateOutputType | null
    _sum: StorageBucketSumAggregateOutputType | null
    _min: StorageBucketMinAggregateOutputType | null
    _max: StorageBucketMaxAggregateOutputType | null
  }

  type GetStorageBucketGroupByPayload<T extends StorageBucketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StorageBucketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StorageBucketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StorageBucketGroupByOutputType[P]>
            : GetScalarType<T[P], StorageBucketGroupByOutputType[P]>
        }
      >
    >


  export type StorageBucketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    region?: boolean
    versioning?: boolean
    encryption?: boolean
    size?: boolean
    objectCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    objects?: boolean | StorageBucket$objectsArgs<ExtArgs>
    usage?: boolean | StorageBucket$usageArgs<ExtArgs>
    _count?: boolean | StorageBucketCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storageBucket"]>

  export type StorageBucketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    region?: boolean
    versioning?: boolean
    encryption?: boolean
    size?: boolean
    objectCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["storageBucket"]>

  export type StorageBucketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    region?: boolean
    versioning?: boolean
    encryption?: boolean
    size?: boolean
    objectCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["storageBucket"]>

  export type StorageBucketSelectScalar = {
    id?: boolean
    name?: boolean
    region?: boolean
    versioning?: boolean
    encryption?: boolean
    size?: boolean
    objectCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StorageBucketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "region" | "versioning" | "encryption" | "size" | "objectCount" | "createdAt" | "updatedAt", ExtArgs["result"]["storageBucket"]>
  export type StorageBucketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    objects?: boolean | StorageBucket$objectsArgs<ExtArgs>
    usage?: boolean | StorageBucket$usageArgs<ExtArgs>
    _count?: boolean | StorageBucketCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StorageBucketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StorageBucketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StorageBucketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StorageBucket"
    objects: {
      objects: Prisma.$StorageObjectPayload<ExtArgs>[]
      usage: Prisma.$StorageUsagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      region: string
      versioning: boolean
      encryption: boolean
      size: bigint
      objectCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["storageBucket"]>
    composites: {}
  }

  type StorageBucketGetPayload<S extends boolean | null | undefined | StorageBucketDefaultArgs> = $Result.GetResult<Prisma.$StorageBucketPayload, S>

  type StorageBucketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StorageBucketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StorageBucketCountAggregateInputType | true
    }

  export interface StorageBucketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StorageBucket'], meta: { name: 'StorageBucket' } }
    /**
     * Find zero or one StorageBucket that matches the filter.
     * @param {StorageBucketFindUniqueArgs} args - Arguments to find a StorageBucket
     * @example
     * // Get one StorageBucket
     * const storageBucket = await prisma.storageBucket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StorageBucketFindUniqueArgs>(args: SelectSubset<T, StorageBucketFindUniqueArgs<ExtArgs>>): Prisma__StorageBucketClient<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StorageBucket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StorageBucketFindUniqueOrThrowArgs} args - Arguments to find a StorageBucket
     * @example
     * // Get one StorageBucket
     * const storageBucket = await prisma.storageBucket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StorageBucketFindUniqueOrThrowArgs>(args: SelectSubset<T, StorageBucketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StorageBucketClient<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StorageBucket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageBucketFindFirstArgs} args - Arguments to find a StorageBucket
     * @example
     * // Get one StorageBucket
     * const storageBucket = await prisma.storageBucket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StorageBucketFindFirstArgs>(args?: SelectSubset<T, StorageBucketFindFirstArgs<ExtArgs>>): Prisma__StorageBucketClient<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StorageBucket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageBucketFindFirstOrThrowArgs} args - Arguments to find a StorageBucket
     * @example
     * // Get one StorageBucket
     * const storageBucket = await prisma.storageBucket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StorageBucketFindFirstOrThrowArgs>(args?: SelectSubset<T, StorageBucketFindFirstOrThrowArgs<ExtArgs>>): Prisma__StorageBucketClient<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StorageBuckets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageBucketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StorageBuckets
     * const storageBuckets = await prisma.storageBucket.findMany()
     * 
     * // Get first 10 StorageBuckets
     * const storageBuckets = await prisma.storageBucket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storageBucketWithIdOnly = await prisma.storageBucket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StorageBucketFindManyArgs>(args?: SelectSubset<T, StorageBucketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StorageBucket.
     * @param {StorageBucketCreateArgs} args - Arguments to create a StorageBucket.
     * @example
     * // Create one StorageBucket
     * const StorageBucket = await prisma.storageBucket.create({
     *   data: {
     *     // ... data to create a StorageBucket
     *   }
     * })
     * 
     */
    create<T extends StorageBucketCreateArgs>(args: SelectSubset<T, StorageBucketCreateArgs<ExtArgs>>): Prisma__StorageBucketClient<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StorageBuckets.
     * @param {StorageBucketCreateManyArgs} args - Arguments to create many StorageBuckets.
     * @example
     * // Create many StorageBuckets
     * const storageBucket = await prisma.storageBucket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StorageBucketCreateManyArgs>(args?: SelectSubset<T, StorageBucketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StorageBuckets and returns the data saved in the database.
     * @param {StorageBucketCreateManyAndReturnArgs} args - Arguments to create many StorageBuckets.
     * @example
     * // Create many StorageBuckets
     * const storageBucket = await prisma.storageBucket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StorageBuckets and only return the `id`
     * const storageBucketWithIdOnly = await prisma.storageBucket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StorageBucketCreateManyAndReturnArgs>(args?: SelectSubset<T, StorageBucketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StorageBucket.
     * @param {StorageBucketDeleteArgs} args - Arguments to delete one StorageBucket.
     * @example
     * // Delete one StorageBucket
     * const StorageBucket = await prisma.storageBucket.delete({
     *   where: {
     *     // ... filter to delete one StorageBucket
     *   }
     * })
     * 
     */
    delete<T extends StorageBucketDeleteArgs>(args: SelectSubset<T, StorageBucketDeleteArgs<ExtArgs>>): Prisma__StorageBucketClient<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StorageBucket.
     * @param {StorageBucketUpdateArgs} args - Arguments to update one StorageBucket.
     * @example
     * // Update one StorageBucket
     * const storageBucket = await prisma.storageBucket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StorageBucketUpdateArgs>(args: SelectSubset<T, StorageBucketUpdateArgs<ExtArgs>>): Prisma__StorageBucketClient<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StorageBuckets.
     * @param {StorageBucketDeleteManyArgs} args - Arguments to filter StorageBuckets to delete.
     * @example
     * // Delete a few StorageBuckets
     * const { count } = await prisma.storageBucket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StorageBucketDeleteManyArgs>(args?: SelectSubset<T, StorageBucketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StorageBuckets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageBucketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StorageBuckets
     * const storageBucket = await prisma.storageBucket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StorageBucketUpdateManyArgs>(args: SelectSubset<T, StorageBucketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StorageBuckets and returns the data updated in the database.
     * @param {StorageBucketUpdateManyAndReturnArgs} args - Arguments to update many StorageBuckets.
     * @example
     * // Update many StorageBuckets
     * const storageBucket = await prisma.storageBucket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StorageBuckets and only return the `id`
     * const storageBucketWithIdOnly = await prisma.storageBucket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StorageBucketUpdateManyAndReturnArgs>(args: SelectSubset<T, StorageBucketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StorageBucket.
     * @param {StorageBucketUpsertArgs} args - Arguments to update or create a StorageBucket.
     * @example
     * // Update or create a StorageBucket
     * const storageBucket = await prisma.storageBucket.upsert({
     *   create: {
     *     // ... data to create a StorageBucket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StorageBucket we want to update
     *   }
     * })
     */
    upsert<T extends StorageBucketUpsertArgs>(args: SelectSubset<T, StorageBucketUpsertArgs<ExtArgs>>): Prisma__StorageBucketClient<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StorageBuckets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageBucketCountArgs} args - Arguments to filter StorageBuckets to count.
     * @example
     * // Count the number of StorageBuckets
     * const count = await prisma.storageBucket.count({
     *   where: {
     *     // ... the filter for the StorageBuckets we want to count
     *   }
     * })
    **/
    count<T extends StorageBucketCountArgs>(
      args?: Subset<T, StorageBucketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StorageBucketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StorageBucket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageBucketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StorageBucketAggregateArgs>(args: Subset<T, StorageBucketAggregateArgs>): Prisma.PrismaPromise<GetStorageBucketAggregateType<T>>

    /**
     * Group by StorageBucket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageBucketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StorageBucketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StorageBucketGroupByArgs['orderBy'] }
        : { orderBy?: StorageBucketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StorageBucketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStorageBucketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StorageBucket model
   */
  readonly fields: StorageBucketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StorageBucket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StorageBucketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    objects<T extends StorageBucket$objectsArgs<ExtArgs> = {}>(args?: Subset<T, StorageBucket$objectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    usage<T extends StorageBucket$usageArgs<ExtArgs> = {}>(args?: Subset<T, StorageBucket$usageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StorageBucket model
   */
  interface StorageBucketFieldRefs {
    readonly id: FieldRef<"StorageBucket", 'String'>
    readonly name: FieldRef<"StorageBucket", 'String'>
    readonly region: FieldRef<"StorageBucket", 'String'>
    readonly versioning: FieldRef<"StorageBucket", 'Boolean'>
    readonly encryption: FieldRef<"StorageBucket", 'Boolean'>
    readonly size: FieldRef<"StorageBucket", 'BigInt'>
    readonly objectCount: FieldRef<"StorageBucket", 'Int'>
    readonly createdAt: FieldRef<"StorageBucket", 'DateTime'>
    readonly updatedAt: FieldRef<"StorageBucket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StorageBucket findUnique
   */
  export type StorageBucketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageBucketInclude<ExtArgs> | null
    /**
     * Filter, which StorageBucket to fetch.
     */
    where: StorageBucketWhereUniqueInput
  }

  /**
   * StorageBucket findUniqueOrThrow
   */
  export type StorageBucketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageBucketInclude<ExtArgs> | null
    /**
     * Filter, which StorageBucket to fetch.
     */
    where: StorageBucketWhereUniqueInput
  }

  /**
   * StorageBucket findFirst
   */
  export type StorageBucketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageBucketInclude<ExtArgs> | null
    /**
     * Filter, which StorageBucket to fetch.
     */
    where?: StorageBucketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageBuckets to fetch.
     */
    orderBy?: StorageBucketOrderByWithRelationInput | StorageBucketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StorageBuckets.
     */
    cursor?: StorageBucketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageBuckets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageBuckets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StorageBuckets.
     */
    distinct?: StorageBucketScalarFieldEnum | StorageBucketScalarFieldEnum[]
  }

  /**
   * StorageBucket findFirstOrThrow
   */
  export type StorageBucketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageBucketInclude<ExtArgs> | null
    /**
     * Filter, which StorageBucket to fetch.
     */
    where?: StorageBucketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageBuckets to fetch.
     */
    orderBy?: StorageBucketOrderByWithRelationInput | StorageBucketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StorageBuckets.
     */
    cursor?: StorageBucketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageBuckets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageBuckets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StorageBuckets.
     */
    distinct?: StorageBucketScalarFieldEnum | StorageBucketScalarFieldEnum[]
  }

  /**
   * StorageBucket findMany
   */
  export type StorageBucketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageBucketInclude<ExtArgs> | null
    /**
     * Filter, which StorageBuckets to fetch.
     */
    where?: StorageBucketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageBuckets to fetch.
     */
    orderBy?: StorageBucketOrderByWithRelationInput | StorageBucketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StorageBuckets.
     */
    cursor?: StorageBucketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageBuckets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageBuckets.
     */
    skip?: number
    distinct?: StorageBucketScalarFieldEnum | StorageBucketScalarFieldEnum[]
  }

  /**
   * StorageBucket create
   */
  export type StorageBucketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageBucketInclude<ExtArgs> | null
    /**
     * The data needed to create a StorageBucket.
     */
    data: XOR<StorageBucketCreateInput, StorageBucketUncheckedCreateInput>
  }

  /**
   * StorageBucket createMany
   */
  export type StorageBucketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StorageBuckets.
     */
    data: StorageBucketCreateManyInput | StorageBucketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StorageBucket createManyAndReturn
   */
  export type StorageBucketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * The data used to create many StorageBuckets.
     */
    data: StorageBucketCreateManyInput | StorageBucketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StorageBucket update
   */
  export type StorageBucketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageBucketInclude<ExtArgs> | null
    /**
     * The data needed to update a StorageBucket.
     */
    data: XOR<StorageBucketUpdateInput, StorageBucketUncheckedUpdateInput>
    /**
     * Choose, which StorageBucket to update.
     */
    where: StorageBucketWhereUniqueInput
  }

  /**
   * StorageBucket updateMany
   */
  export type StorageBucketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StorageBuckets.
     */
    data: XOR<StorageBucketUpdateManyMutationInput, StorageBucketUncheckedUpdateManyInput>
    /**
     * Filter which StorageBuckets to update
     */
    where?: StorageBucketWhereInput
    /**
     * Limit how many StorageBuckets to update.
     */
    limit?: number
  }

  /**
   * StorageBucket updateManyAndReturn
   */
  export type StorageBucketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * The data used to update StorageBuckets.
     */
    data: XOR<StorageBucketUpdateManyMutationInput, StorageBucketUncheckedUpdateManyInput>
    /**
     * Filter which StorageBuckets to update
     */
    where?: StorageBucketWhereInput
    /**
     * Limit how many StorageBuckets to update.
     */
    limit?: number
  }

  /**
   * StorageBucket upsert
   */
  export type StorageBucketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageBucketInclude<ExtArgs> | null
    /**
     * The filter to search for the StorageBucket to update in case it exists.
     */
    where: StorageBucketWhereUniqueInput
    /**
     * In case the StorageBucket found by the `where` argument doesn't exist, create a new StorageBucket with this data.
     */
    create: XOR<StorageBucketCreateInput, StorageBucketUncheckedCreateInput>
    /**
     * In case the StorageBucket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StorageBucketUpdateInput, StorageBucketUncheckedUpdateInput>
  }

  /**
   * StorageBucket delete
   */
  export type StorageBucketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageBucketInclude<ExtArgs> | null
    /**
     * Filter which StorageBucket to delete.
     */
    where: StorageBucketWhereUniqueInput
  }

  /**
   * StorageBucket deleteMany
   */
  export type StorageBucketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StorageBuckets to delete
     */
    where?: StorageBucketWhereInput
    /**
     * Limit how many StorageBuckets to delete.
     */
    limit?: number
  }

  /**
   * StorageBucket.objects
   */
  export type StorageBucket$objectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
    where?: StorageObjectWhereInput
    orderBy?: StorageObjectOrderByWithRelationInput | StorageObjectOrderByWithRelationInput[]
    cursor?: StorageObjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StorageObjectScalarFieldEnum | StorageObjectScalarFieldEnum[]
  }

  /**
   * StorageBucket.usage
   */
  export type StorageBucket$usageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
    where?: StorageUsageWhereInput
    orderBy?: StorageUsageOrderByWithRelationInput | StorageUsageOrderByWithRelationInput[]
    cursor?: StorageUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StorageUsageScalarFieldEnum | StorageUsageScalarFieldEnum[]
  }

  /**
   * StorageBucket without action
   */
  export type StorageBucketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageBucket
     */
    select?: StorageBucketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageBucket
     */
    omit?: StorageBucketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageBucketInclude<ExtArgs> | null
  }


  /**
   * Model StorageObject
   */

  export type AggregateStorageObject = {
    _count: StorageObjectCountAggregateOutputType | null
    _avg: StorageObjectAvgAggregateOutputType | null
    _sum: StorageObjectSumAggregateOutputType | null
    _min: StorageObjectMinAggregateOutputType | null
    _max: StorageObjectMaxAggregateOutputType | null
  }

  export type StorageObjectAvgAggregateOutputType = {
    size: number | null
  }

  export type StorageObjectSumAggregateOutputType = {
    size: bigint | null
  }

  export type StorageObjectMinAggregateOutputType = {
    id: string | null
    key: string | null
    bucketId: string | null
    size: bigint | null
    contentType: string | null
    etag: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StorageObjectMaxAggregateOutputType = {
    id: string | null
    key: string | null
    bucketId: string | null
    size: bigint | null
    contentType: string | null
    etag: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StorageObjectCountAggregateOutputType = {
    id: number
    key: number
    bucketId: number
    size: number
    contentType: number
    etag: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StorageObjectAvgAggregateInputType = {
    size?: true
  }

  export type StorageObjectSumAggregateInputType = {
    size?: true
  }

  export type StorageObjectMinAggregateInputType = {
    id?: true
    key?: true
    bucketId?: true
    size?: true
    contentType?: true
    etag?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StorageObjectMaxAggregateInputType = {
    id?: true
    key?: true
    bucketId?: true
    size?: true
    contentType?: true
    etag?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StorageObjectCountAggregateInputType = {
    id?: true
    key?: true
    bucketId?: true
    size?: true
    contentType?: true
    etag?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StorageObjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StorageObject to aggregate.
     */
    where?: StorageObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageObjects to fetch.
     */
    orderBy?: StorageObjectOrderByWithRelationInput | StorageObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StorageObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageObjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StorageObjects
    **/
    _count?: true | StorageObjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StorageObjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StorageObjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StorageObjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StorageObjectMaxAggregateInputType
  }

  export type GetStorageObjectAggregateType<T extends StorageObjectAggregateArgs> = {
        [P in keyof T & keyof AggregateStorageObject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStorageObject[P]>
      : GetScalarType<T[P], AggregateStorageObject[P]>
  }




  export type StorageObjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StorageObjectWhereInput
    orderBy?: StorageObjectOrderByWithAggregationInput | StorageObjectOrderByWithAggregationInput[]
    by: StorageObjectScalarFieldEnum[] | StorageObjectScalarFieldEnum
    having?: StorageObjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StorageObjectCountAggregateInputType | true
    _avg?: StorageObjectAvgAggregateInputType
    _sum?: StorageObjectSumAggregateInputType
    _min?: StorageObjectMinAggregateInputType
    _max?: StorageObjectMaxAggregateInputType
  }

  export type StorageObjectGroupByOutputType = {
    id: string
    key: string
    bucketId: string
    size: bigint
    contentType: string
    etag: string
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: StorageObjectCountAggregateOutputType | null
    _avg: StorageObjectAvgAggregateOutputType | null
    _sum: StorageObjectSumAggregateOutputType | null
    _min: StorageObjectMinAggregateOutputType | null
    _max: StorageObjectMaxAggregateOutputType | null
  }

  type GetStorageObjectGroupByPayload<T extends StorageObjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StorageObjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StorageObjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StorageObjectGroupByOutputType[P]>
            : GetScalarType<T[P], StorageObjectGroupByOutputType[P]>
        }
      >
    >


  export type StorageObjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    bucketId?: boolean
    size?: boolean
    contentType?: boolean
    etag?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storageObject"]>

  export type StorageObjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    bucketId?: boolean
    size?: boolean
    contentType?: boolean
    etag?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storageObject"]>

  export type StorageObjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    bucketId?: boolean
    size?: boolean
    contentType?: boolean
    etag?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storageObject"]>

  export type StorageObjectSelectScalar = {
    id?: boolean
    key?: boolean
    bucketId?: boolean
    size?: boolean
    contentType?: boolean
    etag?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StorageObjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "bucketId" | "size" | "contentType" | "etag" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["storageObject"]>
  export type StorageObjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }
  export type StorageObjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }
  export type StorageObjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }

  export type $StorageObjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StorageObject"
    objects: {
      bucket: Prisma.$StorageBucketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      bucketId: string
      size: bigint
      contentType: string
      etag: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["storageObject"]>
    composites: {}
  }

  type StorageObjectGetPayload<S extends boolean | null | undefined | StorageObjectDefaultArgs> = $Result.GetResult<Prisma.$StorageObjectPayload, S>

  type StorageObjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StorageObjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StorageObjectCountAggregateInputType | true
    }

  export interface StorageObjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StorageObject'], meta: { name: 'StorageObject' } }
    /**
     * Find zero or one StorageObject that matches the filter.
     * @param {StorageObjectFindUniqueArgs} args - Arguments to find a StorageObject
     * @example
     * // Get one StorageObject
     * const storageObject = await prisma.storageObject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StorageObjectFindUniqueArgs>(args: SelectSubset<T, StorageObjectFindUniqueArgs<ExtArgs>>): Prisma__StorageObjectClient<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StorageObject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StorageObjectFindUniqueOrThrowArgs} args - Arguments to find a StorageObject
     * @example
     * // Get one StorageObject
     * const storageObject = await prisma.storageObject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StorageObjectFindUniqueOrThrowArgs>(args: SelectSubset<T, StorageObjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StorageObjectClient<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StorageObject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageObjectFindFirstArgs} args - Arguments to find a StorageObject
     * @example
     * // Get one StorageObject
     * const storageObject = await prisma.storageObject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StorageObjectFindFirstArgs>(args?: SelectSubset<T, StorageObjectFindFirstArgs<ExtArgs>>): Prisma__StorageObjectClient<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StorageObject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageObjectFindFirstOrThrowArgs} args - Arguments to find a StorageObject
     * @example
     * // Get one StorageObject
     * const storageObject = await prisma.storageObject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StorageObjectFindFirstOrThrowArgs>(args?: SelectSubset<T, StorageObjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__StorageObjectClient<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StorageObjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageObjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StorageObjects
     * const storageObjects = await prisma.storageObject.findMany()
     * 
     * // Get first 10 StorageObjects
     * const storageObjects = await prisma.storageObject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storageObjectWithIdOnly = await prisma.storageObject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StorageObjectFindManyArgs>(args?: SelectSubset<T, StorageObjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StorageObject.
     * @param {StorageObjectCreateArgs} args - Arguments to create a StorageObject.
     * @example
     * // Create one StorageObject
     * const StorageObject = await prisma.storageObject.create({
     *   data: {
     *     // ... data to create a StorageObject
     *   }
     * })
     * 
     */
    create<T extends StorageObjectCreateArgs>(args: SelectSubset<T, StorageObjectCreateArgs<ExtArgs>>): Prisma__StorageObjectClient<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StorageObjects.
     * @param {StorageObjectCreateManyArgs} args - Arguments to create many StorageObjects.
     * @example
     * // Create many StorageObjects
     * const storageObject = await prisma.storageObject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StorageObjectCreateManyArgs>(args?: SelectSubset<T, StorageObjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StorageObjects and returns the data saved in the database.
     * @param {StorageObjectCreateManyAndReturnArgs} args - Arguments to create many StorageObjects.
     * @example
     * // Create many StorageObjects
     * const storageObject = await prisma.storageObject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StorageObjects and only return the `id`
     * const storageObjectWithIdOnly = await prisma.storageObject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StorageObjectCreateManyAndReturnArgs>(args?: SelectSubset<T, StorageObjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StorageObject.
     * @param {StorageObjectDeleteArgs} args - Arguments to delete one StorageObject.
     * @example
     * // Delete one StorageObject
     * const StorageObject = await prisma.storageObject.delete({
     *   where: {
     *     // ... filter to delete one StorageObject
     *   }
     * })
     * 
     */
    delete<T extends StorageObjectDeleteArgs>(args: SelectSubset<T, StorageObjectDeleteArgs<ExtArgs>>): Prisma__StorageObjectClient<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StorageObject.
     * @param {StorageObjectUpdateArgs} args - Arguments to update one StorageObject.
     * @example
     * // Update one StorageObject
     * const storageObject = await prisma.storageObject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StorageObjectUpdateArgs>(args: SelectSubset<T, StorageObjectUpdateArgs<ExtArgs>>): Prisma__StorageObjectClient<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StorageObjects.
     * @param {StorageObjectDeleteManyArgs} args - Arguments to filter StorageObjects to delete.
     * @example
     * // Delete a few StorageObjects
     * const { count } = await prisma.storageObject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StorageObjectDeleteManyArgs>(args?: SelectSubset<T, StorageObjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StorageObjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageObjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StorageObjects
     * const storageObject = await prisma.storageObject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StorageObjectUpdateManyArgs>(args: SelectSubset<T, StorageObjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StorageObjects and returns the data updated in the database.
     * @param {StorageObjectUpdateManyAndReturnArgs} args - Arguments to update many StorageObjects.
     * @example
     * // Update many StorageObjects
     * const storageObject = await prisma.storageObject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StorageObjects and only return the `id`
     * const storageObjectWithIdOnly = await prisma.storageObject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StorageObjectUpdateManyAndReturnArgs>(args: SelectSubset<T, StorageObjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StorageObject.
     * @param {StorageObjectUpsertArgs} args - Arguments to update or create a StorageObject.
     * @example
     * // Update or create a StorageObject
     * const storageObject = await prisma.storageObject.upsert({
     *   create: {
     *     // ... data to create a StorageObject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StorageObject we want to update
     *   }
     * })
     */
    upsert<T extends StorageObjectUpsertArgs>(args: SelectSubset<T, StorageObjectUpsertArgs<ExtArgs>>): Prisma__StorageObjectClient<$Result.GetResult<Prisma.$StorageObjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StorageObjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageObjectCountArgs} args - Arguments to filter StorageObjects to count.
     * @example
     * // Count the number of StorageObjects
     * const count = await prisma.storageObject.count({
     *   where: {
     *     // ... the filter for the StorageObjects we want to count
     *   }
     * })
    **/
    count<T extends StorageObjectCountArgs>(
      args?: Subset<T, StorageObjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StorageObjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StorageObject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageObjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StorageObjectAggregateArgs>(args: Subset<T, StorageObjectAggregateArgs>): Prisma.PrismaPromise<GetStorageObjectAggregateType<T>>

    /**
     * Group by StorageObject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageObjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StorageObjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StorageObjectGroupByArgs['orderBy'] }
        : { orderBy?: StorageObjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StorageObjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStorageObjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StorageObject model
   */
  readonly fields: StorageObjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StorageObject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StorageObjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bucket<T extends StorageBucketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StorageBucketDefaultArgs<ExtArgs>>): Prisma__StorageBucketClient<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StorageObject model
   */
  interface StorageObjectFieldRefs {
    readonly id: FieldRef<"StorageObject", 'String'>
    readonly key: FieldRef<"StorageObject", 'String'>
    readonly bucketId: FieldRef<"StorageObject", 'String'>
    readonly size: FieldRef<"StorageObject", 'BigInt'>
    readonly contentType: FieldRef<"StorageObject", 'String'>
    readonly etag: FieldRef<"StorageObject", 'String'>
    readonly metadata: FieldRef<"StorageObject", 'Json'>
    readonly createdAt: FieldRef<"StorageObject", 'DateTime'>
    readonly updatedAt: FieldRef<"StorageObject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StorageObject findUnique
   */
  export type StorageObjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
    /**
     * Filter, which StorageObject to fetch.
     */
    where: StorageObjectWhereUniqueInput
  }

  /**
   * StorageObject findUniqueOrThrow
   */
  export type StorageObjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
    /**
     * Filter, which StorageObject to fetch.
     */
    where: StorageObjectWhereUniqueInput
  }

  /**
   * StorageObject findFirst
   */
  export type StorageObjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
    /**
     * Filter, which StorageObject to fetch.
     */
    where?: StorageObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageObjects to fetch.
     */
    orderBy?: StorageObjectOrderByWithRelationInput | StorageObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StorageObjects.
     */
    cursor?: StorageObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageObjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StorageObjects.
     */
    distinct?: StorageObjectScalarFieldEnum | StorageObjectScalarFieldEnum[]
  }

  /**
   * StorageObject findFirstOrThrow
   */
  export type StorageObjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
    /**
     * Filter, which StorageObject to fetch.
     */
    where?: StorageObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageObjects to fetch.
     */
    orderBy?: StorageObjectOrderByWithRelationInput | StorageObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StorageObjects.
     */
    cursor?: StorageObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageObjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StorageObjects.
     */
    distinct?: StorageObjectScalarFieldEnum | StorageObjectScalarFieldEnum[]
  }

  /**
   * StorageObject findMany
   */
  export type StorageObjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
    /**
     * Filter, which StorageObjects to fetch.
     */
    where?: StorageObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageObjects to fetch.
     */
    orderBy?: StorageObjectOrderByWithRelationInput | StorageObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StorageObjects.
     */
    cursor?: StorageObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageObjects.
     */
    skip?: number
    distinct?: StorageObjectScalarFieldEnum | StorageObjectScalarFieldEnum[]
  }

  /**
   * StorageObject create
   */
  export type StorageObjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
    /**
     * The data needed to create a StorageObject.
     */
    data: XOR<StorageObjectCreateInput, StorageObjectUncheckedCreateInput>
  }

  /**
   * StorageObject createMany
   */
  export type StorageObjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StorageObjects.
     */
    data: StorageObjectCreateManyInput | StorageObjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StorageObject createManyAndReturn
   */
  export type StorageObjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * The data used to create many StorageObjects.
     */
    data: StorageObjectCreateManyInput | StorageObjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StorageObject update
   */
  export type StorageObjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
    /**
     * The data needed to update a StorageObject.
     */
    data: XOR<StorageObjectUpdateInput, StorageObjectUncheckedUpdateInput>
    /**
     * Choose, which StorageObject to update.
     */
    where: StorageObjectWhereUniqueInput
  }

  /**
   * StorageObject updateMany
   */
  export type StorageObjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StorageObjects.
     */
    data: XOR<StorageObjectUpdateManyMutationInput, StorageObjectUncheckedUpdateManyInput>
    /**
     * Filter which StorageObjects to update
     */
    where?: StorageObjectWhereInput
    /**
     * Limit how many StorageObjects to update.
     */
    limit?: number
  }

  /**
   * StorageObject updateManyAndReturn
   */
  export type StorageObjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * The data used to update StorageObjects.
     */
    data: XOR<StorageObjectUpdateManyMutationInput, StorageObjectUncheckedUpdateManyInput>
    /**
     * Filter which StorageObjects to update
     */
    where?: StorageObjectWhereInput
    /**
     * Limit how many StorageObjects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StorageObject upsert
   */
  export type StorageObjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
    /**
     * The filter to search for the StorageObject to update in case it exists.
     */
    where: StorageObjectWhereUniqueInput
    /**
     * In case the StorageObject found by the `where` argument doesn't exist, create a new StorageObject with this data.
     */
    create: XOR<StorageObjectCreateInput, StorageObjectUncheckedCreateInput>
    /**
     * In case the StorageObject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StorageObjectUpdateInput, StorageObjectUncheckedUpdateInput>
  }

  /**
   * StorageObject delete
   */
  export type StorageObjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
    /**
     * Filter which StorageObject to delete.
     */
    where: StorageObjectWhereUniqueInput
  }

  /**
   * StorageObject deleteMany
   */
  export type StorageObjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StorageObjects to delete
     */
    where?: StorageObjectWhereInput
    /**
     * Limit how many StorageObjects to delete.
     */
    limit?: number
  }

  /**
   * StorageObject without action
   */
  export type StorageObjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageObject
     */
    select?: StorageObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageObject
     */
    omit?: StorageObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageObjectInclude<ExtArgs> | null
  }


  /**
   * Model StorageUsage
   */

  export type AggregateStorageUsage = {
    _count: StorageUsageCountAggregateOutputType | null
    _avg: StorageUsageAvgAggregateOutputType | null
    _sum: StorageUsageSumAggregateOutputType | null
    _min: StorageUsageMinAggregateOutputType | null
    _max: StorageUsageMaxAggregateOutputType | null
  }

  export type StorageUsageAvgAggregateOutputType = {
    totalSize: number | null
    objectCount: number | null
    quota: number | null
  }

  export type StorageUsageSumAggregateOutputType = {
    totalSize: bigint | null
    objectCount: number | null
    quota: bigint | null
  }

  export type StorageUsageMinAggregateOutputType = {
    id: string | null
    bucketId: string | null
    totalSize: bigint | null
    objectCount: number | null
    quota: bigint | null
    timestamp: Date | null
  }

  export type StorageUsageMaxAggregateOutputType = {
    id: string | null
    bucketId: string | null
    totalSize: bigint | null
    objectCount: number | null
    quota: bigint | null
    timestamp: Date | null
  }

  export type StorageUsageCountAggregateOutputType = {
    id: number
    bucketId: number
    totalSize: number
    objectCount: number
    quota: number
    timestamp: number
    _all: number
  }


  export type StorageUsageAvgAggregateInputType = {
    totalSize?: true
    objectCount?: true
    quota?: true
  }

  export type StorageUsageSumAggregateInputType = {
    totalSize?: true
    objectCount?: true
    quota?: true
  }

  export type StorageUsageMinAggregateInputType = {
    id?: true
    bucketId?: true
    totalSize?: true
    objectCount?: true
    quota?: true
    timestamp?: true
  }

  export type StorageUsageMaxAggregateInputType = {
    id?: true
    bucketId?: true
    totalSize?: true
    objectCount?: true
    quota?: true
    timestamp?: true
  }

  export type StorageUsageCountAggregateInputType = {
    id?: true
    bucketId?: true
    totalSize?: true
    objectCount?: true
    quota?: true
    timestamp?: true
    _all?: true
  }

  export type StorageUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StorageUsage to aggregate.
     */
    where?: StorageUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageUsages to fetch.
     */
    orderBy?: StorageUsageOrderByWithRelationInput | StorageUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StorageUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StorageUsages
    **/
    _count?: true | StorageUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StorageUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StorageUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StorageUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StorageUsageMaxAggregateInputType
  }

  export type GetStorageUsageAggregateType<T extends StorageUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateStorageUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStorageUsage[P]>
      : GetScalarType<T[P], AggregateStorageUsage[P]>
  }




  export type StorageUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StorageUsageWhereInput
    orderBy?: StorageUsageOrderByWithAggregationInput | StorageUsageOrderByWithAggregationInput[]
    by: StorageUsageScalarFieldEnum[] | StorageUsageScalarFieldEnum
    having?: StorageUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StorageUsageCountAggregateInputType | true
    _avg?: StorageUsageAvgAggregateInputType
    _sum?: StorageUsageSumAggregateInputType
    _min?: StorageUsageMinAggregateInputType
    _max?: StorageUsageMaxAggregateInputType
  }

  export type StorageUsageGroupByOutputType = {
    id: string
    bucketId: string
    totalSize: bigint
    objectCount: number
    quota: bigint
    timestamp: Date
    _count: StorageUsageCountAggregateOutputType | null
    _avg: StorageUsageAvgAggregateOutputType | null
    _sum: StorageUsageSumAggregateOutputType | null
    _min: StorageUsageMinAggregateOutputType | null
    _max: StorageUsageMaxAggregateOutputType | null
  }

  type GetStorageUsageGroupByPayload<T extends StorageUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StorageUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StorageUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StorageUsageGroupByOutputType[P]>
            : GetScalarType<T[P], StorageUsageGroupByOutputType[P]>
        }
      >
    >


  export type StorageUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bucketId?: boolean
    totalSize?: boolean
    objectCount?: boolean
    quota?: boolean
    timestamp?: boolean
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storageUsage"]>

  export type StorageUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bucketId?: boolean
    totalSize?: boolean
    objectCount?: boolean
    quota?: boolean
    timestamp?: boolean
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storageUsage"]>

  export type StorageUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bucketId?: boolean
    totalSize?: boolean
    objectCount?: boolean
    quota?: boolean
    timestamp?: boolean
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storageUsage"]>

  export type StorageUsageSelectScalar = {
    id?: boolean
    bucketId?: boolean
    totalSize?: boolean
    objectCount?: boolean
    quota?: boolean
    timestamp?: boolean
  }

  export type StorageUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bucketId" | "totalSize" | "objectCount" | "quota" | "timestamp", ExtArgs["result"]["storageUsage"]>
  export type StorageUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }
  export type StorageUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }
  export type StorageUsageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bucket?: boolean | StorageBucketDefaultArgs<ExtArgs>
  }

  export type $StorageUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StorageUsage"
    objects: {
      bucket: Prisma.$StorageBucketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bucketId: string
      totalSize: bigint
      objectCount: number
      quota: bigint
      timestamp: Date
    }, ExtArgs["result"]["storageUsage"]>
    composites: {}
  }

  type StorageUsageGetPayload<S extends boolean | null | undefined | StorageUsageDefaultArgs> = $Result.GetResult<Prisma.$StorageUsagePayload, S>

  type StorageUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StorageUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StorageUsageCountAggregateInputType | true
    }

  export interface StorageUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StorageUsage'], meta: { name: 'StorageUsage' } }
    /**
     * Find zero or one StorageUsage that matches the filter.
     * @param {StorageUsageFindUniqueArgs} args - Arguments to find a StorageUsage
     * @example
     * // Get one StorageUsage
     * const storageUsage = await prisma.storageUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StorageUsageFindUniqueArgs>(args: SelectSubset<T, StorageUsageFindUniqueArgs<ExtArgs>>): Prisma__StorageUsageClient<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StorageUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StorageUsageFindUniqueOrThrowArgs} args - Arguments to find a StorageUsage
     * @example
     * // Get one StorageUsage
     * const storageUsage = await prisma.storageUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StorageUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, StorageUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StorageUsageClient<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StorageUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUsageFindFirstArgs} args - Arguments to find a StorageUsage
     * @example
     * // Get one StorageUsage
     * const storageUsage = await prisma.storageUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StorageUsageFindFirstArgs>(args?: SelectSubset<T, StorageUsageFindFirstArgs<ExtArgs>>): Prisma__StorageUsageClient<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StorageUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUsageFindFirstOrThrowArgs} args - Arguments to find a StorageUsage
     * @example
     * // Get one StorageUsage
     * const storageUsage = await prisma.storageUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StorageUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, StorageUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__StorageUsageClient<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StorageUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StorageUsages
     * const storageUsages = await prisma.storageUsage.findMany()
     * 
     * // Get first 10 StorageUsages
     * const storageUsages = await prisma.storageUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storageUsageWithIdOnly = await prisma.storageUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StorageUsageFindManyArgs>(args?: SelectSubset<T, StorageUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StorageUsage.
     * @param {StorageUsageCreateArgs} args - Arguments to create a StorageUsage.
     * @example
     * // Create one StorageUsage
     * const StorageUsage = await prisma.storageUsage.create({
     *   data: {
     *     // ... data to create a StorageUsage
     *   }
     * })
     * 
     */
    create<T extends StorageUsageCreateArgs>(args: SelectSubset<T, StorageUsageCreateArgs<ExtArgs>>): Prisma__StorageUsageClient<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StorageUsages.
     * @param {StorageUsageCreateManyArgs} args - Arguments to create many StorageUsages.
     * @example
     * // Create many StorageUsages
     * const storageUsage = await prisma.storageUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StorageUsageCreateManyArgs>(args?: SelectSubset<T, StorageUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StorageUsages and returns the data saved in the database.
     * @param {StorageUsageCreateManyAndReturnArgs} args - Arguments to create many StorageUsages.
     * @example
     * // Create many StorageUsages
     * const storageUsage = await prisma.storageUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StorageUsages and only return the `id`
     * const storageUsageWithIdOnly = await prisma.storageUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StorageUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, StorageUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StorageUsage.
     * @param {StorageUsageDeleteArgs} args - Arguments to delete one StorageUsage.
     * @example
     * // Delete one StorageUsage
     * const StorageUsage = await prisma.storageUsage.delete({
     *   where: {
     *     // ... filter to delete one StorageUsage
     *   }
     * })
     * 
     */
    delete<T extends StorageUsageDeleteArgs>(args: SelectSubset<T, StorageUsageDeleteArgs<ExtArgs>>): Prisma__StorageUsageClient<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StorageUsage.
     * @param {StorageUsageUpdateArgs} args - Arguments to update one StorageUsage.
     * @example
     * // Update one StorageUsage
     * const storageUsage = await prisma.storageUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StorageUsageUpdateArgs>(args: SelectSubset<T, StorageUsageUpdateArgs<ExtArgs>>): Prisma__StorageUsageClient<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StorageUsages.
     * @param {StorageUsageDeleteManyArgs} args - Arguments to filter StorageUsages to delete.
     * @example
     * // Delete a few StorageUsages
     * const { count } = await prisma.storageUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StorageUsageDeleteManyArgs>(args?: SelectSubset<T, StorageUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StorageUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StorageUsages
     * const storageUsage = await prisma.storageUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StorageUsageUpdateManyArgs>(args: SelectSubset<T, StorageUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StorageUsages and returns the data updated in the database.
     * @param {StorageUsageUpdateManyAndReturnArgs} args - Arguments to update many StorageUsages.
     * @example
     * // Update many StorageUsages
     * const storageUsage = await prisma.storageUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StorageUsages and only return the `id`
     * const storageUsageWithIdOnly = await prisma.storageUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StorageUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, StorageUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StorageUsage.
     * @param {StorageUsageUpsertArgs} args - Arguments to update or create a StorageUsage.
     * @example
     * // Update or create a StorageUsage
     * const storageUsage = await prisma.storageUsage.upsert({
     *   create: {
     *     // ... data to create a StorageUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StorageUsage we want to update
     *   }
     * })
     */
    upsert<T extends StorageUsageUpsertArgs>(args: SelectSubset<T, StorageUsageUpsertArgs<ExtArgs>>): Prisma__StorageUsageClient<$Result.GetResult<Prisma.$StorageUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StorageUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUsageCountArgs} args - Arguments to filter StorageUsages to count.
     * @example
     * // Count the number of StorageUsages
     * const count = await prisma.storageUsage.count({
     *   where: {
     *     // ... the filter for the StorageUsages we want to count
     *   }
     * })
    **/
    count<T extends StorageUsageCountArgs>(
      args?: Subset<T, StorageUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StorageUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StorageUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StorageUsageAggregateArgs>(args: Subset<T, StorageUsageAggregateArgs>): Prisma.PrismaPromise<GetStorageUsageAggregateType<T>>

    /**
     * Group by StorageUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StorageUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StorageUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StorageUsageGroupByArgs['orderBy'] }
        : { orderBy?: StorageUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StorageUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStorageUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StorageUsage model
   */
  readonly fields: StorageUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StorageUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StorageUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bucket<T extends StorageBucketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StorageBucketDefaultArgs<ExtArgs>>): Prisma__StorageBucketClient<$Result.GetResult<Prisma.$StorageBucketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StorageUsage model
   */
  interface StorageUsageFieldRefs {
    readonly id: FieldRef<"StorageUsage", 'String'>
    readonly bucketId: FieldRef<"StorageUsage", 'String'>
    readonly totalSize: FieldRef<"StorageUsage", 'BigInt'>
    readonly objectCount: FieldRef<"StorageUsage", 'Int'>
    readonly quota: FieldRef<"StorageUsage", 'BigInt'>
    readonly timestamp: FieldRef<"StorageUsage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StorageUsage findUnique
   */
  export type StorageUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
    /**
     * Filter, which StorageUsage to fetch.
     */
    where: StorageUsageWhereUniqueInput
  }

  /**
   * StorageUsage findUniqueOrThrow
   */
  export type StorageUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
    /**
     * Filter, which StorageUsage to fetch.
     */
    where: StorageUsageWhereUniqueInput
  }

  /**
   * StorageUsage findFirst
   */
  export type StorageUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
    /**
     * Filter, which StorageUsage to fetch.
     */
    where?: StorageUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageUsages to fetch.
     */
    orderBy?: StorageUsageOrderByWithRelationInput | StorageUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StorageUsages.
     */
    cursor?: StorageUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StorageUsages.
     */
    distinct?: StorageUsageScalarFieldEnum | StorageUsageScalarFieldEnum[]
  }

  /**
   * StorageUsage findFirstOrThrow
   */
  export type StorageUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
    /**
     * Filter, which StorageUsage to fetch.
     */
    where?: StorageUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageUsages to fetch.
     */
    orderBy?: StorageUsageOrderByWithRelationInput | StorageUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StorageUsages.
     */
    cursor?: StorageUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StorageUsages.
     */
    distinct?: StorageUsageScalarFieldEnum | StorageUsageScalarFieldEnum[]
  }

  /**
   * StorageUsage findMany
   */
  export type StorageUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
    /**
     * Filter, which StorageUsages to fetch.
     */
    where?: StorageUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StorageUsages to fetch.
     */
    orderBy?: StorageUsageOrderByWithRelationInput | StorageUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StorageUsages.
     */
    cursor?: StorageUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StorageUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StorageUsages.
     */
    skip?: number
    distinct?: StorageUsageScalarFieldEnum | StorageUsageScalarFieldEnum[]
  }

  /**
   * StorageUsage create
   */
  export type StorageUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a StorageUsage.
     */
    data: XOR<StorageUsageCreateInput, StorageUsageUncheckedCreateInput>
  }

  /**
   * StorageUsage createMany
   */
  export type StorageUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StorageUsages.
     */
    data: StorageUsageCreateManyInput | StorageUsageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StorageUsage createManyAndReturn
   */
  export type StorageUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * The data used to create many StorageUsages.
     */
    data: StorageUsageCreateManyInput | StorageUsageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StorageUsage update
   */
  export type StorageUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a StorageUsage.
     */
    data: XOR<StorageUsageUpdateInput, StorageUsageUncheckedUpdateInput>
    /**
     * Choose, which StorageUsage to update.
     */
    where: StorageUsageWhereUniqueInput
  }

  /**
   * StorageUsage updateMany
   */
  export type StorageUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StorageUsages.
     */
    data: XOR<StorageUsageUpdateManyMutationInput, StorageUsageUncheckedUpdateManyInput>
    /**
     * Filter which StorageUsages to update
     */
    where?: StorageUsageWhereInput
    /**
     * Limit how many StorageUsages to update.
     */
    limit?: number
  }

  /**
   * StorageUsage updateManyAndReturn
   */
  export type StorageUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * The data used to update StorageUsages.
     */
    data: XOR<StorageUsageUpdateManyMutationInput, StorageUsageUncheckedUpdateManyInput>
    /**
     * Filter which StorageUsages to update
     */
    where?: StorageUsageWhereInput
    /**
     * Limit how many StorageUsages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StorageUsage upsert
   */
  export type StorageUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the StorageUsage to update in case it exists.
     */
    where: StorageUsageWhereUniqueInput
    /**
     * In case the StorageUsage found by the `where` argument doesn't exist, create a new StorageUsage with this data.
     */
    create: XOR<StorageUsageCreateInput, StorageUsageUncheckedCreateInput>
    /**
     * In case the StorageUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StorageUsageUpdateInput, StorageUsageUncheckedUpdateInput>
  }

  /**
   * StorageUsage delete
   */
  export type StorageUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
    /**
     * Filter which StorageUsage to delete.
     */
    where: StorageUsageWhereUniqueInput
  }

  /**
   * StorageUsage deleteMany
   */
  export type StorageUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StorageUsages to delete
     */
    where?: StorageUsageWhereInput
    /**
     * Limit how many StorageUsages to delete.
     */
    limit?: number
  }

  /**
   * StorageUsage without action
   */
  export type StorageUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StorageUsage
     */
    select?: StorageUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StorageUsage
     */
    omit?: StorageUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StorageUsageInclude<ExtArgs> | null
  }


  /**
   * Model Container
   */

  export type AggregateContainer = {
    _count: ContainerCountAggregateOutputType | null
    _min: ContainerMinAggregateOutputType | null
    _max: ContainerMaxAggregateOutputType | null
  }

  export type ContainerMinAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    status: $Enums.ContainerStatus | null
    restartPolicy: string | null
    networkMode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    startedAt: Date | null
    stoppedAt: Date | null
  }

  export type ContainerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    status: $Enums.ContainerStatus | null
    restartPolicy: string | null
    networkMode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    startedAt: Date | null
    stoppedAt: Date | null
  }

  export type ContainerCountAggregateOutputType = {
    id: number
    name: number
    image: number
    status: number
    command: number
    environment: number
    ports: number
    volumes: number
    labels: number
    restartPolicy: number
    networkMode: number
    createdAt: number
    updatedAt: number
    startedAt: number
    stoppedAt: number
    _all: number
  }


  export type ContainerMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    status?: true
    restartPolicy?: true
    networkMode?: true
    createdAt?: true
    updatedAt?: true
    startedAt?: true
    stoppedAt?: true
  }

  export type ContainerMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    status?: true
    restartPolicy?: true
    networkMode?: true
    createdAt?: true
    updatedAt?: true
    startedAt?: true
    stoppedAt?: true
  }

  export type ContainerCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    status?: true
    command?: true
    environment?: true
    ports?: true
    volumes?: true
    labels?: true
    restartPolicy?: true
    networkMode?: true
    createdAt?: true
    updatedAt?: true
    startedAt?: true
    stoppedAt?: true
    _all?: true
  }

  export type ContainerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Container to aggregate.
     */
    where?: ContainerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Containers to fetch.
     */
    orderBy?: ContainerOrderByWithRelationInput | ContainerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContainerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Containers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Containers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Containers
    **/
    _count?: true | ContainerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContainerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContainerMaxAggregateInputType
  }

  export type GetContainerAggregateType<T extends ContainerAggregateArgs> = {
        [P in keyof T & keyof AggregateContainer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContainer[P]>
      : GetScalarType<T[P], AggregateContainer[P]>
  }




  export type ContainerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContainerWhereInput
    orderBy?: ContainerOrderByWithAggregationInput | ContainerOrderByWithAggregationInput[]
    by: ContainerScalarFieldEnum[] | ContainerScalarFieldEnum
    having?: ContainerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContainerCountAggregateInputType | true
    _min?: ContainerMinAggregateInputType
    _max?: ContainerMaxAggregateInputType
  }

  export type ContainerGroupByOutputType = {
    id: string
    name: string
    image: string
    status: $Enums.ContainerStatus
    command: JsonValue | null
    environment: JsonValue | null
    ports: JsonValue | null
    volumes: JsonValue | null
    labels: JsonValue | null
    restartPolicy: string
    networkMode: string
    createdAt: Date
    updatedAt: Date
    startedAt: Date | null
    stoppedAt: Date | null
    _count: ContainerCountAggregateOutputType | null
    _min: ContainerMinAggregateOutputType | null
    _max: ContainerMaxAggregateOutputType | null
  }

  type GetContainerGroupByPayload<T extends ContainerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContainerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContainerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContainerGroupByOutputType[P]>
            : GetScalarType<T[P], ContainerGroupByOutputType[P]>
        }
      >
    >


  export type ContainerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    status?: boolean
    command?: boolean
    environment?: boolean
    ports?: boolean
    volumes?: boolean
    labels?: boolean
    restartPolicy?: boolean
    networkMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startedAt?: boolean
    stoppedAt?: boolean
    stats?: boolean | Container$statsArgs<ExtArgs>
    logs?: boolean | Container$logsArgs<ExtArgs>
    _count?: boolean | ContainerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["container"]>

  export type ContainerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    status?: boolean
    command?: boolean
    environment?: boolean
    ports?: boolean
    volumes?: boolean
    labels?: boolean
    restartPolicy?: boolean
    networkMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startedAt?: boolean
    stoppedAt?: boolean
  }, ExtArgs["result"]["container"]>

  export type ContainerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    status?: boolean
    command?: boolean
    environment?: boolean
    ports?: boolean
    volumes?: boolean
    labels?: boolean
    restartPolicy?: boolean
    networkMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startedAt?: boolean
    stoppedAt?: boolean
  }, ExtArgs["result"]["container"]>

  export type ContainerSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    status?: boolean
    command?: boolean
    environment?: boolean
    ports?: boolean
    volumes?: boolean
    labels?: boolean
    restartPolicy?: boolean
    networkMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startedAt?: boolean
    stoppedAt?: boolean
  }

  export type ContainerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "image" | "status" | "command" | "environment" | "ports" | "volumes" | "labels" | "restartPolicy" | "networkMode" | "createdAt" | "updatedAt" | "startedAt" | "stoppedAt", ExtArgs["result"]["container"]>
  export type ContainerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stats?: boolean | Container$statsArgs<ExtArgs>
    logs?: boolean | Container$logsArgs<ExtArgs>
    _count?: boolean | ContainerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContainerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ContainerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContainerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Container"
    objects: {
      stats: Prisma.$ContainerStatsPayload<ExtArgs>[]
      logs: Prisma.$ContainerLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      image: string
      status: $Enums.ContainerStatus
      command: Prisma.JsonValue | null
      environment: Prisma.JsonValue | null
      ports: Prisma.JsonValue | null
      volumes: Prisma.JsonValue | null
      labels: Prisma.JsonValue | null
      restartPolicy: string
      networkMode: string
      createdAt: Date
      updatedAt: Date
      startedAt: Date | null
      stoppedAt: Date | null
    }, ExtArgs["result"]["container"]>
    composites: {}
  }

  type ContainerGetPayload<S extends boolean | null | undefined | ContainerDefaultArgs> = $Result.GetResult<Prisma.$ContainerPayload, S>

  type ContainerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContainerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContainerCountAggregateInputType | true
    }

  export interface ContainerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Container'], meta: { name: 'Container' } }
    /**
     * Find zero or one Container that matches the filter.
     * @param {ContainerFindUniqueArgs} args - Arguments to find a Container
     * @example
     * // Get one Container
     * const container = await prisma.container.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContainerFindUniqueArgs>(args: SelectSubset<T, ContainerFindUniqueArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Container that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContainerFindUniqueOrThrowArgs} args - Arguments to find a Container
     * @example
     * // Get one Container
     * const container = await prisma.container.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContainerFindUniqueOrThrowArgs>(args: SelectSubset<T, ContainerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Container that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerFindFirstArgs} args - Arguments to find a Container
     * @example
     * // Get one Container
     * const container = await prisma.container.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContainerFindFirstArgs>(args?: SelectSubset<T, ContainerFindFirstArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Container that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerFindFirstOrThrowArgs} args - Arguments to find a Container
     * @example
     * // Get one Container
     * const container = await prisma.container.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContainerFindFirstOrThrowArgs>(args?: SelectSubset<T, ContainerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Containers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Containers
     * const containers = await prisma.container.findMany()
     * 
     * // Get first 10 Containers
     * const containers = await prisma.container.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const containerWithIdOnly = await prisma.container.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContainerFindManyArgs>(args?: SelectSubset<T, ContainerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Container.
     * @param {ContainerCreateArgs} args - Arguments to create a Container.
     * @example
     * // Create one Container
     * const Container = await prisma.container.create({
     *   data: {
     *     // ... data to create a Container
     *   }
     * })
     * 
     */
    create<T extends ContainerCreateArgs>(args: SelectSubset<T, ContainerCreateArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Containers.
     * @param {ContainerCreateManyArgs} args - Arguments to create many Containers.
     * @example
     * // Create many Containers
     * const container = await prisma.container.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContainerCreateManyArgs>(args?: SelectSubset<T, ContainerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Containers and returns the data saved in the database.
     * @param {ContainerCreateManyAndReturnArgs} args - Arguments to create many Containers.
     * @example
     * // Create many Containers
     * const container = await prisma.container.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Containers and only return the `id`
     * const containerWithIdOnly = await prisma.container.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContainerCreateManyAndReturnArgs>(args?: SelectSubset<T, ContainerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Container.
     * @param {ContainerDeleteArgs} args - Arguments to delete one Container.
     * @example
     * // Delete one Container
     * const Container = await prisma.container.delete({
     *   where: {
     *     // ... filter to delete one Container
     *   }
     * })
     * 
     */
    delete<T extends ContainerDeleteArgs>(args: SelectSubset<T, ContainerDeleteArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Container.
     * @param {ContainerUpdateArgs} args - Arguments to update one Container.
     * @example
     * // Update one Container
     * const container = await prisma.container.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContainerUpdateArgs>(args: SelectSubset<T, ContainerUpdateArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Containers.
     * @param {ContainerDeleteManyArgs} args - Arguments to filter Containers to delete.
     * @example
     * // Delete a few Containers
     * const { count } = await prisma.container.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContainerDeleteManyArgs>(args?: SelectSubset<T, ContainerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Containers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Containers
     * const container = await prisma.container.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContainerUpdateManyArgs>(args: SelectSubset<T, ContainerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Containers and returns the data updated in the database.
     * @param {ContainerUpdateManyAndReturnArgs} args - Arguments to update many Containers.
     * @example
     * // Update many Containers
     * const container = await prisma.container.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Containers and only return the `id`
     * const containerWithIdOnly = await prisma.container.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContainerUpdateManyAndReturnArgs>(args: SelectSubset<T, ContainerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Container.
     * @param {ContainerUpsertArgs} args - Arguments to update or create a Container.
     * @example
     * // Update or create a Container
     * const container = await prisma.container.upsert({
     *   create: {
     *     // ... data to create a Container
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Container we want to update
     *   }
     * })
     */
    upsert<T extends ContainerUpsertArgs>(args: SelectSubset<T, ContainerUpsertArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Containers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerCountArgs} args - Arguments to filter Containers to count.
     * @example
     * // Count the number of Containers
     * const count = await prisma.container.count({
     *   where: {
     *     // ... the filter for the Containers we want to count
     *   }
     * })
    **/
    count<T extends ContainerCountArgs>(
      args?: Subset<T, ContainerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContainerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Container.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContainerAggregateArgs>(args: Subset<T, ContainerAggregateArgs>): Prisma.PrismaPromise<GetContainerAggregateType<T>>

    /**
     * Group by Container.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContainerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContainerGroupByArgs['orderBy'] }
        : { orderBy?: ContainerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContainerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContainerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Container model
   */
  readonly fields: ContainerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Container.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContainerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stats<T extends Container$statsArgs<ExtArgs> = {}>(args?: Subset<T, Container$statsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends Container$logsArgs<ExtArgs> = {}>(args?: Subset<T, Container$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Container model
   */
  interface ContainerFieldRefs {
    readonly id: FieldRef<"Container", 'String'>
    readonly name: FieldRef<"Container", 'String'>
    readonly image: FieldRef<"Container", 'String'>
    readonly status: FieldRef<"Container", 'ContainerStatus'>
    readonly command: FieldRef<"Container", 'Json'>
    readonly environment: FieldRef<"Container", 'Json'>
    readonly ports: FieldRef<"Container", 'Json'>
    readonly volumes: FieldRef<"Container", 'Json'>
    readonly labels: FieldRef<"Container", 'Json'>
    readonly restartPolicy: FieldRef<"Container", 'String'>
    readonly networkMode: FieldRef<"Container", 'String'>
    readonly createdAt: FieldRef<"Container", 'DateTime'>
    readonly updatedAt: FieldRef<"Container", 'DateTime'>
    readonly startedAt: FieldRef<"Container", 'DateTime'>
    readonly stoppedAt: FieldRef<"Container", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Container findUnique
   */
  export type ContainerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerInclude<ExtArgs> | null
    /**
     * Filter, which Container to fetch.
     */
    where: ContainerWhereUniqueInput
  }

  /**
   * Container findUniqueOrThrow
   */
  export type ContainerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerInclude<ExtArgs> | null
    /**
     * Filter, which Container to fetch.
     */
    where: ContainerWhereUniqueInput
  }

  /**
   * Container findFirst
   */
  export type ContainerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerInclude<ExtArgs> | null
    /**
     * Filter, which Container to fetch.
     */
    where?: ContainerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Containers to fetch.
     */
    orderBy?: ContainerOrderByWithRelationInput | ContainerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Containers.
     */
    cursor?: ContainerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Containers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Containers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Containers.
     */
    distinct?: ContainerScalarFieldEnum | ContainerScalarFieldEnum[]
  }

  /**
   * Container findFirstOrThrow
   */
  export type ContainerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerInclude<ExtArgs> | null
    /**
     * Filter, which Container to fetch.
     */
    where?: ContainerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Containers to fetch.
     */
    orderBy?: ContainerOrderByWithRelationInput | ContainerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Containers.
     */
    cursor?: ContainerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Containers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Containers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Containers.
     */
    distinct?: ContainerScalarFieldEnum | ContainerScalarFieldEnum[]
  }

  /**
   * Container findMany
   */
  export type ContainerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerInclude<ExtArgs> | null
    /**
     * Filter, which Containers to fetch.
     */
    where?: ContainerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Containers to fetch.
     */
    orderBy?: ContainerOrderByWithRelationInput | ContainerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Containers.
     */
    cursor?: ContainerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Containers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Containers.
     */
    skip?: number
    distinct?: ContainerScalarFieldEnum | ContainerScalarFieldEnum[]
  }

  /**
   * Container create
   */
  export type ContainerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerInclude<ExtArgs> | null
    /**
     * The data needed to create a Container.
     */
    data: XOR<ContainerCreateInput, ContainerUncheckedCreateInput>
  }

  /**
   * Container createMany
   */
  export type ContainerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Containers.
     */
    data: ContainerCreateManyInput | ContainerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Container createManyAndReturn
   */
  export type ContainerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * The data used to create many Containers.
     */
    data: ContainerCreateManyInput | ContainerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Container update
   */
  export type ContainerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerInclude<ExtArgs> | null
    /**
     * The data needed to update a Container.
     */
    data: XOR<ContainerUpdateInput, ContainerUncheckedUpdateInput>
    /**
     * Choose, which Container to update.
     */
    where: ContainerWhereUniqueInput
  }

  /**
   * Container updateMany
   */
  export type ContainerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Containers.
     */
    data: XOR<ContainerUpdateManyMutationInput, ContainerUncheckedUpdateManyInput>
    /**
     * Filter which Containers to update
     */
    where?: ContainerWhereInput
    /**
     * Limit how many Containers to update.
     */
    limit?: number
  }

  /**
   * Container updateManyAndReturn
   */
  export type ContainerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * The data used to update Containers.
     */
    data: XOR<ContainerUpdateManyMutationInput, ContainerUncheckedUpdateManyInput>
    /**
     * Filter which Containers to update
     */
    where?: ContainerWhereInput
    /**
     * Limit how many Containers to update.
     */
    limit?: number
  }

  /**
   * Container upsert
   */
  export type ContainerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerInclude<ExtArgs> | null
    /**
     * The filter to search for the Container to update in case it exists.
     */
    where: ContainerWhereUniqueInput
    /**
     * In case the Container found by the `where` argument doesn't exist, create a new Container with this data.
     */
    create: XOR<ContainerCreateInput, ContainerUncheckedCreateInput>
    /**
     * In case the Container was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContainerUpdateInput, ContainerUncheckedUpdateInput>
  }

  /**
   * Container delete
   */
  export type ContainerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerInclude<ExtArgs> | null
    /**
     * Filter which Container to delete.
     */
    where: ContainerWhereUniqueInput
  }

  /**
   * Container deleteMany
   */
  export type ContainerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Containers to delete
     */
    where?: ContainerWhereInput
    /**
     * Limit how many Containers to delete.
     */
    limit?: number
  }

  /**
   * Container.stats
   */
  export type Container$statsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
    where?: ContainerStatsWhereInput
    orderBy?: ContainerStatsOrderByWithRelationInput | ContainerStatsOrderByWithRelationInput[]
    cursor?: ContainerStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContainerStatsScalarFieldEnum | ContainerStatsScalarFieldEnum[]
  }

  /**
   * Container.logs
   */
  export type Container$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
    where?: ContainerLogWhereInput
    orderBy?: ContainerLogOrderByWithRelationInput | ContainerLogOrderByWithRelationInput[]
    cursor?: ContainerLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContainerLogScalarFieldEnum | ContainerLogScalarFieldEnum[]
  }

  /**
   * Container without action
   */
  export type ContainerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Container
     */
    omit?: ContainerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerInclude<ExtArgs> | null
  }


  /**
   * Model ContainerStats
   */

  export type AggregateContainerStats = {
    _count: ContainerStatsCountAggregateOutputType | null
    _avg: ContainerStatsAvgAggregateOutputType | null
    _sum: ContainerStatsSumAggregateOutputType | null
    _min: ContainerStatsMinAggregateOutputType | null
    _max: ContainerStatsMaxAggregateOutputType | null
  }

  export type ContainerStatsAvgAggregateOutputType = {
    cpuPercent: number | null
    memoryUsage: number | null
    memoryLimit: number | null
    networkRx: number | null
    networkTx: number | null
    blockRead: number | null
    blockWrite: number | null
  }

  export type ContainerStatsSumAggregateOutputType = {
    cpuPercent: number | null
    memoryUsage: bigint | null
    memoryLimit: bigint | null
    networkRx: bigint | null
    networkTx: bigint | null
    blockRead: bigint | null
    blockWrite: bigint | null
  }

  export type ContainerStatsMinAggregateOutputType = {
    id: string | null
    containerId: string | null
    cpuPercent: number | null
    memoryUsage: bigint | null
    memoryLimit: bigint | null
    networkRx: bigint | null
    networkTx: bigint | null
    blockRead: bigint | null
    blockWrite: bigint | null
    timestamp: Date | null
  }

  export type ContainerStatsMaxAggregateOutputType = {
    id: string | null
    containerId: string | null
    cpuPercent: number | null
    memoryUsage: bigint | null
    memoryLimit: bigint | null
    networkRx: bigint | null
    networkTx: bigint | null
    blockRead: bigint | null
    blockWrite: bigint | null
    timestamp: Date | null
  }

  export type ContainerStatsCountAggregateOutputType = {
    id: number
    containerId: number
    cpuPercent: number
    memoryUsage: number
    memoryLimit: number
    networkRx: number
    networkTx: number
    blockRead: number
    blockWrite: number
    timestamp: number
    _all: number
  }


  export type ContainerStatsAvgAggregateInputType = {
    cpuPercent?: true
    memoryUsage?: true
    memoryLimit?: true
    networkRx?: true
    networkTx?: true
    blockRead?: true
    blockWrite?: true
  }

  export type ContainerStatsSumAggregateInputType = {
    cpuPercent?: true
    memoryUsage?: true
    memoryLimit?: true
    networkRx?: true
    networkTx?: true
    blockRead?: true
    blockWrite?: true
  }

  export type ContainerStatsMinAggregateInputType = {
    id?: true
    containerId?: true
    cpuPercent?: true
    memoryUsage?: true
    memoryLimit?: true
    networkRx?: true
    networkTx?: true
    blockRead?: true
    blockWrite?: true
    timestamp?: true
  }

  export type ContainerStatsMaxAggregateInputType = {
    id?: true
    containerId?: true
    cpuPercent?: true
    memoryUsage?: true
    memoryLimit?: true
    networkRx?: true
    networkTx?: true
    blockRead?: true
    blockWrite?: true
    timestamp?: true
  }

  export type ContainerStatsCountAggregateInputType = {
    id?: true
    containerId?: true
    cpuPercent?: true
    memoryUsage?: true
    memoryLimit?: true
    networkRx?: true
    networkTx?: true
    blockRead?: true
    blockWrite?: true
    timestamp?: true
    _all?: true
  }

  export type ContainerStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContainerStats to aggregate.
     */
    where?: ContainerStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContainerStats to fetch.
     */
    orderBy?: ContainerStatsOrderByWithRelationInput | ContainerStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContainerStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContainerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContainerStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContainerStats
    **/
    _count?: true | ContainerStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContainerStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContainerStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContainerStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContainerStatsMaxAggregateInputType
  }

  export type GetContainerStatsAggregateType<T extends ContainerStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateContainerStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContainerStats[P]>
      : GetScalarType<T[P], AggregateContainerStats[P]>
  }




  export type ContainerStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContainerStatsWhereInput
    orderBy?: ContainerStatsOrderByWithAggregationInput | ContainerStatsOrderByWithAggregationInput[]
    by: ContainerStatsScalarFieldEnum[] | ContainerStatsScalarFieldEnum
    having?: ContainerStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContainerStatsCountAggregateInputType | true
    _avg?: ContainerStatsAvgAggregateInputType
    _sum?: ContainerStatsSumAggregateInputType
    _min?: ContainerStatsMinAggregateInputType
    _max?: ContainerStatsMaxAggregateInputType
  }

  export type ContainerStatsGroupByOutputType = {
    id: string
    containerId: string
    cpuPercent: number
    memoryUsage: bigint
    memoryLimit: bigint
    networkRx: bigint
    networkTx: bigint
    blockRead: bigint
    blockWrite: bigint
    timestamp: Date
    _count: ContainerStatsCountAggregateOutputType | null
    _avg: ContainerStatsAvgAggregateOutputType | null
    _sum: ContainerStatsSumAggregateOutputType | null
    _min: ContainerStatsMinAggregateOutputType | null
    _max: ContainerStatsMaxAggregateOutputType | null
  }

  type GetContainerStatsGroupByPayload<T extends ContainerStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContainerStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContainerStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContainerStatsGroupByOutputType[P]>
            : GetScalarType<T[P], ContainerStatsGroupByOutputType[P]>
        }
      >
    >


  export type ContainerStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    containerId?: boolean
    cpuPercent?: boolean
    memoryUsage?: boolean
    memoryLimit?: boolean
    networkRx?: boolean
    networkTx?: boolean
    blockRead?: boolean
    blockWrite?: boolean
    timestamp?: boolean
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["containerStats"]>

  export type ContainerStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    containerId?: boolean
    cpuPercent?: boolean
    memoryUsage?: boolean
    memoryLimit?: boolean
    networkRx?: boolean
    networkTx?: boolean
    blockRead?: boolean
    blockWrite?: boolean
    timestamp?: boolean
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["containerStats"]>

  export type ContainerStatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    containerId?: boolean
    cpuPercent?: boolean
    memoryUsage?: boolean
    memoryLimit?: boolean
    networkRx?: boolean
    networkTx?: boolean
    blockRead?: boolean
    blockWrite?: boolean
    timestamp?: boolean
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["containerStats"]>

  export type ContainerStatsSelectScalar = {
    id?: boolean
    containerId?: boolean
    cpuPercent?: boolean
    memoryUsage?: boolean
    memoryLimit?: boolean
    networkRx?: boolean
    networkTx?: boolean
    blockRead?: boolean
    blockWrite?: boolean
    timestamp?: boolean
  }

  export type ContainerStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "containerId" | "cpuPercent" | "memoryUsage" | "memoryLimit" | "networkRx" | "networkTx" | "blockRead" | "blockWrite" | "timestamp", ExtArgs["result"]["containerStats"]>
  export type ContainerStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }
  export type ContainerStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }
  export type ContainerStatsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }

  export type $ContainerStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContainerStats"
    objects: {
      container: Prisma.$ContainerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      containerId: string
      cpuPercent: number
      memoryUsage: bigint
      memoryLimit: bigint
      networkRx: bigint
      networkTx: bigint
      blockRead: bigint
      blockWrite: bigint
      timestamp: Date
    }, ExtArgs["result"]["containerStats"]>
    composites: {}
  }

  type ContainerStatsGetPayload<S extends boolean | null | undefined | ContainerStatsDefaultArgs> = $Result.GetResult<Prisma.$ContainerStatsPayload, S>

  type ContainerStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContainerStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContainerStatsCountAggregateInputType | true
    }

  export interface ContainerStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContainerStats'], meta: { name: 'ContainerStats' } }
    /**
     * Find zero or one ContainerStats that matches the filter.
     * @param {ContainerStatsFindUniqueArgs} args - Arguments to find a ContainerStats
     * @example
     * // Get one ContainerStats
     * const containerStats = await prisma.containerStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContainerStatsFindUniqueArgs>(args: SelectSubset<T, ContainerStatsFindUniqueArgs<ExtArgs>>): Prisma__ContainerStatsClient<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContainerStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContainerStatsFindUniqueOrThrowArgs} args - Arguments to find a ContainerStats
     * @example
     * // Get one ContainerStats
     * const containerStats = await prisma.containerStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContainerStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, ContainerStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContainerStatsClient<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContainerStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerStatsFindFirstArgs} args - Arguments to find a ContainerStats
     * @example
     * // Get one ContainerStats
     * const containerStats = await prisma.containerStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContainerStatsFindFirstArgs>(args?: SelectSubset<T, ContainerStatsFindFirstArgs<ExtArgs>>): Prisma__ContainerStatsClient<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContainerStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerStatsFindFirstOrThrowArgs} args - Arguments to find a ContainerStats
     * @example
     * // Get one ContainerStats
     * const containerStats = await prisma.containerStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContainerStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, ContainerStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContainerStatsClient<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContainerStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContainerStats
     * const containerStats = await prisma.containerStats.findMany()
     * 
     * // Get first 10 ContainerStats
     * const containerStats = await prisma.containerStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const containerStatsWithIdOnly = await prisma.containerStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContainerStatsFindManyArgs>(args?: SelectSubset<T, ContainerStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContainerStats.
     * @param {ContainerStatsCreateArgs} args - Arguments to create a ContainerStats.
     * @example
     * // Create one ContainerStats
     * const ContainerStats = await prisma.containerStats.create({
     *   data: {
     *     // ... data to create a ContainerStats
     *   }
     * })
     * 
     */
    create<T extends ContainerStatsCreateArgs>(args: SelectSubset<T, ContainerStatsCreateArgs<ExtArgs>>): Prisma__ContainerStatsClient<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContainerStats.
     * @param {ContainerStatsCreateManyArgs} args - Arguments to create many ContainerStats.
     * @example
     * // Create many ContainerStats
     * const containerStats = await prisma.containerStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContainerStatsCreateManyArgs>(args?: SelectSubset<T, ContainerStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContainerStats and returns the data saved in the database.
     * @param {ContainerStatsCreateManyAndReturnArgs} args - Arguments to create many ContainerStats.
     * @example
     * // Create many ContainerStats
     * const containerStats = await prisma.containerStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContainerStats and only return the `id`
     * const containerStatsWithIdOnly = await prisma.containerStats.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContainerStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, ContainerStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContainerStats.
     * @param {ContainerStatsDeleteArgs} args - Arguments to delete one ContainerStats.
     * @example
     * // Delete one ContainerStats
     * const ContainerStats = await prisma.containerStats.delete({
     *   where: {
     *     // ... filter to delete one ContainerStats
     *   }
     * })
     * 
     */
    delete<T extends ContainerStatsDeleteArgs>(args: SelectSubset<T, ContainerStatsDeleteArgs<ExtArgs>>): Prisma__ContainerStatsClient<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContainerStats.
     * @param {ContainerStatsUpdateArgs} args - Arguments to update one ContainerStats.
     * @example
     * // Update one ContainerStats
     * const containerStats = await prisma.containerStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContainerStatsUpdateArgs>(args: SelectSubset<T, ContainerStatsUpdateArgs<ExtArgs>>): Prisma__ContainerStatsClient<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContainerStats.
     * @param {ContainerStatsDeleteManyArgs} args - Arguments to filter ContainerStats to delete.
     * @example
     * // Delete a few ContainerStats
     * const { count } = await prisma.containerStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContainerStatsDeleteManyArgs>(args?: SelectSubset<T, ContainerStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContainerStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContainerStats
     * const containerStats = await prisma.containerStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContainerStatsUpdateManyArgs>(args: SelectSubset<T, ContainerStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContainerStats and returns the data updated in the database.
     * @param {ContainerStatsUpdateManyAndReturnArgs} args - Arguments to update many ContainerStats.
     * @example
     * // Update many ContainerStats
     * const containerStats = await prisma.containerStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContainerStats and only return the `id`
     * const containerStatsWithIdOnly = await prisma.containerStats.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContainerStatsUpdateManyAndReturnArgs>(args: SelectSubset<T, ContainerStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContainerStats.
     * @param {ContainerStatsUpsertArgs} args - Arguments to update or create a ContainerStats.
     * @example
     * // Update or create a ContainerStats
     * const containerStats = await prisma.containerStats.upsert({
     *   create: {
     *     // ... data to create a ContainerStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContainerStats we want to update
     *   }
     * })
     */
    upsert<T extends ContainerStatsUpsertArgs>(args: SelectSubset<T, ContainerStatsUpsertArgs<ExtArgs>>): Prisma__ContainerStatsClient<$Result.GetResult<Prisma.$ContainerStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContainerStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerStatsCountArgs} args - Arguments to filter ContainerStats to count.
     * @example
     * // Count the number of ContainerStats
     * const count = await prisma.containerStats.count({
     *   where: {
     *     // ... the filter for the ContainerStats we want to count
     *   }
     * })
    **/
    count<T extends ContainerStatsCountArgs>(
      args?: Subset<T, ContainerStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContainerStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContainerStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContainerStatsAggregateArgs>(args: Subset<T, ContainerStatsAggregateArgs>): Prisma.PrismaPromise<GetContainerStatsAggregateType<T>>

    /**
     * Group by ContainerStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContainerStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContainerStatsGroupByArgs['orderBy'] }
        : { orderBy?: ContainerStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContainerStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContainerStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContainerStats model
   */
  readonly fields: ContainerStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContainerStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContainerStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    container<T extends ContainerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContainerDefaultArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContainerStats model
   */
  interface ContainerStatsFieldRefs {
    readonly id: FieldRef<"ContainerStats", 'String'>
    readonly containerId: FieldRef<"ContainerStats", 'String'>
    readonly cpuPercent: FieldRef<"ContainerStats", 'Float'>
    readonly memoryUsage: FieldRef<"ContainerStats", 'BigInt'>
    readonly memoryLimit: FieldRef<"ContainerStats", 'BigInt'>
    readonly networkRx: FieldRef<"ContainerStats", 'BigInt'>
    readonly networkTx: FieldRef<"ContainerStats", 'BigInt'>
    readonly blockRead: FieldRef<"ContainerStats", 'BigInt'>
    readonly blockWrite: FieldRef<"ContainerStats", 'BigInt'>
    readonly timestamp: FieldRef<"ContainerStats", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContainerStats findUnique
   */
  export type ContainerStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
    /**
     * Filter, which ContainerStats to fetch.
     */
    where: ContainerStatsWhereUniqueInput
  }

  /**
   * ContainerStats findUniqueOrThrow
   */
  export type ContainerStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
    /**
     * Filter, which ContainerStats to fetch.
     */
    where: ContainerStatsWhereUniqueInput
  }

  /**
   * ContainerStats findFirst
   */
  export type ContainerStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
    /**
     * Filter, which ContainerStats to fetch.
     */
    where?: ContainerStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContainerStats to fetch.
     */
    orderBy?: ContainerStatsOrderByWithRelationInput | ContainerStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContainerStats.
     */
    cursor?: ContainerStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContainerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContainerStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContainerStats.
     */
    distinct?: ContainerStatsScalarFieldEnum | ContainerStatsScalarFieldEnum[]
  }

  /**
   * ContainerStats findFirstOrThrow
   */
  export type ContainerStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
    /**
     * Filter, which ContainerStats to fetch.
     */
    where?: ContainerStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContainerStats to fetch.
     */
    orderBy?: ContainerStatsOrderByWithRelationInput | ContainerStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContainerStats.
     */
    cursor?: ContainerStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContainerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContainerStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContainerStats.
     */
    distinct?: ContainerStatsScalarFieldEnum | ContainerStatsScalarFieldEnum[]
  }

  /**
   * ContainerStats findMany
   */
  export type ContainerStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
    /**
     * Filter, which ContainerStats to fetch.
     */
    where?: ContainerStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContainerStats to fetch.
     */
    orderBy?: ContainerStatsOrderByWithRelationInput | ContainerStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContainerStats.
     */
    cursor?: ContainerStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContainerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContainerStats.
     */
    skip?: number
    distinct?: ContainerStatsScalarFieldEnum | ContainerStatsScalarFieldEnum[]
  }

  /**
   * ContainerStats create
   */
  export type ContainerStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a ContainerStats.
     */
    data: XOR<ContainerStatsCreateInput, ContainerStatsUncheckedCreateInput>
  }

  /**
   * ContainerStats createMany
   */
  export type ContainerStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContainerStats.
     */
    data: ContainerStatsCreateManyInput | ContainerStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContainerStats createManyAndReturn
   */
  export type ContainerStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * The data used to create many ContainerStats.
     */
    data: ContainerStatsCreateManyInput | ContainerStatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContainerStats update
   */
  export type ContainerStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a ContainerStats.
     */
    data: XOR<ContainerStatsUpdateInput, ContainerStatsUncheckedUpdateInput>
    /**
     * Choose, which ContainerStats to update.
     */
    where: ContainerStatsWhereUniqueInput
  }

  /**
   * ContainerStats updateMany
   */
  export type ContainerStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContainerStats.
     */
    data: XOR<ContainerStatsUpdateManyMutationInput, ContainerStatsUncheckedUpdateManyInput>
    /**
     * Filter which ContainerStats to update
     */
    where?: ContainerStatsWhereInput
    /**
     * Limit how many ContainerStats to update.
     */
    limit?: number
  }

  /**
   * ContainerStats updateManyAndReturn
   */
  export type ContainerStatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * The data used to update ContainerStats.
     */
    data: XOR<ContainerStatsUpdateManyMutationInput, ContainerStatsUncheckedUpdateManyInput>
    /**
     * Filter which ContainerStats to update
     */
    where?: ContainerStatsWhereInput
    /**
     * Limit how many ContainerStats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContainerStats upsert
   */
  export type ContainerStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the ContainerStats to update in case it exists.
     */
    where: ContainerStatsWhereUniqueInput
    /**
     * In case the ContainerStats found by the `where` argument doesn't exist, create a new ContainerStats with this data.
     */
    create: XOR<ContainerStatsCreateInput, ContainerStatsUncheckedCreateInput>
    /**
     * In case the ContainerStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContainerStatsUpdateInput, ContainerStatsUncheckedUpdateInput>
  }

  /**
   * ContainerStats delete
   */
  export type ContainerStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
    /**
     * Filter which ContainerStats to delete.
     */
    where: ContainerStatsWhereUniqueInput
  }

  /**
   * ContainerStats deleteMany
   */
  export type ContainerStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContainerStats to delete
     */
    where?: ContainerStatsWhereInput
    /**
     * Limit how many ContainerStats to delete.
     */
    limit?: number
  }

  /**
   * ContainerStats without action
   */
  export type ContainerStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerStats
     */
    select?: ContainerStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerStats
     */
    omit?: ContainerStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerStatsInclude<ExtArgs> | null
  }


  /**
   * Model ContainerLog
   */

  export type AggregateContainerLog = {
    _count: ContainerLogCountAggregateOutputType | null
    _min: ContainerLogMinAggregateOutputType | null
    _max: ContainerLogMaxAggregateOutputType | null
  }

  export type ContainerLogMinAggregateOutputType = {
    id: string | null
    containerId: string | null
    message: string | null
    level: $Enums.LogLevel | null
    timestamp: Date | null
  }

  export type ContainerLogMaxAggregateOutputType = {
    id: string | null
    containerId: string | null
    message: string | null
    level: $Enums.LogLevel | null
    timestamp: Date | null
  }

  export type ContainerLogCountAggregateOutputType = {
    id: number
    containerId: number
    message: number
    level: number
    timestamp: number
    _all: number
  }


  export type ContainerLogMinAggregateInputType = {
    id?: true
    containerId?: true
    message?: true
    level?: true
    timestamp?: true
  }

  export type ContainerLogMaxAggregateInputType = {
    id?: true
    containerId?: true
    message?: true
    level?: true
    timestamp?: true
  }

  export type ContainerLogCountAggregateInputType = {
    id?: true
    containerId?: true
    message?: true
    level?: true
    timestamp?: true
    _all?: true
  }

  export type ContainerLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContainerLog to aggregate.
     */
    where?: ContainerLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContainerLogs to fetch.
     */
    orderBy?: ContainerLogOrderByWithRelationInput | ContainerLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContainerLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContainerLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContainerLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContainerLogs
    **/
    _count?: true | ContainerLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContainerLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContainerLogMaxAggregateInputType
  }

  export type GetContainerLogAggregateType<T extends ContainerLogAggregateArgs> = {
        [P in keyof T & keyof AggregateContainerLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContainerLog[P]>
      : GetScalarType<T[P], AggregateContainerLog[P]>
  }




  export type ContainerLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContainerLogWhereInput
    orderBy?: ContainerLogOrderByWithAggregationInput | ContainerLogOrderByWithAggregationInput[]
    by: ContainerLogScalarFieldEnum[] | ContainerLogScalarFieldEnum
    having?: ContainerLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContainerLogCountAggregateInputType | true
    _min?: ContainerLogMinAggregateInputType
    _max?: ContainerLogMaxAggregateInputType
  }

  export type ContainerLogGroupByOutputType = {
    id: string
    containerId: string
    message: string
    level: $Enums.LogLevel
    timestamp: Date
    _count: ContainerLogCountAggregateOutputType | null
    _min: ContainerLogMinAggregateOutputType | null
    _max: ContainerLogMaxAggregateOutputType | null
  }

  type GetContainerLogGroupByPayload<T extends ContainerLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContainerLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContainerLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContainerLogGroupByOutputType[P]>
            : GetScalarType<T[P], ContainerLogGroupByOutputType[P]>
        }
      >
    >


  export type ContainerLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    containerId?: boolean
    message?: boolean
    level?: boolean
    timestamp?: boolean
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["containerLog"]>

  export type ContainerLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    containerId?: boolean
    message?: boolean
    level?: boolean
    timestamp?: boolean
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["containerLog"]>

  export type ContainerLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    containerId?: boolean
    message?: boolean
    level?: boolean
    timestamp?: boolean
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["containerLog"]>

  export type ContainerLogSelectScalar = {
    id?: boolean
    containerId?: boolean
    message?: boolean
    level?: boolean
    timestamp?: boolean
  }

  export type ContainerLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "containerId" | "message" | "level" | "timestamp", ExtArgs["result"]["containerLog"]>
  export type ContainerLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }
  export type ContainerLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }
  export type ContainerLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    container?: boolean | ContainerDefaultArgs<ExtArgs>
  }

  export type $ContainerLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContainerLog"
    objects: {
      container: Prisma.$ContainerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      containerId: string
      message: string
      level: $Enums.LogLevel
      timestamp: Date
    }, ExtArgs["result"]["containerLog"]>
    composites: {}
  }

  type ContainerLogGetPayload<S extends boolean | null | undefined | ContainerLogDefaultArgs> = $Result.GetResult<Prisma.$ContainerLogPayload, S>

  type ContainerLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContainerLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContainerLogCountAggregateInputType | true
    }

  export interface ContainerLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContainerLog'], meta: { name: 'ContainerLog' } }
    /**
     * Find zero or one ContainerLog that matches the filter.
     * @param {ContainerLogFindUniqueArgs} args - Arguments to find a ContainerLog
     * @example
     * // Get one ContainerLog
     * const containerLog = await prisma.containerLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContainerLogFindUniqueArgs>(args: SelectSubset<T, ContainerLogFindUniqueArgs<ExtArgs>>): Prisma__ContainerLogClient<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContainerLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContainerLogFindUniqueOrThrowArgs} args - Arguments to find a ContainerLog
     * @example
     * // Get one ContainerLog
     * const containerLog = await prisma.containerLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContainerLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ContainerLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContainerLogClient<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContainerLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerLogFindFirstArgs} args - Arguments to find a ContainerLog
     * @example
     * // Get one ContainerLog
     * const containerLog = await prisma.containerLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContainerLogFindFirstArgs>(args?: SelectSubset<T, ContainerLogFindFirstArgs<ExtArgs>>): Prisma__ContainerLogClient<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContainerLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerLogFindFirstOrThrowArgs} args - Arguments to find a ContainerLog
     * @example
     * // Get one ContainerLog
     * const containerLog = await prisma.containerLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContainerLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ContainerLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContainerLogClient<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContainerLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContainerLogs
     * const containerLogs = await prisma.containerLog.findMany()
     * 
     * // Get first 10 ContainerLogs
     * const containerLogs = await prisma.containerLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const containerLogWithIdOnly = await prisma.containerLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContainerLogFindManyArgs>(args?: SelectSubset<T, ContainerLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContainerLog.
     * @param {ContainerLogCreateArgs} args - Arguments to create a ContainerLog.
     * @example
     * // Create one ContainerLog
     * const ContainerLog = await prisma.containerLog.create({
     *   data: {
     *     // ... data to create a ContainerLog
     *   }
     * })
     * 
     */
    create<T extends ContainerLogCreateArgs>(args: SelectSubset<T, ContainerLogCreateArgs<ExtArgs>>): Prisma__ContainerLogClient<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContainerLogs.
     * @param {ContainerLogCreateManyArgs} args - Arguments to create many ContainerLogs.
     * @example
     * // Create many ContainerLogs
     * const containerLog = await prisma.containerLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContainerLogCreateManyArgs>(args?: SelectSubset<T, ContainerLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContainerLogs and returns the data saved in the database.
     * @param {ContainerLogCreateManyAndReturnArgs} args - Arguments to create many ContainerLogs.
     * @example
     * // Create many ContainerLogs
     * const containerLog = await prisma.containerLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContainerLogs and only return the `id`
     * const containerLogWithIdOnly = await prisma.containerLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContainerLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ContainerLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContainerLog.
     * @param {ContainerLogDeleteArgs} args - Arguments to delete one ContainerLog.
     * @example
     * // Delete one ContainerLog
     * const ContainerLog = await prisma.containerLog.delete({
     *   where: {
     *     // ... filter to delete one ContainerLog
     *   }
     * })
     * 
     */
    delete<T extends ContainerLogDeleteArgs>(args: SelectSubset<T, ContainerLogDeleteArgs<ExtArgs>>): Prisma__ContainerLogClient<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContainerLog.
     * @param {ContainerLogUpdateArgs} args - Arguments to update one ContainerLog.
     * @example
     * // Update one ContainerLog
     * const containerLog = await prisma.containerLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContainerLogUpdateArgs>(args: SelectSubset<T, ContainerLogUpdateArgs<ExtArgs>>): Prisma__ContainerLogClient<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContainerLogs.
     * @param {ContainerLogDeleteManyArgs} args - Arguments to filter ContainerLogs to delete.
     * @example
     * // Delete a few ContainerLogs
     * const { count } = await prisma.containerLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContainerLogDeleteManyArgs>(args?: SelectSubset<T, ContainerLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContainerLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContainerLogs
     * const containerLog = await prisma.containerLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContainerLogUpdateManyArgs>(args: SelectSubset<T, ContainerLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContainerLogs and returns the data updated in the database.
     * @param {ContainerLogUpdateManyAndReturnArgs} args - Arguments to update many ContainerLogs.
     * @example
     * // Update many ContainerLogs
     * const containerLog = await prisma.containerLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContainerLogs and only return the `id`
     * const containerLogWithIdOnly = await prisma.containerLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContainerLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ContainerLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContainerLog.
     * @param {ContainerLogUpsertArgs} args - Arguments to update or create a ContainerLog.
     * @example
     * // Update or create a ContainerLog
     * const containerLog = await prisma.containerLog.upsert({
     *   create: {
     *     // ... data to create a ContainerLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContainerLog we want to update
     *   }
     * })
     */
    upsert<T extends ContainerLogUpsertArgs>(args: SelectSubset<T, ContainerLogUpsertArgs<ExtArgs>>): Prisma__ContainerLogClient<$Result.GetResult<Prisma.$ContainerLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContainerLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerLogCountArgs} args - Arguments to filter ContainerLogs to count.
     * @example
     * // Count the number of ContainerLogs
     * const count = await prisma.containerLog.count({
     *   where: {
     *     // ... the filter for the ContainerLogs we want to count
     *   }
     * })
    **/
    count<T extends ContainerLogCountArgs>(
      args?: Subset<T, ContainerLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContainerLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContainerLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContainerLogAggregateArgs>(args: Subset<T, ContainerLogAggregateArgs>): Prisma.PrismaPromise<GetContainerLogAggregateType<T>>

    /**
     * Group by ContainerLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContainerLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContainerLogGroupByArgs['orderBy'] }
        : { orderBy?: ContainerLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContainerLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContainerLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContainerLog model
   */
  readonly fields: ContainerLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContainerLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContainerLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    container<T extends ContainerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContainerDefaultArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContainerLog model
   */
  interface ContainerLogFieldRefs {
    readonly id: FieldRef<"ContainerLog", 'String'>
    readonly containerId: FieldRef<"ContainerLog", 'String'>
    readonly message: FieldRef<"ContainerLog", 'String'>
    readonly level: FieldRef<"ContainerLog", 'LogLevel'>
    readonly timestamp: FieldRef<"ContainerLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContainerLog findUnique
   */
  export type ContainerLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
    /**
     * Filter, which ContainerLog to fetch.
     */
    where: ContainerLogWhereUniqueInput
  }

  /**
   * ContainerLog findUniqueOrThrow
   */
  export type ContainerLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
    /**
     * Filter, which ContainerLog to fetch.
     */
    where: ContainerLogWhereUniqueInput
  }

  /**
   * ContainerLog findFirst
   */
  export type ContainerLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
    /**
     * Filter, which ContainerLog to fetch.
     */
    where?: ContainerLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContainerLogs to fetch.
     */
    orderBy?: ContainerLogOrderByWithRelationInput | ContainerLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContainerLogs.
     */
    cursor?: ContainerLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContainerLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContainerLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContainerLogs.
     */
    distinct?: ContainerLogScalarFieldEnum | ContainerLogScalarFieldEnum[]
  }

  /**
   * ContainerLog findFirstOrThrow
   */
  export type ContainerLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
    /**
     * Filter, which ContainerLog to fetch.
     */
    where?: ContainerLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContainerLogs to fetch.
     */
    orderBy?: ContainerLogOrderByWithRelationInput | ContainerLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContainerLogs.
     */
    cursor?: ContainerLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContainerLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContainerLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContainerLogs.
     */
    distinct?: ContainerLogScalarFieldEnum | ContainerLogScalarFieldEnum[]
  }

  /**
   * ContainerLog findMany
   */
  export type ContainerLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
    /**
     * Filter, which ContainerLogs to fetch.
     */
    where?: ContainerLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContainerLogs to fetch.
     */
    orderBy?: ContainerLogOrderByWithRelationInput | ContainerLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContainerLogs.
     */
    cursor?: ContainerLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContainerLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContainerLogs.
     */
    skip?: number
    distinct?: ContainerLogScalarFieldEnum | ContainerLogScalarFieldEnum[]
  }

  /**
   * ContainerLog create
   */
  export type ContainerLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ContainerLog.
     */
    data: XOR<ContainerLogCreateInput, ContainerLogUncheckedCreateInput>
  }

  /**
   * ContainerLog createMany
   */
  export type ContainerLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContainerLogs.
     */
    data: ContainerLogCreateManyInput | ContainerLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContainerLog createManyAndReturn
   */
  export type ContainerLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * The data used to create many ContainerLogs.
     */
    data: ContainerLogCreateManyInput | ContainerLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContainerLog update
   */
  export type ContainerLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ContainerLog.
     */
    data: XOR<ContainerLogUpdateInput, ContainerLogUncheckedUpdateInput>
    /**
     * Choose, which ContainerLog to update.
     */
    where: ContainerLogWhereUniqueInput
  }

  /**
   * ContainerLog updateMany
   */
  export type ContainerLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContainerLogs.
     */
    data: XOR<ContainerLogUpdateManyMutationInput, ContainerLogUncheckedUpdateManyInput>
    /**
     * Filter which ContainerLogs to update
     */
    where?: ContainerLogWhereInput
    /**
     * Limit how many ContainerLogs to update.
     */
    limit?: number
  }

  /**
   * ContainerLog updateManyAndReturn
   */
  export type ContainerLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * The data used to update ContainerLogs.
     */
    data: XOR<ContainerLogUpdateManyMutationInput, ContainerLogUncheckedUpdateManyInput>
    /**
     * Filter which ContainerLogs to update
     */
    where?: ContainerLogWhereInput
    /**
     * Limit how many ContainerLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContainerLog upsert
   */
  export type ContainerLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ContainerLog to update in case it exists.
     */
    where: ContainerLogWhereUniqueInput
    /**
     * In case the ContainerLog found by the `where` argument doesn't exist, create a new ContainerLog with this data.
     */
    create: XOR<ContainerLogCreateInput, ContainerLogUncheckedCreateInput>
    /**
     * In case the ContainerLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContainerLogUpdateInput, ContainerLogUncheckedUpdateInput>
  }

  /**
   * ContainerLog delete
   */
  export type ContainerLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
    /**
     * Filter which ContainerLog to delete.
     */
    where: ContainerLogWhereUniqueInput
  }

  /**
   * ContainerLog deleteMany
   */
  export type ContainerLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContainerLogs to delete
     */
    where?: ContainerLogWhereInput
    /**
     * Limit how many ContainerLogs to delete.
     */
    limit?: number
  }

  /**
   * ContainerLog without action
   */
  export type ContainerLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContainerLog
     */
    select?: ContainerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContainerLog
     */
    omit?: ContainerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContainerLogInclude<ExtArgs> | null
  }


  /**
   * Model ServiceHealth
   */

  export type AggregateServiceHealth = {
    _count: ServiceHealthCountAggregateOutputType | null
    _avg: ServiceHealthAvgAggregateOutputType | null
    _sum: ServiceHealthSumAggregateOutputType | null
    _min: ServiceHealthMinAggregateOutputType | null
    _max: ServiceHealthMaxAggregateOutputType | null
  }

  export type ServiceHealthAvgAggregateOutputType = {
    responseTime: number | null
  }

  export type ServiceHealthSumAggregateOutputType = {
    responseTime: number | null
  }

  export type ServiceHealthMinAggregateOutputType = {
    id: string | null
    serviceName: string | null
    status: $Enums.HealthStatus | null
    responseTime: number | null
    error: string | null
    lastCheck: Date | null
    createdAt: Date | null
  }

  export type ServiceHealthMaxAggregateOutputType = {
    id: string | null
    serviceName: string | null
    status: $Enums.HealthStatus | null
    responseTime: number | null
    error: string | null
    lastCheck: Date | null
    createdAt: Date | null
  }

  export type ServiceHealthCountAggregateOutputType = {
    id: number
    serviceName: number
    status: number
    responseTime: number
    error: number
    details: number
    lastCheck: number
    createdAt: number
    _all: number
  }


  export type ServiceHealthAvgAggregateInputType = {
    responseTime?: true
  }

  export type ServiceHealthSumAggregateInputType = {
    responseTime?: true
  }

  export type ServiceHealthMinAggregateInputType = {
    id?: true
    serviceName?: true
    status?: true
    responseTime?: true
    error?: true
    lastCheck?: true
    createdAt?: true
  }

  export type ServiceHealthMaxAggregateInputType = {
    id?: true
    serviceName?: true
    status?: true
    responseTime?: true
    error?: true
    lastCheck?: true
    createdAt?: true
  }

  export type ServiceHealthCountAggregateInputType = {
    id?: true
    serviceName?: true
    status?: true
    responseTime?: true
    error?: true
    details?: true
    lastCheck?: true
    createdAt?: true
    _all?: true
  }

  export type ServiceHealthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceHealth to aggregate.
     */
    where?: ServiceHealthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceHealths to fetch.
     */
    orderBy?: ServiceHealthOrderByWithRelationInput | ServiceHealthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceHealthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceHealths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceHealths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceHealths
    **/
    _count?: true | ServiceHealthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceHealthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceHealthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceHealthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceHealthMaxAggregateInputType
  }

  export type GetServiceHealthAggregateType<T extends ServiceHealthAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceHealth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceHealth[P]>
      : GetScalarType<T[P], AggregateServiceHealth[P]>
  }




  export type ServiceHealthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceHealthWhereInput
    orderBy?: ServiceHealthOrderByWithAggregationInput | ServiceHealthOrderByWithAggregationInput[]
    by: ServiceHealthScalarFieldEnum[] | ServiceHealthScalarFieldEnum
    having?: ServiceHealthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceHealthCountAggregateInputType | true
    _avg?: ServiceHealthAvgAggregateInputType
    _sum?: ServiceHealthSumAggregateInputType
    _min?: ServiceHealthMinAggregateInputType
    _max?: ServiceHealthMaxAggregateInputType
  }

  export type ServiceHealthGroupByOutputType = {
    id: string
    serviceName: string
    status: $Enums.HealthStatus
    responseTime: number
    error: string | null
    details: JsonValue | null
    lastCheck: Date
    createdAt: Date
    _count: ServiceHealthCountAggregateOutputType | null
    _avg: ServiceHealthAvgAggregateOutputType | null
    _sum: ServiceHealthSumAggregateOutputType | null
    _min: ServiceHealthMinAggregateOutputType | null
    _max: ServiceHealthMaxAggregateOutputType | null
  }

  type GetServiceHealthGroupByPayload<T extends ServiceHealthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceHealthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceHealthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceHealthGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceHealthGroupByOutputType[P]>
        }
      >
    >


  export type ServiceHealthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    status?: boolean
    responseTime?: boolean
    error?: boolean
    details?: boolean
    lastCheck?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["serviceHealth"]>

  export type ServiceHealthSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    status?: boolean
    responseTime?: boolean
    error?: boolean
    details?: boolean
    lastCheck?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["serviceHealth"]>

  export type ServiceHealthSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    status?: boolean
    responseTime?: boolean
    error?: boolean
    details?: boolean
    lastCheck?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["serviceHealth"]>

  export type ServiceHealthSelectScalar = {
    id?: boolean
    serviceName?: boolean
    status?: boolean
    responseTime?: boolean
    error?: boolean
    details?: boolean
    lastCheck?: boolean
    createdAt?: boolean
  }

  export type ServiceHealthOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceName" | "status" | "responseTime" | "error" | "details" | "lastCheck" | "createdAt", ExtArgs["result"]["serviceHealth"]>

  export type $ServiceHealthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceHealth"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      serviceName: string
      status: $Enums.HealthStatus
      responseTime: number
      error: string | null
      details: Prisma.JsonValue | null
      lastCheck: Date
      createdAt: Date
    }, ExtArgs["result"]["serviceHealth"]>
    composites: {}
  }

  type ServiceHealthGetPayload<S extends boolean | null | undefined | ServiceHealthDefaultArgs> = $Result.GetResult<Prisma.$ServiceHealthPayload, S>

  type ServiceHealthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceHealthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceHealthCountAggregateInputType | true
    }

  export interface ServiceHealthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceHealth'], meta: { name: 'ServiceHealth' } }
    /**
     * Find zero or one ServiceHealth that matches the filter.
     * @param {ServiceHealthFindUniqueArgs} args - Arguments to find a ServiceHealth
     * @example
     * // Get one ServiceHealth
     * const serviceHealth = await prisma.serviceHealth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceHealthFindUniqueArgs>(args: SelectSubset<T, ServiceHealthFindUniqueArgs<ExtArgs>>): Prisma__ServiceHealthClient<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceHealth that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceHealthFindUniqueOrThrowArgs} args - Arguments to find a ServiceHealth
     * @example
     * // Get one ServiceHealth
     * const serviceHealth = await prisma.serviceHealth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceHealthFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceHealthFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceHealthClient<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceHealth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHealthFindFirstArgs} args - Arguments to find a ServiceHealth
     * @example
     * // Get one ServiceHealth
     * const serviceHealth = await prisma.serviceHealth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceHealthFindFirstArgs>(args?: SelectSubset<T, ServiceHealthFindFirstArgs<ExtArgs>>): Prisma__ServiceHealthClient<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceHealth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHealthFindFirstOrThrowArgs} args - Arguments to find a ServiceHealth
     * @example
     * // Get one ServiceHealth
     * const serviceHealth = await prisma.serviceHealth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceHealthFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceHealthFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceHealthClient<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceHealths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHealthFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceHealths
     * const serviceHealths = await prisma.serviceHealth.findMany()
     * 
     * // Get first 10 ServiceHealths
     * const serviceHealths = await prisma.serviceHealth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceHealthWithIdOnly = await prisma.serviceHealth.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceHealthFindManyArgs>(args?: SelectSubset<T, ServiceHealthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceHealth.
     * @param {ServiceHealthCreateArgs} args - Arguments to create a ServiceHealth.
     * @example
     * // Create one ServiceHealth
     * const ServiceHealth = await prisma.serviceHealth.create({
     *   data: {
     *     // ... data to create a ServiceHealth
     *   }
     * })
     * 
     */
    create<T extends ServiceHealthCreateArgs>(args: SelectSubset<T, ServiceHealthCreateArgs<ExtArgs>>): Prisma__ServiceHealthClient<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceHealths.
     * @param {ServiceHealthCreateManyArgs} args - Arguments to create many ServiceHealths.
     * @example
     * // Create many ServiceHealths
     * const serviceHealth = await prisma.serviceHealth.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceHealthCreateManyArgs>(args?: SelectSubset<T, ServiceHealthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceHealths and returns the data saved in the database.
     * @param {ServiceHealthCreateManyAndReturnArgs} args - Arguments to create many ServiceHealths.
     * @example
     * // Create many ServiceHealths
     * const serviceHealth = await prisma.serviceHealth.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceHealths and only return the `id`
     * const serviceHealthWithIdOnly = await prisma.serviceHealth.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceHealthCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceHealthCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceHealth.
     * @param {ServiceHealthDeleteArgs} args - Arguments to delete one ServiceHealth.
     * @example
     * // Delete one ServiceHealth
     * const ServiceHealth = await prisma.serviceHealth.delete({
     *   where: {
     *     // ... filter to delete one ServiceHealth
     *   }
     * })
     * 
     */
    delete<T extends ServiceHealthDeleteArgs>(args: SelectSubset<T, ServiceHealthDeleteArgs<ExtArgs>>): Prisma__ServiceHealthClient<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceHealth.
     * @param {ServiceHealthUpdateArgs} args - Arguments to update one ServiceHealth.
     * @example
     * // Update one ServiceHealth
     * const serviceHealth = await prisma.serviceHealth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceHealthUpdateArgs>(args: SelectSubset<T, ServiceHealthUpdateArgs<ExtArgs>>): Prisma__ServiceHealthClient<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceHealths.
     * @param {ServiceHealthDeleteManyArgs} args - Arguments to filter ServiceHealths to delete.
     * @example
     * // Delete a few ServiceHealths
     * const { count } = await prisma.serviceHealth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceHealthDeleteManyArgs>(args?: SelectSubset<T, ServiceHealthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceHealths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHealthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceHealths
     * const serviceHealth = await prisma.serviceHealth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceHealthUpdateManyArgs>(args: SelectSubset<T, ServiceHealthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceHealths and returns the data updated in the database.
     * @param {ServiceHealthUpdateManyAndReturnArgs} args - Arguments to update many ServiceHealths.
     * @example
     * // Update many ServiceHealths
     * const serviceHealth = await prisma.serviceHealth.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceHealths and only return the `id`
     * const serviceHealthWithIdOnly = await prisma.serviceHealth.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceHealthUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceHealthUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceHealth.
     * @param {ServiceHealthUpsertArgs} args - Arguments to update or create a ServiceHealth.
     * @example
     * // Update or create a ServiceHealth
     * const serviceHealth = await prisma.serviceHealth.upsert({
     *   create: {
     *     // ... data to create a ServiceHealth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceHealth we want to update
     *   }
     * })
     */
    upsert<T extends ServiceHealthUpsertArgs>(args: SelectSubset<T, ServiceHealthUpsertArgs<ExtArgs>>): Prisma__ServiceHealthClient<$Result.GetResult<Prisma.$ServiceHealthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceHealths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHealthCountArgs} args - Arguments to filter ServiceHealths to count.
     * @example
     * // Count the number of ServiceHealths
     * const count = await prisma.serviceHealth.count({
     *   where: {
     *     // ... the filter for the ServiceHealths we want to count
     *   }
     * })
    **/
    count<T extends ServiceHealthCountArgs>(
      args?: Subset<T, ServiceHealthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceHealthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceHealth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHealthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceHealthAggregateArgs>(args: Subset<T, ServiceHealthAggregateArgs>): Prisma.PrismaPromise<GetServiceHealthAggregateType<T>>

    /**
     * Group by ServiceHealth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceHealthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceHealthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceHealthGroupByArgs['orderBy'] }
        : { orderBy?: ServiceHealthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceHealthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceHealthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceHealth model
   */
  readonly fields: ServiceHealthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceHealth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceHealthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceHealth model
   */
  interface ServiceHealthFieldRefs {
    readonly id: FieldRef<"ServiceHealth", 'String'>
    readonly serviceName: FieldRef<"ServiceHealth", 'String'>
    readonly status: FieldRef<"ServiceHealth", 'HealthStatus'>
    readonly responseTime: FieldRef<"ServiceHealth", 'Int'>
    readonly error: FieldRef<"ServiceHealth", 'String'>
    readonly details: FieldRef<"ServiceHealth", 'Json'>
    readonly lastCheck: FieldRef<"ServiceHealth", 'DateTime'>
    readonly createdAt: FieldRef<"ServiceHealth", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceHealth findUnique
   */
  export type ServiceHealthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * Filter, which ServiceHealth to fetch.
     */
    where: ServiceHealthWhereUniqueInput
  }

  /**
   * ServiceHealth findUniqueOrThrow
   */
  export type ServiceHealthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * Filter, which ServiceHealth to fetch.
     */
    where: ServiceHealthWhereUniqueInput
  }

  /**
   * ServiceHealth findFirst
   */
  export type ServiceHealthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * Filter, which ServiceHealth to fetch.
     */
    where?: ServiceHealthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceHealths to fetch.
     */
    orderBy?: ServiceHealthOrderByWithRelationInput | ServiceHealthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceHealths.
     */
    cursor?: ServiceHealthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceHealths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceHealths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceHealths.
     */
    distinct?: ServiceHealthScalarFieldEnum | ServiceHealthScalarFieldEnum[]
  }

  /**
   * ServiceHealth findFirstOrThrow
   */
  export type ServiceHealthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * Filter, which ServiceHealth to fetch.
     */
    where?: ServiceHealthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceHealths to fetch.
     */
    orderBy?: ServiceHealthOrderByWithRelationInput | ServiceHealthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceHealths.
     */
    cursor?: ServiceHealthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceHealths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceHealths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceHealths.
     */
    distinct?: ServiceHealthScalarFieldEnum | ServiceHealthScalarFieldEnum[]
  }

  /**
   * ServiceHealth findMany
   */
  export type ServiceHealthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * Filter, which ServiceHealths to fetch.
     */
    where?: ServiceHealthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceHealths to fetch.
     */
    orderBy?: ServiceHealthOrderByWithRelationInput | ServiceHealthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceHealths.
     */
    cursor?: ServiceHealthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceHealths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceHealths.
     */
    skip?: number
    distinct?: ServiceHealthScalarFieldEnum | ServiceHealthScalarFieldEnum[]
  }

  /**
   * ServiceHealth create
   */
  export type ServiceHealthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * The data needed to create a ServiceHealth.
     */
    data: XOR<ServiceHealthCreateInput, ServiceHealthUncheckedCreateInput>
  }

  /**
   * ServiceHealth createMany
   */
  export type ServiceHealthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceHealths.
     */
    data: ServiceHealthCreateManyInput | ServiceHealthCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceHealth createManyAndReturn
   */
  export type ServiceHealthCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceHealths.
     */
    data: ServiceHealthCreateManyInput | ServiceHealthCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceHealth update
   */
  export type ServiceHealthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * The data needed to update a ServiceHealth.
     */
    data: XOR<ServiceHealthUpdateInput, ServiceHealthUncheckedUpdateInput>
    /**
     * Choose, which ServiceHealth to update.
     */
    where: ServiceHealthWhereUniqueInput
  }

  /**
   * ServiceHealth updateMany
   */
  export type ServiceHealthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceHealths.
     */
    data: XOR<ServiceHealthUpdateManyMutationInput, ServiceHealthUncheckedUpdateManyInput>
    /**
     * Filter which ServiceHealths to update
     */
    where?: ServiceHealthWhereInput
    /**
     * Limit how many ServiceHealths to update.
     */
    limit?: number
  }

  /**
   * ServiceHealth updateManyAndReturn
   */
  export type ServiceHealthUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * The data used to update ServiceHealths.
     */
    data: XOR<ServiceHealthUpdateManyMutationInput, ServiceHealthUncheckedUpdateManyInput>
    /**
     * Filter which ServiceHealths to update
     */
    where?: ServiceHealthWhereInput
    /**
     * Limit how many ServiceHealths to update.
     */
    limit?: number
  }

  /**
   * ServiceHealth upsert
   */
  export type ServiceHealthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * The filter to search for the ServiceHealth to update in case it exists.
     */
    where: ServiceHealthWhereUniqueInput
    /**
     * In case the ServiceHealth found by the `where` argument doesn't exist, create a new ServiceHealth with this data.
     */
    create: XOR<ServiceHealthCreateInput, ServiceHealthUncheckedCreateInput>
    /**
     * In case the ServiceHealth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceHealthUpdateInput, ServiceHealthUncheckedUpdateInput>
  }

  /**
   * ServiceHealth delete
   */
  export type ServiceHealthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
    /**
     * Filter which ServiceHealth to delete.
     */
    where: ServiceHealthWhereUniqueInput
  }

  /**
   * ServiceHealth deleteMany
   */
  export type ServiceHealthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceHealths to delete
     */
    where?: ServiceHealthWhereInput
    /**
     * Limit how many ServiceHealths to delete.
     */
    limit?: number
  }

  /**
   * ServiceHealth without action
   */
  export type ServiceHealthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceHealth
     */
    select?: ServiceHealthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceHealth
     */
    omit?: ServiceHealthOmit<ExtArgs> | null
  }


  /**
   * Model InfrastructureMetric
   */

  export type AggregateInfrastructureMetric = {
    _count: InfrastructureMetricCountAggregateOutputType | null
    _avg: InfrastructureMetricAvgAggregateOutputType | null
    _sum: InfrastructureMetricSumAggregateOutputType | null
    _min: InfrastructureMetricMinAggregateOutputType | null
    _max: InfrastructureMetricMaxAggregateOutputType | null
  }

  export type InfrastructureMetricAvgAggregateOutputType = {
    value: number | null
  }

  export type InfrastructureMetricSumAggregateOutputType = {
    value: number | null
  }

  export type InfrastructureMetricMinAggregateOutputType = {
    id: string | null
    service: string | null
    metricName: string | null
    value: number | null
    unit: string | null
    timestamp: Date | null
  }

  export type InfrastructureMetricMaxAggregateOutputType = {
    id: string | null
    service: string | null
    metricName: string | null
    value: number | null
    unit: string | null
    timestamp: Date | null
  }

  export type InfrastructureMetricCountAggregateOutputType = {
    id: number
    service: number
    metricName: number
    value: number
    unit: number
    labels: number
    timestamp: number
    _all: number
  }


  export type InfrastructureMetricAvgAggregateInputType = {
    value?: true
  }

  export type InfrastructureMetricSumAggregateInputType = {
    value?: true
  }

  export type InfrastructureMetricMinAggregateInputType = {
    id?: true
    service?: true
    metricName?: true
    value?: true
    unit?: true
    timestamp?: true
  }

  export type InfrastructureMetricMaxAggregateInputType = {
    id?: true
    service?: true
    metricName?: true
    value?: true
    unit?: true
    timestamp?: true
  }

  export type InfrastructureMetricCountAggregateInputType = {
    id?: true
    service?: true
    metricName?: true
    value?: true
    unit?: true
    labels?: true
    timestamp?: true
    _all?: true
  }

  export type InfrastructureMetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InfrastructureMetric to aggregate.
     */
    where?: InfrastructureMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InfrastructureMetrics to fetch.
     */
    orderBy?: InfrastructureMetricOrderByWithRelationInput | InfrastructureMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InfrastructureMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InfrastructureMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InfrastructureMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InfrastructureMetrics
    **/
    _count?: true | InfrastructureMetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InfrastructureMetricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InfrastructureMetricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InfrastructureMetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InfrastructureMetricMaxAggregateInputType
  }

  export type GetInfrastructureMetricAggregateType<T extends InfrastructureMetricAggregateArgs> = {
        [P in keyof T & keyof AggregateInfrastructureMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInfrastructureMetric[P]>
      : GetScalarType<T[P], AggregateInfrastructureMetric[P]>
  }




  export type InfrastructureMetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InfrastructureMetricWhereInput
    orderBy?: InfrastructureMetricOrderByWithAggregationInput | InfrastructureMetricOrderByWithAggregationInput[]
    by: InfrastructureMetricScalarFieldEnum[] | InfrastructureMetricScalarFieldEnum
    having?: InfrastructureMetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InfrastructureMetricCountAggregateInputType | true
    _avg?: InfrastructureMetricAvgAggregateInputType
    _sum?: InfrastructureMetricSumAggregateInputType
    _min?: InfrastructureMetricMinAggregateInputType
    _max?: InfrastructureMetricMaxAggregateInputType
  }

  export type InfrastructureMetricGroupByOutputType = {
    id: string
    service: string
    metricName: string
    value: number
    unit: string
    labels: JsonValue | null
    timestamp: Date
    _count: InfrastructureMetricCountAggregateOutputType | null
    _avg: InfrastructureMetricAvgAggregateOutputType | null
    _sum: InfrastructureMetricSumAggregateOutputType | null
    _min: InfrastructureMetricMinAggregateOutputType | null
    _max: InfrastructureMetricMaxAggregateOutputType | null
  }

  type GetInfrastructureMetricGroupByPayload<T extends InfrastructureMetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InfrastructureMetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InfrastructureMetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InfrastructureMetricGroupByOutputType[P]>
            : GetScalarType<T[P], InfrastructureMetricGroupByOutputType[P]>
        }
      >
    >


  export type InfrastructureMetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    service?: boolean
    metricName?: boolean
    value?: boolean
    unit?: boolean
    labels?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["infrastructureMetric"]>

  export type InfrastructureMetricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    service?: boolean
    metricName?: boolean
    value?: boolean
    unit?: boolean
    labels?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["infrastructureMetric"]>

  export type InfrastructureMetricSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    service?: boolean
    metricName?: boolean
    value?: boolean
    unit?: boolean
    labels?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["infrastructureMetric"]>

  export type InfrastructureMetricSelectScalar = {
    id?: boolean
    service?: boolean
    metricName?: boolean
    value?: boolean
    unit?: boolean
    labels?: boolean
    timestamp?: boolean
  }

  export type InfrastructureMetricOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "service" | "metricName" | "value" | "unit" | "labels" | "timestamp", ExtArgs["result"]["infrastructureMetric"]>

  export type $InfrastructureMetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InfrastructureMetric"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      service: string
      metricName: string
      value: number
      unit: string
      labels: Prisma.JsonValue | null
      timestamp: Date
    }, ExtArgs["result"]["infrastructureMetric"]>
    composites: {}
  }

  type InfrastructureMetricGetPayload<S extends boolean | null | undefined | InfrastructureMetricDefaultArgs> = $Result.GetResult<Prisma.$InfrastructureMetricPayload, S>

  type InfrastructureMetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InfrastructureMetricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InfrastructureMetricCountAggregateInputType | true
    }

  export interface InfrastructureMetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InfrastructureMetric'], meta: { name: 'InfrastructureMetric' } }
    /**
     * Find zero or one InfrastructureMetric that matches the filter.
     * @param {InfrastructureMetricFindUniqueArgs} args - Arguments to find a InfrastructureMetric
     * @example
     * // Get one InfrastructureMetric
     * const infrastructureMetric = await prisma.infrastructureMetric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InfrastructureMetricFindUniqueArgs>(args: SelectSubset<T, InfrastructureMetricFindUniqueArgs<ExtArgs>>): Prisma__InfrastructureMetricClient<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InfrastructureMetric that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InfrastructureMetricFindUniqueOrThrowArgs} args - Arguments to find a InfrastructureMetric
     * @example
     * // Get one InfrastructureMetric
     * const infrastructureMetric = await prisma.infrastructureMetric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InfrastructureMetricFindUniqueOrThrowArgs>(args: SelectSubset<T, InfrastructureMetricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InfrastructureMetricClient<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InfrastructureMetric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureMetricFindFirstArgs} args - Arguments to find a InfrastructureMetric
     * @example
     * // Get one InfrastructureMetric
     * const infrastructureMetric = await prisma.infrastructureMetric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InfrastructureMetricFindFirstArgs>(args?: SelectSubset<T, InfrastructureMetricFindFirstArgs<ExtArgs>>): Prisma__InfrastructureMetricClient<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InfrastructureMetric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureMetricFindFirstOrThrowArgs} args - Arguments to find a InfrastructureMetric
     * @example
     * // Get one InfrastructureMetric
     * const infrastructureMetric = await prisma.infrastructureMetric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InfrastructureMetricFindFirstOrThrowArgs>(args?: SelectSubset<T, InfrastructureMetricFindFirstOrThrowArgs<ExtArgs>>): Prisma__InfrastructureMetricClient<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InfrastructureMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureMetricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InfrastructureMetrics
     * const infrastructureMetrics = await prisma.infrastructureMetric.findMany()
     * 
     * // Get first 10 InfrastructureMetrics
     * const infrastructureMetrics = await prisma.infrastructureMetric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const infrastructureMetricWithIdOnly = await prisma.infrastructureMetric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InfrastructureMetricFindManyArgs>(args?: SelectSubset<T, InfrastructureMetricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InfrastructureMetric.
     * @param {InfrastructureMetricCreateArgs} args - Arguments to create a InfrastructureMetric.
     * @example
     * // Create one InfrastructureMetric
     * const InfrastructureMetric = await prisma.infrastructureMetric.create({
     *   data: {
     *     // ... data to create a InfrastructureMetric
     *   }
     * })
     * 
     */
    create<T extends InfrastructureMetricCreateArgs>(args: SelectSubset<T, InfrastructureMetricCreateArgs<ExtArgs>>): Prisma__InfrastructureMetricClient<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InfrastructureMetrics.
     * @param {InfrastructureMetricCreateManyArgs} args - Arguments to create many InfrastructureMetrics.
     * @example
     * // Create many InfrastructureMetrics
     * const infrastructureMetric = await prisma.infrastructureMetric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InfrastructureMetricCreateManyArgs>(args?: SelectSubset<T, InfrastructureMetricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InfrastructureMetrics and returns the data saved in the database.
     * @param {InfrastructureMetricCreateManyAndReturnArgs} args - Arguments to create many InfrastructureMetrics.
     * @example
     * // Create many InfrastructureMetrics
     * const infrastructureMetric = await prisma.infrastructureMetric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InfrastructureMetrics and only return the `id`
     * const infrastructureMetricWithIdOnly = await prisma.infrastructureMetric.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InfrastructureMetricCreateManyAndReturnArgs>(args?: SelectSubset<T, InfrastructureMetricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InfrastructureMetric.
     * @param {InfrastructureMetricDeleteArgs} args - Arguments to delete one InfrastructureMetric.
     * @example
     * // Delete one InfrastructureMetric
     * const InfrastructureMetric = await prisma.infrastructureMetric.delete({
     *   where: {
     *     // ... filter to delete one InfrastructureMetric
     *   }
     * })
     * 
     */
    delete<T extends InfrastructureMetricDeleteArgs>(args: SelectSubset<T, InfrastructureMetricDeleteArgs<ExtArgs>>): Prisma__InfrastructureMetricClient<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InfrastructureMetric.
     * @param {InfrastructureMetricUpdateArgs} args - Arguments to update one InfrastructureMetric.
     * @example
     * // Update one InfrastructureMetric
     * const infrastructureMetric = await prisma.infrastructureMetric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InfrastructureMetricUpdateArgs>(args: SelectSubset<T, InfrastructureMetricUpdateArgs<ExtArgs>>): Prisma__InfrastructureMetricClient<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InfrastructureMetrics.
     * @param {InfrastructureMetricDeleteManyArgs} args - Arguments to filter InfrastructureMetrics to delete.
     * @example
     * // Delete a few InfrastructureMetrics
     * const { count } = await prisma.infrastructureMetric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InfrastructureMetricDeleteManyArgs>(args?: SelectSubset<T, InfrastructureMetricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InfrastructureMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureMetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InfrastructureMetrics
     * const infrastructureMetric = await prisma.infrastructureMetric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InfrastructureMetricUpdateManyArgs>(args: SelectSubset<T, InfrastructureMetricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InfrastructureMetrics and returns the data updated in the database.
     * @param {InfrastructureMetricUpdateManyAndReturnArgs} args - Arguments to update many InfrastructureMetrics.
     * @example
     * // Update many InfrastructureMetrics
     * const infrastructureMetric = await prisma.infrastructureMetric.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InfrastructureMetrics and only return the `id`
     * const infrastructureMetricWithIdOnly = await prisma.infrastructureMetric.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InfrastructureMetricUpdateManyAndReturnArgs>(args: SelectSubset<T, InfrastructureMetricUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InfrastructureMetric.
     * @param {InfrastructureMetricUpsertArgs} args - Arguments to update or create a InfrastructureMetric.
     * @example
     * // Update or create a InfrastructureMetric
     * const infrastructureMetric = await prisma.infrastructureMetric.upsert({
     *   create: {
     *     // ... data to create a InfrastructureMetric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InfrastructureMetric we want to update
     *   }
     * })
     */
    upsert<T extends InfrastructureMetricUpsertArgs>(args: SelectSubset<T, InfrastructureMetricUpsertArgs<ExtArgs>>): Prisma__InfrastructureMetricClient<$Result.GetResult<Prisma.$InfrastructureMetricPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InfrastructureMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureMetricCountArgs} args - Arguments to filter InfrastructureMetrics to count.
     * @example
     * // Count the number of InfrastructureMetrics
     * const count = await prisma.infrastructureMetric.count({
     *   where: {
     *     // ... the filter for the InfrastructureMetrics we want to count
     *   }
     * })
    **/
    count<T extends InfrastructureMetricCountArgs>(
      args?: Subset<T, InfrastructureMetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InfrastructureMetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InfrastructureMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureMetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InfrastructureMetricAggregateArgs>(args: Subset<T, InfrastructureMetricAggregateArgs>): Prisma.PrismaPromise<GetInfrastructureMetricAggregateType<T>>

    /**
     * Group by InfrastructureMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureMetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InfrastructureMetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InfrastructureMetricGroupByArgs['orderBy'] }
        : { orderBy?: InfrastructureMetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InfrastructureMetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInfrastructureMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InfrastructureMetric model
   */
  readonly fields: InfrastructureMetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InfrastructureMetric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InfrastructureMetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InfrastructureMetric model
   */
  interface InfrastructureMetricFieldRefs {
    readonly id: FieldRef<"InfrastructureMetric", 'String'>
    readonly service: FieldRef<"InfrastructureMetric", 'String'>
    readonly metricName: FieldRef<"InfrastructureMetric", 'String'>
    readonly value: FieldRef<"InfrastructureMetric", 'Float'>
    readonly unit: FieldRef<"InfrastructureMetric", 'String'>
    readonly labels: FieldRef<"InfrastructureMetric", 'Json'>
    readonly timestamp: FieldRef<"InfrastructureMetric", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InfrastructureMetric findUnique
   */
  export type InfrastructureMetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * Filter, which InfrastructureMetric to fetch.
     */
    where: InfrastructureMetricWhereUniqueInput
  }

  /**
   * InfrastructureMetric findUniqueOrThrow
   */
  export type InfrastructureMetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * Filter, which InfrastructureMetric to fetch.
     */
    where: InfrastructureMetricWhereUniqueInput
  }

  /**
   * InfrastructureMetric findFirst
   */
  export type InfrastructureMetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * Filter, which InfrastructureMetric to fetch.
     */
    where?: InfrastructureMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InfrastructureMetrics to fetch.
     */
    orderBy?: InfrastructureMetricOrderByWithRelationInput | InfrastructureMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InfrastructureMetrics.
     */
    cursor?: InfrastructureMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InfrastructureMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InfrastructureMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InfrastructureMetrics.
     */
    distinct?: InfrastructureMetricScalarFieldEnum | InfrastructureMetricScalarFieldEnum[]
  }

  /**
   * InfrastructureMetric findFirstOrThrow
   */
  export type InfrastructureMetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * Filter, which InfrastructureMetric to fetch.
     */
    where?: InfrastructureMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InfrastructureMetrics to fetch.
     */
    orderBy?: InfrastructureMetricOrderByWithRelationInput | InfrastructureMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InfrastructureMetrics.
     */
    cursor?: InfrastructureMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InfrastructureMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InfrastructureMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InfrastructureMetrics.
     */
    distinct?: InfrastructureMetricScalarFieldEnum | InfrastructureMetricScalarFieldEnum[]
  }

  /**
   * InfrastructureMetric findMany
   */
  export type InfrastructureMetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * Filter, which InfrastructureMetrics to fetch.
     */
    where?: InfrastructureMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InfrastructureMetrics to fetch.
     */
    orderBy?: InfrastructureMetricOrderByWithRelationInput | InfrastructureMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InfrastructureMetrics.
     */
    cursor?: InfrastructureMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InfrastructureMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InfrastructureMetrics.
     */
    skip?: number
    distinct?: InfrastructureMetricScalarFieldEnum | InfrastructureMetricScalarFieldEnum[]
  }

  /**
   * InfrastructureMetric create
   */
  export type InfrastructureMetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * The data needed to create a InfrastructureMetric.
     */
    data: XOR<InfrastructureMetricCreateInput, InfrastructureMetricUncheckedCreateInput>
  }

  /**
   * InfrastructureMetric createMany
   */
  export type InfrastructureMetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InfrastructureMetrics.
     */
    data: InfrastructureMetricCreateManyInput | InfrastructureMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InfrastructureMetric createManyAndReturn
   */
  export type InfrastructureMetricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * The data used to create many InfrastructureMetrics.
     */
    data: InfrastructureMetricCreateManyInput | InfrastructureMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InfrastructureMetric update
   */
  export type InfrastructureMetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * The data needed to update a InfrastructureMetric.
     */
    data: XOR<InfrastructureMetricUpdateInput, InfrastructureMetricUncheckedUpdateInput>
    /**
     * Choose, which InfrastructureMetric to update.
     */
    where: InfrastructureMetricWhereUniqueInput
  }

  /**
   * InfrastructureMetric updateMany
   */
  export type InfrastructureMetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InfrastructureMetrics.
     */
    data: XOR<InfrastructureMetricUpdateManyMutationInput, InfrastructureMetricUncheckedUpdateManyInput>
    /**
     * Filter which InfrastructureMetrics to update
     */
    where?: InfrastructureMetricWhereInput
    /**
     * Limit how many InfrastructureMetrics to update.
     */
    limit?: number
  }

  /**
   * InfrastructureMetric updateManyAndReturn
   */
  export type InfrastructureMetricUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * The data used to update InfrastructureMetrics.
     */
    data: XOR<InfrastructureMetricUpdateManyMutationInput, InfrastructureMetricUncheckedUpdateManyInput>
    /**
     * Filter which InfrastructureMetrics to update
     */
    where?: InfrastructureMetricWhereInput
    /**
     * Limit how many InfrastructureMetrics to update.
     */
    limit?: number
  }

  /**
   * InfrastructureMetric upsert
   */
  export type InfrastructureMetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * The filter to search for the InfrastructureMetric to update in case it exists.
     */
    where: InfrastructureMetricWhereUniqueInput
    /**
     * In case the InfrastructureMetric found by the `where` argument doesn't exist, create a new InfrastructureMetric with this data.
     */
    create: XOR<InfrastructureMetricCreateInput, InfrastructureMetricUncheckedCreateInput>
    /**
     * In case the InfrastructureMetric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InfrastructureMetricUpdateInput, InfrastructureMetricUncheckedUpdateInput>
  }

  /**
   * InfrastructureMetric delete
   */
  export type InfrastructureMetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
    /**
     * Filter which InfrastructureMetric to delete.
     */
    where: InfrastructureMetricWhereUniqueInput
  }

  /**
   * InfrastructureMetric deleteMany
   */
  export type InfrastructureMetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InfrastructureMetrics to delete
     */
    where?: InfrastructureMetricWhereInput
    /**
     * Limit how many InfrastructureMetrics to delete.
     */
    limit?: number
  }

  /**
   * InfrastructureMetric without action
   */
  export type InfrastructureMetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureMetric
     */
    select?: InfrastructureMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureMetric
     */
    omit?: InfrastructureMetricOmit<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    resource: number
    resourceId: number
    details: number
    ipAddress: number
    userAgent: number
    timestamp: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string
    action: string
    resource: string
    resourceId: string
    details: JsonValue | null
    ipAddress: string
    userAgent: string
    timestamp: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "resource" | "resourceId" | "details" | "ipAddress" | "userAgent" | "timestamp", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      resource: string
      resourceId: string
      details: Prisma.JsonValue | null
      ipAddress: string
      userAgent: string
      timestamp: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly resource: FieldRef<"AuditLog", 'String'>
    readonly resourceId: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model WebVMTemplate
   */

  export type AggregateWebVMTemplate = {
    _count: WebVMTemplateCountAggregateOutputType | null
    _avg: WebVMTemplateAvgAggregateOutputType | null
    _sum: WebVMTemplateSumAggregateOutputType | null
    _min: WebVMTemplateMinAggregateOutputType | null
    _max: WebVMTemplateMaxAggregateOutputType | null
  }

  export type WebVMTemplateAvgAggregateOutputType = {
    cpuCount: number | null
  }

  export type WebVMTemplateSumAggregateOutputType = {
    cpuCount: number | null
  }

  export type WebVMTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    image: string | null
    memory: string | null
    cpuCount: number | null
    diskSize: string | null
    category: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WebVMTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    image: string | null
    memory: string | null
    cpuCount: number | null
    diskSize: string | null
    category: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WebVMTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    image: number
    memory: number
    cpuCount: number
    diskSize: number
    preInstalledSoftware: number
    category: number
    isPublic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WebVMTemplateAvgAggregateInputType = {
    cpuCount?: true
  }

  export type WebVMTemplateSumAggregateInputType = {
    cpuCount?: true
  }

  export type WebVMTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    memory?: true
    cpuCount?: true
    diskSize?: true
    category?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WebVMTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    memory?: true
    cpuCount?: true
    diskSize?: true
    category?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WebVMTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    memory?: true
    cpuCount?: true
    diskSize?: true
    preInstalledSoftware?: true
    category?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WebVMTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebVMTemplate to aggregate.
     */
    where?: WebVMTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMTemplates to fetch.
     */
    orderBy?: WebVMTemplateOrderByWithRelationInput | WebVMTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebVMTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebVMTemplates
    **/
    _count?: true | WebVMTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebVMTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebVMTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebVMTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebVMTemplateMaxAggregateInputType
  }

  export type GetWebVMTemplateAggregateType<T extends WebVMTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateWebVMTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebVMTemplate[P]>
      : GetScalarType<T[P], AggregateWebVMTemplate[P]>
  }




  export type WebVMTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebVMTemplateWhereInput
    orderBy?: WebVMTemplateOrderByWithAggregationInput | WebVMTemplateOrderByWithAggregationInput[]
    by: WebVMTemplateScalarFieldEnum[] | WebVMTemplateScalarFieldEnum
    having?: WebVMTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebVMTemplateCountAggregateInputType | true
    _avg?: WebVMTemplateAvgAggregateInputType
    _sum?: WebVMTemplateSumAggregateInputType
    _min?: WebVMTemplateMinAggregateInputType
    _max?: WebVMTemplateMaxAggregateInputType
  }

  export type WebVMTemplateGroupByOutputType = {
    id: string
    name: string
    description: string | null
    image: string
    memory: string
    cpuCount: number
    diskSize: string
    preInstalledSoftware: JsonValue | null
    category: string
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    _count: WebVMTemplateCountAggregateOutputType | null
    _avg: WebVMTemplateAvgAggregateOutputType | null
    _sum: WebVMTemplateSumAggregateOutputType | null
    _min: WebVMTemplateMinAggregateOutputType | null
    _max: WebVMTemplateMaxAggregateOutputType | null
  }

  type GetWebVMTemplateGroupByPayload<T extends WebVMTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebVMTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebVMTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebVMTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], WebVMTemplateGroupByOutputType[P]>
        }
      >
    >


  export type WebVMTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    memory?: boolean
    cpuCount?: boolean
    diskSize?: boolean
    preInstalledSoftware?: boolean
    category?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    instances?: boolean | WebVMTemplate$instancesArgs<ExtArgs>
    _count?: boolean | WebVMTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webVMTemplate"]>

  export type WebVMTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    memory?: boolean
    cpuCount?: boolean
    diskSize?: boolean
    preInstalledSoftware?: boolean
    category?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["webVMTemplate"]>

  export type WebVMTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    memory?: boolean
    cpuCount?: boolean
    diskSize?: boolean
    preInstalledSoftware?: boolean
    category?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["webVMTemplate"]>

  export type WebVMTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    memory?: boolean
    cpuCount?: boolean
    diskSize?: boolean
    preInstalledSoftware?: boolean
    category?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WebVMTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "image" | "memory" | "cpuCount" | "diskSize" | "preInstalledSoftware" | "category" | "isPublic" | "createdAt" | "updatedAt", ExtArgs["result"]["webVMTemplate"]>
  export type WebVMTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instances?: boolean | WebVMTemplate$instancesArgs<ExtArgs>
    _count?: boolean | WebVMTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WebVMTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WebVMTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WebVMTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebVMTemplate"
    objects: {
      instances: Prisma.$WebVMInstancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      image: string
      memory: string
      cpuCount: number
      diskSize: string
      preInstalledSoftware: Prisma.JsonValue | null
      category: string
      isPublic: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["webVMTemplate"]>
    composites: {}
  }

  type WebVMTemplateGetPayload<S extends boolean | null | undefined | WebVMTemplateDefaultArgs> = $Result.GetResult<Prisma.$WebVMTemplatePayload, S>

  type WebVMTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebVMTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebVMTemplateCountAggregateInputType | true
    }

  export interface WebVMTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebVMTemplate'], meta: { name: 'WebVMTemplate' } }
    /**
     * Find zero or one WebVMTemplate that matches the filter.
     * @param {WebVMTemplateFindUniqueArgs} args - Arguments to find a WebVMTemplate
     * @example
     * // Get one WebVMTemplate
     * const webVMTemplate = await prisma.webVMTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebVMTemplateFindUniqueArgs>(args: SelectSubset<T, WebVMTemplateFindUniqueArgs<ExtArgs>>): Prisma__WebVMTemplateClient<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WebVMTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebVMTemplateFindUniqueOrThrowArgs} args - Arguments to find a WebVMTemplate
     * @example
     * // Get one WebVMTemplate
     * const webVMTemplate = await prisma.webVMTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebVMTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, WebVMTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebVMTemplateClient<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebVMTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMTemplateFindFirstArgs} args - Arguments to find a WebVMTemplate
     * @example
     * // Get one WebVMTemplate
     * const webVMTemplate = await prisma.webVMTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebVMTemplateFindFirstArgs>(args?: SelectSubset<T, WebVMTemplateFindFirstArgs<ExtArgs>>): Prisma__WebVMTemplateClient<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebVMTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMTemplateFindFirstOrThrowArgs} args - Arguments to find a WebVMTemplate
     * @example
     * // Get one WebVMTemplate
     * const webVMTemplate = await prisma.webVMTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebVMTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, WebVMTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebVMTemplateClient<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WebVMTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebVMTemplates
     * const webVMTemplates = await prisma.webVMTemplate.findMany()
     * 
     * // Get first 10 WebVMTemplates
     * const webVMTemplates = await prisma.webVMTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webVMTemplateWithIdOnly = await prisma.webVMTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebVMTemplateFindManyArgs>(args?: SelectSubset<T, WebVMTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WebVMTemplate.
     * @param {WebVMTemplateCreateArgs} args - Arguments to create a WebVMTemplate.
     * @example
     * // Create one WebVMTemplate
     * const WebVMTemplate = await prisma.webVMTemplate.create({
     *   data: {
     *     // ... data to create a WebVMTemplate
     *   }
     * })
     * 
     */
    create<T extends WebVMTemplateCreateArgs>(args: SelectSubset<T, WebVMTemplateCreateArgs<ExtArgs>>): Prisma__WebVMTemplateClient<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WebVMTemplates.
     * @param {WebVMTemplateCreateManyArgs} args - Arguments to create many WebVMTemplates.
     * @example
     * // Create many WebVMTemplates
     * const webVMTemplate = await prisma.webVMTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebVMTemplateCreateManyArgs>(args?: SelectSubset<T, WebVMTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebVMTemplates and returns the data saved in the database.
     * @param {WebVMTemplateCreateManyAndReturnArgs} args - Arguments to create many WebVMTemplates.
     * @example
     * // Create many WebVMTemplates
     * const webVMTemplate = await prisma.webVMTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebVMTemplates and only return the `id`
     * const webVMTemplateWithIdOnly = await prisma.webVMTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebVMTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, WebVMTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WebVMTemplate.
     * @param {WebVMTemplateDeleteArgs} args - Arguments to delete one WebVMTemplate.
     * @example
     * // Delete one WebVMTemplate
     * const WebVMTemplate = await prisma.webVMTemplate.delete({
     *   where: {
     *     // ... filter to delete one WebVMTemplate
     *   }
     * })
     * 
     */
    delete<T extends WebVMTemplateDeleteArgs>(args: SelectSubset<T, WebVMTemplateDeleteArgs<ExtArgs>>): Prisma__WebVMTemplateClient<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WebVMTemplate.
     * @param {WebVMTemplateUpdateArgs} args - Arguments to update one WebVMTemplate.
     * @example
     * // Update one WebVMTemplate
     * const webVMTemplate = await prisma.webVMTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebVMTemplateUpdateArgs>(args: SelectSubset<T, WebVMTemplateUpdateArgs<ExtArgs>>): Prisma__WebVMTemplateClient<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WebVMTemplates.
     * @param {WebVMTemplateDeleteManyArgs} args - Arguments to filter WebVMTemplates to delete.
     * @example
     * // Delete a few WebVMTemplates
     * const { count } = await prisma.webVMTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebVMTemplateDeleteManyArgs>(args?: SelectSubset<T, WebVMTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebVMTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebVMTemplates
     * const webVMTemplate = await prisma.webVMTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebVMTemplateUpdateManyArgs>(args: SelectSubset<T, WebVMTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebVMTemplates and returns the data updated in the database.
     * @param {WebVMTemplateUpdateManyAndReturnArgs} args - Arguments to update many WebVMTemplates.
     * @example
     * // Update many WebVMTemplates
     * const webVMTemplate = await prisma.webVMTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WebVMTemplates and only return the `id`
     * const webVMTemplateWithIdOnly = await prisma.webVMTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WebVMTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, WebVMTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WebVMTemplate.
     * @param {WebVMTemplateUpsertArgs} args - Arguments to update or create a WebVMTemplate.
     * @example
     * // Update or create a WebVMTemplate
     * const webVMTemplate = await prisma.webVMTemplate.upsert({
     *   create: {
     *     // ... data to create a WebVMTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebVMTemplate we want to update
     *   }
     * })
     */
    upsert<T extends WebVMTemplateUpsertArgs>(args: SelectSubset<T, WebVMTemplateUpsertArgs<ExtArgs>>): Prisma__WebVMTemplateClient<$Result.GetResult<Prisma.$WebVMTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WebVMTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMTemplateCountArgs} args - Arguments to filter WebVMTemplates to count.
     * @example
     * // Count the number of WebVMTemplates
     * const count = await prisma.webVMTemplate.count({
     *   where: {
     *     // ... the filter for the WebVMTemplates we want to count
     *   }
     * })
    **/
    count<T extends WebVMTemplateCountArgs>(
      args?: Subset<T, WebVMTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebVMTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebVMTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebVMTemplateAggregateArgs>(args: Subset<T, WebVMTemplateAggregateArgs>): Prisma.PrismaPromise<GetWebVMTemplateAggregateType<T>>

    /**
     * Group by WebVMTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebVMTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebVMTemplateGroupByArgs['orderBy'] }
        : { orderBy?: WebVMTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebVMTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebVMTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebVMTemplate model
   */
  readonly fields: WebVMTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebVMTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebVMTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instances<T extends WebVMTemplate$instancesArgs<ExtArgs> = {}>(args?: Subset<T, WebVMTemplate$instancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebVMTemplate model
   */
  interface WebVMTemplateFieldRefs {
    readonly id: FieldRef<"WebVMTemplate", 'String'>
    readonly name: FieldRef<"WebVMTemplate", 'String'>
    readonly description: FieldRef<"WebVMTemplate", 'String'>
    readonly image: FieldRef<"WebVMTemplate", 'String'>
    readonly memory: FieldRef<"WebVMTemplate", 'String'>
    readonly cpuCount: FieldRef<"WebVMTemplate", 'Int'>
    readonly diskSize: FieldRef<"WebVMTemplate", 'String'>
    readonly preInstalledSoftware: FieldRef<"WebVMTemplate", 'Json'>
    readonly category: FieldRef<"WebVMTemplate", 'String'>
    readonly isPublic: FieldRef<"WebVMTemplate", 'Boolean'>
    readonly createdAt: FieldRef<"WebVMTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"WebVMTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebVMTemplate findUnique
   */
  export type WebVMTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WebVMTemplate to fetch.
     */
    where: WebVMTemplateWhereUniqueInput
  }

  /**
   * WebVMTemplate findUniqueOrThrow
   */
  export type WebVMTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WebVMTemplate to fetch.
     */
    where: WebVMTemplateWhereUniqueInput
  }

  /**
   * WebVMTemplate findFirst
   */
  export type WebVMTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WebVMTemplate to fetch.
     */
    where?: WebVMTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMTemplates to fetch.
     */
    orderBy?: WebVMTemplateOrderByWithRelationInput | WebVMTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebVMTemplates.
     */
    cursor?: WebVMTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebVMTemplates.
     */
    distinct?: WebVMTemplateScalarFieldEnum | WebVMTemplateScalarFieldEnum[]
  }

  /**
   * WebVMTemplate findFirstOrThrow
   */
  export type WebVMTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WebVMTemplate to fetch.
     */
    where?: WebVMTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMTemplates to fetch.
     */
    orderBy?: WebVMTemplateOrderByWithRelationInput | WebVMTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebVMTemplates.
     */
    cursor?: WebVMTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebVMTemplates.
     */
    distinct?: WebVMTemplateScalarFieldEnum | WebVMTemplateScalarFieldEnum[]
  }

  /**
   * WebVMTemplate findMany
   */
  export type WebVMTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WebVMTemplates to fetch.
     */
    where?: WebVMTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMTemplates to fetch.
     */
    orderBy?: WebVMTemplateOrderByWithRelationInput | WebVMTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebVMTemplates.
     */
    cursor?: WebVMTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMTemplates.
     */
    skip?: number
    distinct?: WebVMTemplateScalarFieldEnum | WebVMTemplateScalarFieldEnum[]
  }

  /**
   * WebVMTemplate create
   */
  export type WebVMTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a WebVMTemplate.
     */
    data: XOR<WebVMTemplateCreateInput, WebVMTemplateUncheckedCreateInput>
  }

  /**
   * WebVMTemplate createMany
   */
  export type WebVMTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebVMTemplates.
     */
    data: WebVMTemplateCreateManyInput | WebVMTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebVMTemplate createManyAndReturn
   */
  export type WebVMTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many WebVMTemplates.
     */
    data: WebVMTemplateCreateManyInput | WebVMTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebVMTemplate update
   */
  export type WebVMTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a WebVMTemplate.
     */
    data: XOR<WebVMTemplateUpdateInput, WebVMTemplateUncheckedUpdateInput>
    /**
     * Choose, which WebVMTemplate to update.
     */
    where: WebVMTemplateWhereUniqueInput
  }

  /**
   * WebVMTemplate updateMany
   */
  export type WebVMTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebVMTemplates.
     */
    data: XOR<WebVMTemplateUpdateManyMutationInput, WebVMTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WebVMTemplates to update
     */
    where?: WebVMTemplateWhereInput
    /**
     * Limit how many WebVMTemplates to update.
     */
    limit?: number
  }

  /**
   * WebVMTemplate updateManyAndReturn
   */
  export type WebVMTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * The data used to update WebVMTemplates.
     */
    data: XOR<WebVMTemplateUpdateManyMutationInput, WebVMTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WebVMTemplates to update
     */
    where?: WebVMTemplateWhereInput
    /**
     * Limit how many WebVMTemplates to update.
     */
    limit?: number
  }

  /**
   * WebVMTemplate upsert
   */
  export type WebVMTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the WebVMTemplate to update in case it exists.
     */
    where: WebVMTemplateWhereUniqueInput
    /**
     * In case the WebVMTemplate found by the `where` argument doesn't exist, create a new WebVMTemplate with this data.
     */
    create: XOR<WebVMTemplateCreateInput, WebVMTemplateUncheckedCreateInput>
    /**
     * In case the WebVMTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebVMTemplateUpdateInput, WebVMTemplateUncheckedUpdateInput>
  }

  /**
   * WebVMTemplate delete
   */
  export type WebVMTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
    /**
     * Filter which WebVMTemplate to delete.
     */
    where: WebVMTemplateWhereUniqueInput
  }

  /**
   * WebVMTemplate deleteMany
   */
  export type WebVMTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebVMTemplates to delete
     */
    where?: WebVMTemplateWhereInput
    /**
     * Limit how many WebVMTemplates to delete.
     */
    limit?: number
  }

  /**
   * WebVMTemplate.instances
   */
  export type WebVMTemplate$instancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMInstance
     */
    select?: WebVMInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMInstance
     */
    omit?: WebVMInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMInstanceInclude<ExtArgs> | null
    where?: WebVMInstanceWhereInput
    orderBy?: WebVMInstanceOrderByWithRelationInput | WebVMInstanceOrderByWithRelationInput[]
    cursor?: WebVMInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebVMInstanceScalarFieldEnum | WebVMInstanceScalarFieldEnum[]
  }

  /**
   * WebVMTemplate without action
   */
  export type WebVMTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMTemplate
     */
    select?: WebVMTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMTemplate
     */
    omit?: WebVMTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMTemplateInclude<ExtArgs> | null
  }


  /**
   * Model WebVMSnapshot
   */

  export type AggregateWebVMSnapshot = {
    _count: WebVMSnapshotCountAggregateOutputType | null
    _avg: WebVMSnapshotAvgAggregateOutputType | null
    _sum: WebVMSnapshotSumAggregateOutputType | null
    _min: WebVMSnapshotMinAggregateOutputType | null
    _max: WebVMSnapshotMaxAggregateOutputType | null
  }

  export type WebVMSnapshotAvgAggregateOutputType = {
    size: number | null
  }

  export type WebVMSnapshotSumAggregateOutputType = {
    size: bigint | null
  }

  export type WebVMSnapshotMinAggregateOutputType = {
    id: string | null
    instanceId: string | null
    name: string | null
    description: string | null
    size: bigint | null
    createdAt: Date | null
  }

  export type WebVMSnapshotMaxAggregateOutputType = {
    id: string | null
    instanceId: string | null
    name: string | null
    description: string | null
    size: bigint | null
    createdAt: Date | null
  }

  export type WebVMSnapshotCountAggregateOutputType = {
    id: number
    instanceId: number
    name: number
    description: number
    size: number
    createdAt: number
    _all: number
  }


  export type WebVMSnapshotAvgAggregateInputType = {
    size?: true
  }

  export type WebVMSnapshotSumAggregateInputType = {
    size?: true
  }

  export type WebVMSnapshotMinAggregateInputType = {
    id?: true
    instanceId?: true
    name?: true
    description?: true
    size?: true
    createdAt?: true
  }

  export type WebVMSnapshotMaxAggregateInputType = {
    id?: true
    instanceId?: true
    name?: true
    description?: true
    size?: true
    createdAt?: true
  }

  export type WebVMSnapshotCountAggregateInputType = {
    id?: true
    instanceId?: true
    name?: true
    description?: true
    size?: true
    createdAt?: true
    _all?: true
  }

  export type WebVMSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebVMSnapshot to aggregate.
     */
    where?: WebVMSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMSnapshots to fetch.
     */
    orderBy?: WebVMSnapshotOrderByWithRelationInput | WebVMSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebVMSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebVMSnapshots
    **/
    _count?: true | WebVMSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebVMSnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebVMSnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebVMSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebVMSnapshotMaxAggregateInputType
  }

  export type GetWebVMSnapshotAggregateType<T extends WebVMSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateWebVMSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebVMSnapshot[P]>
      : GetScalarType<T[P], AggregateWebVMSnapshot[P]>
  }




  export type WebVMSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebVMSnapshotWhereInput
    orderBy?: WebVMSnapshotOrderByWithAggregationInput | WebVMSnapshotOrderByWithAggregationInput[]
    by: WebVMSnapshotScalarFieldEnum[] | WebVMSnapshotScalarFieldEnum
    having?: WebVMSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebVMSnapshotCountAggregateInputType | true
    _avg?: WebVMSnapshotAvgAggregateInputType
    _sum?: WebVMSnapshotSumAggregateInputType
    _min?: WebVMSnapshotMinAggregateInputType
    _max?: WebVMSnapshotMaxAggregateInputType
  }

  export type WebVMSnapshotGroupByOutputType = {
    id: string
    instanceId: string
    name: string
    description: string | null
    size: bigint
    createdAt: Date
    _count: WebVMSnapshotCountAggregateOutputType | null
    _avg: WebVMSnapshotAvgAggregateOutputType | null
    _sum: WebVMSnapshotSumAggregateOutputType | null
    _min: WebVMSnapshotMinAggregateOutputType | null
    _max: WebVMSnapshotMaxAggregateOutputType | null
  }

  type GetWebVMSnapshotGroupByPayload<T extends WebVMSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebVMSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebVMSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebVMSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], WebVMSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type WebVMSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceId?: boolean
    name?: boolean
    description?: boolean
    size?: boolean
    createdAt?: boolean
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webVMSnapshot"]>

  export type WebVMSnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceId?: boolean
    name?: boolean
    description?: boolean
    size?: boolean
    createdAt?: boolean
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webVMSnapshot"]>

  export type WebVMSnapshotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceId?: boolean
    name?: boolean
    description?: boolean
    size?: boolean
    createdAt?: boolean
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webVMSnapshot"]>

  export type WebVMSnapshotSelectScalar = {
    id?: boolean
    instanceId?: boolean
    name?: boolean
    description?: boolean
    size?: boolean
    createdAt?: boolean
  }

  export type WebVMSnapshotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "instanceId" | "name" | "description" | "size" | "createdAt", ExtArgs["result"]["webVMSnapshot"]>
  export type WebVMSnapshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }
  export type WebVMSnapshotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }
  export type WebVMSnapshotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instance?: boolean | WebVMInstanceDefaultArgs<ExtArgs>
  }

  export type $WebVMSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebVMSnapshot"
    objects: {
      instance: Prisma.$WebVMInstancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      instanceId: string
      name: string
      description: string | null
      size: bigint
      createdAt: Date
    }, ExtArgs["result"]["webVMSnapshot"]>
    composites: {}
  }

  type WebVMSnapshotGetPayload<S extends boolean | null | undefined | WebVMSnapshotDefaultArgs> = $Result.GetResult<Prisma.$WebVMSnapshotPayload, S>

  type WebVMSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebVMSnapshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebVMSnapshotCountAggregateInputType | true
    }

  export interface WebVMSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebVMSnapshot'], meta: { name: 'WebVMSnapshot' } }
    /**
     * Find zero or one WebVMSnapshot that matches the filter.
     * @param {WebVMSnapshotFindUniqueArgs} args - Arguments to find a WebVMSnapshot
     * @example
     * // Get one WebVMSnapshot
     * const webVMSnapshot = await prisma.webVMSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebVMSnapshotFindUniqueArgs>(args: SelectSubset<T, WebVMSnapshotFindUniqueArgs<ExtArgs>>): Prisma__WebVMSnapshotClient<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WebVMSnapshot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebVMSnapshotFindUniqueOrThrowArgs} args - Arguments to find a WebVMSnapshot
     * @example
     * // Get one WebVMSnapshot
     * const webVMSnapshot = await prisma.webVMSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebVMSnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, WebVMSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebVMSnapshotClient<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebVMSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMSnapshotFindFirstArgs} args - Arguments to find a WebVMSnapshot
     * @example
     * // Get one WebVMSnapshot
     * const webVMSnapshot = await prisma.webVMSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebVMSnapshotFindFirstArgs>(args?: SelectSubset<T, WebVMSnapshotFindFirstArgs<ExtArgs>>): Prisma__WebVMSnapshotClient<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebVMSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMSnapshotFindFirstOrThrowArgs} args - Arguments to find a WebVMSnapshot
     * @example
     * // Get one WebVMSnapshot
     * const webVMSnapshot = await prisma.webVMSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebVMSnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, WebVMSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebVMSnapshotClient<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WebVMSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebVMSnapshots
     * const webVMSnapshots = await prisma.webVMSnapshot.findMany()
     * 
     * // Get first 10 WebVMSnapshots
     * const webVMSnapshots = await prisma.webVMSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webVMSnapshotWithIdOnly = await prisma.webVMSnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebVMSnapshotFindManyArgs>(args?: SelectSubset<T, WebVMSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WebVMSnapshot.
     * @param {WebVMSnapshotCreateArgs} args - Arguments to create a WebVMSnapshot.
     * @example
     * // Create one WebVMSnapshot
     * const WebVMSnapshot = await prisma.webVMSnapshot.create({
     *   data: {
     *     // ... data to create a WebVMSnapshot
     *   }
     * })
     * 
     */
    create<T extends WebVMSnapshotCreateArgs>(args: SelectSubset<T, WebVMSnapshotCreateArgs<ExtArgs>>): Prisma__WebVMSnapshotClient<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WebVMSnapshots.
     * @param {WebVMSnapshotCreateManyArgs} args - Arguments to create many WebVMSnapshots.
     * @example
     * // Create many WebVMSnapshots
     * const webVMSnapshot = await prisma.webVMSnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebVMSnapshotCreateManyArgs>(args?: SelectSubset<T, WebVMSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebVMSnapshots and returns the data saved in the database.
     * @param {WebVMSnapshotCreateManyAndReturnArgs} args - Arguments to create many WebVMSnapshots.
     * @example
     * // Create many WebVMSnapshots
     * const webVMSnapshot = await prisma.webVMSnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebVMSnapshots and only return the `id`
     * const webVMSnapshotWithIdOnly = await prisma.webVMSnapshot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebVMSnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, WebVMSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WebVMSnapshot.
     * @param {WebVMSnapshotDeleteArgs} args - Arguments to delete one WebVMSnapshot.
     * @example
     * // Delete one WebVMSnapshot
     * const WebVMSnapshot = await prisma.webVMSnapshot.delete({
     *   where: {
     *     // ... filter to delete one WebVMSnapshot
     *   }
     * })
     * 
     */
    delete<T extends WebVMSnapshotDeleteArgs>(args: SelectSubset<T, WebVMSnapshotDeleteArgs<ExtArgs>>): Prisma__WebVMSnapshotClient<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WebVMSnapshot.
     * @param {WebVMSnapshotUpdateArgs} args - Arguments to update one WebVMSnapshot.
     * @example
     * // Update one WebVMSnapshot
     * const webVMSnapshot = await prisma.webVMSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebVMSnapshotUpdateArgs>(args: SelectSubset<T, WebVMSnapshotUpdateArgs<ExtArgs>>): Prisma__WebVMSnapshotClient<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WebVMSnapshots.
     * @param {WebVMSnapshotDeleteManyArgs} args - Arguments to filter WebVMSnapshots to delete.
     * @example
     * // Delete a few WebVMSnapshots
     * const { count } = await prisma.webVMSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebVMSnapshotDeleteManyArgs>(args?: SelectSubset<T, WebVMSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebVMSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebVMSnapshots
     * const webVMSnapshot = await prisma.webVMSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebVMSnapshotUpdateManyArgs>(args: SelectSubset<T, WebVMSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebVMSnapshots and returns the data updated in the database.
     * @param {WebVMSnapshotUpdateManyAndReturnArgs} args - Arguments to update many WebVMSnapshots.
     * @example
     * // Update many WebVMSnapshots
     * const webVMSnapshot = await prisma.webVMSnapshot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WebVMSnapshots and only return the `id`
     * const webVMSnapshotWithIdOnly = await prisma.webVMSnapshot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WebVMSnapshotUpdateManyAndReturnArgs>(args: SelectSubset<T, WebVMSnapshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WebVMSnapshot.
     * @param {WebVMSnapshotUpsertArgs} args - Arguments to update or create a WebVMSnapshot.
     * @example
     * // Update or create a WebVMSnapshot
     * const webVMSnapshot = await prisma.webVMSnapshot.upsert({
     *   create: {
     *     // ... data to create a WebVMSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebVMSnapshot we want to update
     *   }
     * })
     */
    upsert<T extends WebVMSnapshotUpsertArgs>(args: SelectSubset<T, WebVMSnapshotUpsertArgs<ExtArgs>>): Prisma__WebVMSnapshotClient<$Result.GetResult<Prisma.$WebVMSnapshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WebVMSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMSnapshotCountArgs} args - Arguments to filter WebVMSnapshots to count.
     * @example
     * // Count the number of WebVMSnapshots
     * const count = await prisma.webVMSnapshot.count({
     *   where: {
     *     // ... the filter for the WebVMSnapshots we want to count
     *   }
     * })
    **/
    count<T extends WebVMSnapshotCountArgs>(
      args?: Subset<T, WebVMSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebVMSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebVMSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebVMSnapshotAggregateArgs>(args: Subset<T, WebVMSnapshotAggregateArgs>): Prisma.PrismaPromise<GetWebVMSnapshotAggregateType<T>>

    /**
     * Group by WebVMSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebVMSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebVMSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebVMSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: WebVMSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebVMSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebVMSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebVMSnapshot model
   */
  readonly fields: WebVMSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebVMSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebVMSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instance<T extends WebVMInstanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WebVMInstanceDefaultArgs<ExtArgs>>): Prisma__WebVMInstanceClient<$Result.GetResult<Prisma.$WebVMInstancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebVMSnapshot model
   */
  interface WebVMSnapshotFieldRefs {
    readonly id: FieldRef<"WebVMSnapshot", 'String'>
    readonly instanceId: FieldRef<"WebVMSnapshot", 'String'>
    readonly name: FieldRef<"WebVMSnapshot", 'String'>
    readonly description: FieldRef<"WebVMSnapshot", 'String'>
    readonly size: FieldRef<"WebVMSnapshot", 'BigInt'>
    readonly createdAt: FieldRef<"WebVMSnapshot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebVMSnapshot findUnique
   */
  export type WebVMSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which WebVMSnapshot to fetch.
     */
    where: WebVMSnapshotWhereUniqueInput
  }

  /**
   * WebVMSnapshot findUniqueOrThrow
   */
  export type WebVMSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which WebVMSnapshot to fetch.
     */
    where: WebVMSnapshotWhereUniqueInput
  }

  /**
   * WebVMSnapshot findFirst
   */
  export type WebVMSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which WebVMSnapshot to fetch.
     */
    where?: WebVMSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMSnapshots to fetch.
     */
    orderBy?: WebVMSnapshotOrderByWithRelationInput | WebVMSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebVMSnapshots.
     */
    cursor?: WebVMSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebVMSnapshots.
     */
    distinct?: WebVMSnapshotScalarFieldEnum | WebVMSnapshotScalarFieldEnum[]
  }

  /**
   * WebVMSnapshot findFirstOrThrow
   */
  export type WebVMSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which WebVMSnapshot to fetch.
     */
    where?: WebVMSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMSnapshots to fetch.
     */
    orderBy?: WebVMSnapshotOrderByWithRelationInput | WebVMSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebVMSnapshots.
     */
    cursor?: WebVMSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebVMSnapshots.
     */
    distinct?: WebVMSnapshotScalarFieldEnum | WebVMSnapshotScalarFieldEnum[]
  }

  /**
   * WebVMSnapshot findMany
   */
  export type WebVMSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which WebVMSnapshots to fetch.
     */
    where?: WebVMSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebVMSnapshots to fetch.
     */
    orderBy?: WebVMSnapshotOrderByWithRelationInput | WebVMSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebVMSnapshots.
     */
    cursor?: WebVMSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebVMSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebVMSnapshots.
     */
    skip?: number
    distinct?: WebVMSnapshotScalarFieldEnum | WebVMSnapshotScalarFieldEnum[]
  }

  /**
   * WebVMSnapshot create
   */
  export type WebVMSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to create a WebVMSnapshot.
     */
    data: XOR<WebVMSnapshotCreateInput, WebVMSnapshotUncheckedCreateInput>
  }

  /**
   * WebVMSnapshot createMany
   */
  export type WebVMSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebVMSnapshots.
     */
    data: WebVMSnapshotCreateManyInput | WebVMSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebVMSnapshot createManyAndReturn
   */
  export type WebVMSnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * The data used to create many WebVMSnapshots.
     */
    data: WebVMSnapshotCreateManyInput | WebVMSnapshotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebVMSnapshot update
   */
  export type WebVMSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to update a WebVMSnapshot.
     */
    data: XOR<WebVMSnapshotUpdateInput, WebVMSnapshotUncheckedUpdateInput>
    /**
     * Choose, which WebVMSnapshot to update.
     */
    where: WebVMSnapshotWhereUniqueInput
  }

  /**
   * WebVMSnapshot updateMany
   */
  export type WebVMSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebVMSnapshots.
     */
    data: XOR<WebVMSnapshotUpdateManyMutationInput, WebVMSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which WebVMSnapshots to update
     */
    where?: WebVMSnapshotWhereInput
    /**
     * Limit how many WebVMSnapshots to update.
     */
    limit?: number
  }

  /**
   * WebVMSnapshot updateManyAndReturn
   */
  export type WebVMSnapshotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * The data used to update WebVMSnapshots.
     */
    data: XOR<WebVMSnapshotUpdateManyMutationInput, WebVMSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which WebVMSnapshots to update
     */
    where?: WebVMSnapshotWhereInput
    /**
     * Limit how many WebVMSnapshots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebVMSnapshot upsert
   */
  export type WebVMSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
    /**
     * The filter to search for the WebVMSnapshot to update in case it exists.
     */
    where: WebVMSnapshotWhereUniqueInput
    /**
     * In case the WebVMSnapshot found by the `where` argument doesn't exist, create a new WebVMSnapshot with this data.
     */
    create: XOR<WebVMSnapshotCreateInput, WebVMSnapshotUncheckedCreateInput>
    /**
     * In case the WebVMSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebVMSnapshotUpdateInput, WebVMSnapshotUncheckedUpdateInput>
  }

  /**
   * WebVMSnapshot delete
   */
  export type WebVMSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
    /**
     * Filter which WebVMSnapshot to delete.
     */
    where: WebVMSnapshotWhereUniqueInput
  }

  /**
   * WebVMSnapshot deleteMany
   */
  export type WebVMSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebVMSnapshots to delete
     */
    where?: WebVMSnapshotWhereInput
    /**
     * Limit how many WebVMSnapshots to delete.
     */
    limit?: number
  }

  /**
   * WebVMSnapshot without action
   */
  export type WebVMSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebVMSnapshot
     */
    select?: WebVMSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebVMSnapshot
     */
    omit?: WebVMSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebVMSnapshotInclude<ExtArgs> | null
  }


  /**
   * Model WorkspacePersistence
   */

  export type AggregateWorkspacePersistence = {
    _count: WorkspacePersistenceCountAggregateOutputType | null
    _avg: WorkspacePersistenceAvgAggregateOutputType | null
    _sum: WorkspacePersistenceSumAggregateOutputType | null
    _min: WorkspacePersistenceMinAggregateOutputType | null
    _max: WorkspacePersistenceMaxAggregateOutputType | null
  }

  export type WorkspacePersistenceAvgAggregateOutputType = {
    storageSize: number | null
    backupCount: number | null
  }

  export type WorkspacePersistenceSumAggregateOutputType = {
    storageSize: bigint | null
    backupCount: number | null
  }

  export type WorkspacePersistenceMinAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    storageSize: bigint | null
    backupCount: number | null
    lastBackup: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspacePersistenceMaxAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    storageSize: bigint | null
    backupCount: number | null
    lastBackup: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspacePersistenceCountAggregateOutputType = {
    id: number
    workspaceId: number
    storageSize: number
    backupCount: number
    lastBackup: number
    config: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkspacePersistenceAvgAggregateInputType = {
    storageSize?: true
    backupCount?: true
  }

  export type WorkspacePersistenceSumAggregateInputType = {
    storageSize?: true
    backupCount?: true
  }

  export type WorkspacePersistenceMinAggregateInputType = {
    id?: true
    workspaceId?: true
    storageSize?: true
    backupCount?: true
    lastBackup?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspacePersistenceMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    storageSize?: true
    backupCount?: true
    lastBackup?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspacePersistenceCountAggregateInputType = {
    id?: true
    workspaceId?: true
    storageSize?: true
    backupCount?: true
    lastBackup?: true
    config?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkspacePersistenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspacePersistence to aggregate.
     */
    where?: WorkspacePersistenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspacePersistences to fetch.
     */
    orderBy?: WorkspacePersistenceOrderByWithRelationInput | WorkspacePersistenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspacePersistenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspacePersistences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspacePersistences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkspacePersistences
    **/
    _count?: true | WorkspacePersistenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkspacePersistenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkspacePersistenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspacePersistenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspacePersistenceMaxAggregateInputType
  }

  export type GetWorkspacePersistenceAggregateType<T extends WorkspacePersistenceAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspacePersistence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspacePersistence[P]>
      : GetScalarType<T[P], AggregateWorkspacePersistence[P]>
  }




  export type WorkspacePersistenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspacePersistenceWhereInput
    orderBy?: WorkspacePersistenceOrderByWithAggregationInput | WorkspacePersistenceOrderByWithAggregationInput[]
    by: WorkspacePersistenceScalarFieldEnum[] | WorkspacePersistenceScalarFieldEnum
    having?: WorkspacePersistenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspacePersistenceCountAggregateInputType | true
    _avg?: WorkspacePersistenceAvgAggregateInputType
    _sum?: WorkspacePersistenceSumAggregateInputType
    _min?: WorkspacePersistenceMinAggregateInputType
    _max?: WorkspacePersistenceMaxAggregateInputType
  }

  export type WorkspacePersistenceGroupByOutputType = {
    id: string
    workspaceId: string
    storageSize: bigint
    backupCount: number
    lastBackup: Date | null
    config: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: WorkspacePersistenceCountAggregateOutputType | null
    _avg: WorkspacePersistenceAvgAggregateOutputType | null
    _sum: WorkspacePersistenceSumAggregateOutputType | null
    _min: WorkspacePersistenceMinAggregateOutputType | null
    _max: WorkspacePersistenceMaxAggregateOutputType | null
  }

  type GetWorkspacePersistenceGroupByPayload<T extends WorkspacePersistenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspacePersistenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspacePersistenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspacePersistenceGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspacePersistenceGroupByOutputType[P]>
        }
      >
    >


  export type WorkspacePersistenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    storageSize?: boolean
    backupCount?: boolean
    lastBackup?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspacePersistence"]>

  export type WorkspacePersistenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    storageSize?: boolean
    backupCount?: boolean
    lastBackup?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspacePersistence"]>

  export type WorkspacePersistenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    storageSize?: boolean
    backupCount?: boolean
    lastBackup?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspacePersistence"]>

  export type WorkspacePersistenceSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    storageSize?: boolean
    backupCount?: boolean
    lastBackup?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkspacePersistenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "storageSize" | "backupCount" | "lastBackup" | "config" | "createdAt" | "updatedAt", ExtArgs["result"]["workspacePersistence"]>
  export type WorkspacePersistenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type WorkspacePersistenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type WorkspacePersistenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $WorkspacePersistencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkspacePersistence"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workspaceId: string
      storageSize: bigint
      backupCount: number
      lastBackup: Date | null
      config: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workspacePersistence"]>
    composites: {}
  }

  type WorkspacePersistenceGetPayload<S extends boolean | null | undefined | WorkspacePersistenceDefaultArgs> = $Result.GetResult<Prisma.$WorkspacePersistencePayload, S>

  type WorkspacePersistenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspacePersistenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspacePersistenceCountAggregateInputType | true
    }

  export interface WorkspacePersistenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkspacePersistence'], meta: { name: 'WorkspacePersistence' } }
    /**
     * Find zero or one WorkspacePersistence that matches the filter.
     * @param {WorkspacePersistenceFindUniqueArgs} args - Arguments to find a WorkspacePersistence
     * @example
     * // Get one WorkspacePersistence
     * const workspacePersistence = await prisma.workspacePersistence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspacePersistenceFindUniqueArgs>(args: SelectSubset<T, WorkspacePersistenceFindUniqueArgs<ExtArgs>>): Prisma__WorkspacePersistenceClient<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkspacePersistence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspacePersistenceFindUniqueOrThrowArgs} args - Arguments to find a WorkspacePersistence
     * @example
     * // Get one WorkspacePersistence
     * const workspacePersistence = await prisma.workspacePersistence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspacePersistenceFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspacePersistenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspacePersistenceClient<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspacePersistence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspacePersistenceFindFirstArgs} args - Arguments to find a WorkspacePersistence
     * @example
     * // Get one WorkspacePersistence
     * const workspacePersistence = await prisma.workspacePersistence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspacePersistenceFindFirstArgs>(args?: SelectSubset<T, WorkspacePersistenceFindFirstArgs<ExtArgs>>): Prisma__WorkspacePersistenceClient<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspacePersistence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspacePersistenceFindFirstOrThrowArgs} args - Arguments to find a WorkspacePersistence
     * @example
     * // Get one WorkspacePersistence
     * const workspacePersistence = await prisma.workspacePersistence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspacePersistenceFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspacePersistenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspacePersistenceClient<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkspacePersistences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspacePersistenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspacePersistences
     * const workspacePersistences = await prisma.workspacePersistence.findMany()
     * 
     * // Get first 10 WorkspacePersistences
     * const workspacePersistences = await prisma.workspacePersistence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspacePersistenceWithIdOnly = await prisma.workspacePersistence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspacePersistenceFindManyArgs>(args?: SelectSubset<T, WorkspacePersistenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkspacePersistence.
     * @param {WorkspacePersistenceCreateArgs} args - Arguments to create a WorkspacePersistence.
     * @example
     * // Create one WorkspacePersistence
     * const WorkspacePersistence = await prisma.workspacePersistence.create({
     *   data: {
     *     // ... data to create a WorkspacePersistence
     *   }
     * })
     * 
     */
    create<T extends WorkspacePersistenceCreateArgs>(args: SelectSubset<T, WorkspacePersistenceCreateArgs<ExtArgs>>): Prisma__WorkspacePersistenceClient<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkspacePersistences.
     * @param {WorkspacePersistenceCreateManyArgs} args - Arguments to create many WorkspacePersistences.
     * @example
     * // Create many WorkspacePersistences
     * const workspacePersistence = await prisma.workspacePersistence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspacePersistenceCreateManyArgs>(args?: SelectSubset<T, WorkspacePersistenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkspacePersistences and returns the data saved in the database.
     * @param {WorkspacePersistenceCreateManyAndReturnArgs} args - Arguments to create many WorkspacePersistences.
     * @example
     * // Create many WorkspacePersistences
     * const workspacePersistence = await prisma.workspacePersistence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkspacePersistences and only return the `id`
     * const workspacePersistenceWithIdOnly = await prisma.workspacePersistence.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspacePersistenceCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspacePersistenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkspacePersistence.
     * @param {WorkspacePersistenceDeleteArgs} args - Arguments to delete one WorkspacePersistence.
     * @example
     * // Delete one WorkspacePersistence
     * const WorkspacePersistence = await prisma.workspacePersistence.delete({
     *   where: {
     *     // ... filter to delete one WorkspacePersistence
     *   }
     * })
     * 
     */
    delete<T extends WorkspacePersistenceDeleteArgs>(args: SelectSubset<T, WorkspacePersistenceDeleteArgs<ExtArgs>>): Prisma__WorkspacePersistenceClient<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkspacePersistence.
     * @param {WorkspacePersistenceUpdateArgs} args - Arguments to update one WorkspacePersistence.
     * @example
     * // Update one WorkspacePersistence
     * const workspacePersistence = await prisma.workspacePersistence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspacePersistenceUpdateArgs>(args: SelectSubset<T, WorkspacePersistenceUpdateArgs<ExtArgs>>): Prisma__WorkspacePersistenceClient<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkspacePersistences.
     * @param {WorkspacePersistenceDeleteManyArgs} args - Arguments to filter WorkspacePersistences to delete.
     * @example
     * // Delete a few WorkspacePersistences
     * const { count } = await prisma.workspacePersistence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspacePersistenceDeleteManyArgs>(args?: SelectSubset<T, WorkspacePersistenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspacePersistences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspacePersistenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspacePersistences
     * const workspacePersistence = await prisma.workspacePersistence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspacePersistenceUpdateManyArgs>(args: SelectSubset<T, WorkspacePersistenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspacePersistences and returns the data updated in the database.
     * @param {WorkspacePersistenceUpdateManyAndReturnArgs} args - Arguments to update many WorkspacePersistences.
     * @example
     * // Update many WorkspacePersistences
     * const workspacePersistence = await prisma.workspacePersistence.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkspacePersistences and only return the `id`
     * const workspacePersistenceWithIdOnly = await prisma.workspacePersistence.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspacePersistenceUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspacePersistenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkspacePersistence.
     * @param {WorkspacePersistenceUpsertArgs} args - Arguments to update or create a WorkspacePersistence.
     * @example
     * // Update or create a WorkspacePersistence
     * const workspacePersistence = await prisma.workspacePersistence.upsert({
     *   create: {
     *     // ... data to create a WorkspacePersistence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspacePersistence we want to update
     *   }
     * })
     */
    upsert<T extends WorkspacePersistenceUpsertArgs>(args: SelectSubset<T, WorkspacePersistenceUpsertArgs<ExtArgs>>): Prisma__WorkspacePersistenceClient<$Result.GetResult<Prisma.$WorkspacePersistencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkspacePersistences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspacePersistenceCountArgs} args - Arguments to filter WorkspacePersistences to count.
     * @example
     * // Count the number of WorkspacePersistences
     * const count = await prisma.workspacePersistence.count({
     *   where: {
     *     // ... the filter for the WorkspacePersistences we want to count
     *   }
     * })
    **/
    count<T extends WorkspacePersistenceCountArgs>(
      args?: Subset<T, WorkspacePersistenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspacePersistenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkspacePersistence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspacePersistenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspacePersistenceAggregateArgs>(args: Subset<T, WorkspacePersistenceAggregateArgs>): Prisma.PrismaPromise<GetWorkspacePersistenceAggregateType<T>>

    /**
     * Group by WorkspacePersistence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspacePersistenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspacePersistenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspacePersistenceGroupByArgs['orderBy'] }
        : { orderBy?: WorkspacePersistenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspacePersistenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspacePersistenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkspacePersistence model
   */
  readonly fields: WorkspacePersistenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspacePersistence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspacePersistenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkspacePersistence model
   */
  interface WorkspacePersistenceFieldRefs {
    readonly id: FieldRef<"WorkspacePersistence", 'String'>
    readonly workspaceId: FieldRef<"WorkspacePersistence", 'String'>
    readonly storageSize: FieldRef<"WorkspacePersistence", 'BigInt'>
    readonly backupCount: FieldRef<"WorkspacePersistence", 'Int'>
    readonly lastBackup: FieldRef<"WorkspacePersistence", 'DateTime'>
    readonly config: FieldRef<"WorkspacePersistence", 'Json'>
    readonly createdAt: FieldRef<"WorkspacePersistence", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkspacePersistence", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkspacePersistence findUnique
   */
  export type WorkspacePersistenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
    /**
     * Filter, which WorkspacePersistence to fetch.
     */
    where: WorkspacePersistenceWhereUniqueInput
  }

  /**
   * WorkspacePersistence findUniqueOrThrow
   */
  export type WorkspacePersistenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
    /**
     * Filter, which WorkspacePersistence to fetch.
     */
    where: WorkspacePersistenceWhereUniqueInput
  }

  /**
   * WorkspacePersistence findFirst
   */
  export type WorkspacePersistenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
    /**
     * Filter, which WorkspacePersistence to fetch.
     */
    where?: WorkspacePersistenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspacePersistences to fetch.
     */
    orderBy?: WorkspacePersistenceOrderByWithRelationInput | WorkspacePersistenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspacePersistences.
     */
    cursor?: WorkspacePersistenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspacePersistences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspacePersistences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspacePersistences.
     */
    distinct?: WorkspacePersistenceScalarFieldEnum | WorkspacePersistenceScalarFieldEnum[]
  }

  /**
   * WorkspacePersistence findFirstOrThrow
   */
  export type WorkspacePersistenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
    /**
     * Filter, which WorkspacePersistence to fetch.
     */
    where?: WorkspacePersistenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspacePersistences to fetch.
     */
    orderBy?: WorkspacePersistenceOrderByWithRelationInput | WorkspacePersistenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspacePersistences.
     */
    cursor?: WorkspacePersistenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspacePersistences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspacePersistences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspacePersistences.
     */
    distinct?: WorkspacePersistenceScalarFieldEnum | WorkspacePersistenceScalarFieldEnum[]
  }

  /**
   * WorkspacePersistence findMany
   */
  export type WorkspacePersistenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
    /**
     * Filter, which WorkspacePersistences to fetch.
     */
    where?: WorkspacePersistenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspacePersistences to fetch.
     */
    orderBy?: WorkspacePersistenceOrderByWithRelationInput | WorkspacePersistenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkspacePersistences.
     */
    cursor?: WorkspacePersistenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspacePersistences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspacePersistences.
     */
    skip?: number
    distinct?: WorkspacePersistenceScalarFieldEnum | WorkspacePersistenceScalarFieldEnum[]
  }

  /**
   * WorkspacePersistence create
   */
  export type WorkspacePersistenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkspacePersistence.
     */
    data: XOR<WorkspacePersistenceCreateInput, WorkspacePersistenceUncheckedCreateInput>
  }

  /**
   * WorkspacePersistence createMany
   */
  export type WorkspacePersistenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkspacePersistences.
     */
    data: WorkspacePersistenceCreateManyInput | WorkspacePersistenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkspacePersistence createManyAndReturn
   */
  export type WorkspacePersistenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * The data used to create many WorkspacePersistences.
     */
    data: WorkspacePersistenceCreateManyInput | WorkspacePersistenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspacePersistence update
   */
  export type WorkspacePersistenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkspacePersistence.
     */
    data: XOR<WorkspacePersistenceUpdateInput, WorkspacePersistenceUncheckedUpdateInput>
    /**
     * Choose, which WorkspacePersistence to update.
     */
    where: WorkspacePersistenceWhereUniqueInput
  }

  /**
   * WorkspacePersistence updateMany
   */
  export type WorkspacePersistenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkspacePersistences.
     */
    data: XOR<WorkspacePersistenceUpdateManyMutationInput, WorkspacePersistenceUncheckedUpdateManyInput>
    /**
     * Filter which WorkspacePersistences to update
     */
    where?: WorkspacePersistenceWhereInput
    /**
     * Limit how many WorkspacePersistences to update.
     */
    limit?: number
  }

  /**
   * WorkspacePersistence updateManyAndReturn
   */
  export type WorkspacePersistenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * The data used to update WorkspacePersistences.
     */
    data: XOR<WorkspacePersistenceUpdateManyMutationInput, WorkspacePersistenceUncheckedUpdateManyInput>
    /**
     * Filter which WorkspacePersistences to update
     */
    where?: WorkspacePersistenceWhereInput
    /**
     * Limit how many WorkspacePersistences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspacePersistence upsert
   */
  export type WorkspacePersistenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkspacePersistence to update in case it exists.
     */
    where: WorkspacePersistenceWhereUniqueInput
    /**
     * In case the WorkspacePersistence found by the `where` argument doesn't exist, create a new WorkspacePersistence with this data.
     */
    create: XOR<WorkspacePersistenceCreateInput, WorkspacePersistenceUncheckedCreateInput>
    /**
     * In case the WorkspacePersistence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspacePersistenceUpdateInput, WorkspacePersistenceUncheckedUpdateInput>
  }

  /**
   * WorkspacePersistence delete
   */
  export type WorkspacePersistenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
    /**
     * Filter which WorkspacePersistence to delete.
     */
    where: WorkspacePersistenceWhereUniqueInput
  }

  /**
   * WorkspacePersistence deleteMany
   */
  export type WorkspacePersistenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspacePersistences to delete
     */
    where?: WorkspacePersistenceWhereInput
    /**
     * Limit how many WorkspacePersistences to delete.
     */
    limit?: number
  }

  /**
   * WorkspacePersistence without action
   */
  export type WorkspacePersistenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspacePersistence
     */
    select?: WorkspacePersistenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspacePersistence
     */
    omit?: WorkspacePersistenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspacePersistenceInclude<ExtArgs> | null
  }


  /**
   * Model InfrastructureAlert
   */

  export type AggregateInfrastructureAlert = {
    _count: InfrastructureAlertCountAggregateOutputType | null
    _avg: InfrastructureAlertAvgAggregateOutputType | null
    _sum: InfrastructureAlertSumAggregateOutputType | null
    _min: InfrastructureAlertMinAggregateOutputType | null
    _max: InfrastructureAlertMaxAggregateOutputType | null
  }

  export type InfrastructureAlertAvgAggregateOutputType = {
    threshold: number | null
  }

  export type InfrastructureAlertSumAggregateOutputType = {
    threshold: number | null
  }

  export type InfrastructureAlertMinAggregateOutputType = {
    id: string | null
    name: string | null
    query: string | null
    condition: string | null
    threshold: number | null
    duration: string | null
    severity: $Enums.AlertSeverity | null
    state: $Enums.AlertState | null
    createdAt: Date | null
    updatedAt: Date | null
    firedAt: Date | null
    resolvedAt: Date | null
  }

  export type InfrastructureAlertMaxAggregateOutputType = {
    id: string | null
    name: string | null
    query: string | null
    condition: string | null
    threshold: number | null
    duration: string | null
    severity: $Enums.AlertSeverity | null
    state: $Enums.AlertState | null
    createdAt: Date | null
    updatedAt: Date | null
    firedAt: Date | null
    resolvedAt: Date | null
  }

  export type InfrastructureAlertCountAggregateOutputType = {
    id: number
    name: number
    query: number
    condition: number
    threshold: number
    duration: number
    severity: number
    state: number
    labels: number
    annotations: number
    createdAt: number
    updatedAt: number
    firedAt: number
    resolvedAt: number
    _all: number
  }


  export type InfrastructureAlertAvgAggregateInputType = {
    threshold?: true
  }

  export type InfrastructureAlertSumAggregateInputType = {
    threshold?: true
  }

  export type InfrastructureAlertMinAggregateInputType = {
    id?: true
    name?: true
    query?: true
    condition?: true
    threshold?: true
    duration?: true
    severity?: true
    state?: true
    createdAt?: true
    updatedAt?: true
    firedAt?: true
    resolvedAt?: true
  }

  export type InfrastructureAlertMaxAggregateInputType = {
    id?: true
    name?: true
    query?: true
    condition?: true
    threshold?: true
    duration?: true
    severity?: true
    state?: true
    createdAt?: true
    updatedAt?: true
    firedAt?: true
    resolvedAt?: true
  }

  export type InfrastructureAlertCountAggregateInputType = {
    id?: true
    name?: true
    query?: true
    condition?: true
    threshold?: true
    duration?: true
    severity?: true
    state?: true
    labels?: true
    annotations?: true
    createdAt?: true
    updatedAt?: true
    firedAt?: true
    resolvedAt?: true
    _all?: true
  }

  export type InfrastructureAlertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InfrastructureAlert to aggregate.
     */
    where?: InfrastructureAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InfrastructureAlerts to fetch.
     */
    orderBy?: InfrastructureAlertOrderByWithRelationInput | InfrastructureAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InfrastructureAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InfrastructureAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InfrastructureAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InfrastructureAlerts
    **/
    _count?: true | InfrastructureAlertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InfrastructureAlertAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InfrastructureAlertSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InfrastructureAlertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InfrastructureAlertMaxAggregateInputType
  }

  export type GetInfrastructureAlertAggregateType<T extends InfrastructureAlertAggregateArgs> = {
        [P in keyof T & keyof AggregateInfrastructureAlert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInfrastructureAlert[P]>
      : GetScalarType<T[P], AggregateInfrastructureAlert[P]>
  }




  export type InfrastructureAlertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InfrastructureAlertWhereInput
    orderBy?: InfrastructureAlertOrderByWithAggregationInput | InfrastructureAlertOrderByWithAggregationInput[]
    by: InfrastructureAlertScalarFieldEnum[] | InfrastructureAlertScalarFieldEnum
    having?: InfrastructureAlertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InfrastructureAlertCountAggregateInputType | true
    _avg?: InfrastructureAlertAvgAggregateInputType
    _sum?: InfrastructureAlertSumAggregateInputType
    _min?: InfrastructureAlertMinAggregateInputType
    _max?: InfrastructureAlertMaxAggregateInputType
  }

  export type InfrastructureAlertGroupByOutputType = {
    id: string
    name: string
    query: string
    condition: string
    threshold: number
    duration: string
    severity: $Enums.AlertSeverity
    state: $Enums.AlertState
    labels: JsonValue | null
    annotations: JsonValue | null
    createdAt: Date
    updatedAt: Date
    firedAt: Date | null
    resolvedAt: Date | null
    _count: InfrastructureAlertCountAggregateOutputType | null
    _avg: InfrastructureAlertAvgAggregateOutputType | null
    _sum: InfrastructureAlertSumAggregateOutputType | null
    _min: InfrastructureAlertMinAggregateOutputType | null
    _max: InfrastructureAlertMaxAggregateOutputType | null
  }

  type GetInfrastructureAlertGroupByPayload<T extends InfrastructureAlertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InfrastructureAlertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InfrastructureAlertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InfrastructureAlertGroupByOutputType[P]>
            : GetScalarType<T[P], InfrastructureAlertGroupByOutputType[P]>
        }
      >
    >


  export type InfrastructureAlertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    query?: boolean
    condition?: boolean
    threshold?: boolean
    duration?: boolean
    severity?: boolean
    state?: boolean
    labels?: boolean
    annotations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firedAt?: boolean
    resolvedAt?: boolean
    notifications?: boolean | InfrastructureAlert$notificationsArgs<ExtArgs>
    _count?: boolean | InfrastructureAlertCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["infrastructureAlert"]>

  export type InfrastructureAlertSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    query?: boolean
    condition?: boolean
    threshold?: boolean
    duration?: boolean
    severity?: boolean
    state?: boolean
    labels?: boolean
    annotations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firedAt?: boolean
    resolvedAt?: boolean
  }, ExtArgs["result"]["infrastructureAlert"]>

  export type InfrastructureAlertSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    query?: boolean
    condition?: boolean
    threshold?: boolean
    duration?: boolean
    severity?: boolean
    state?: boolean
    labels?: boolean
    annotations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firedAt?: boolean
    resolvedAt?: boolean
  }, ExtArgs["result"]["infrastructureAlert"]>

  export type InfrastructureAlertSelectScalar = {
    id?: boolean
    name?: boolean
    query?: boolean
    condition?: boolean
    threshold?: boolean
    duration?: boolean
    severity?: boolean
    state?: boolean
    labels?: boolean
    annotations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firedAt?: boolean
    resolvedAt?: boolean
  }

  export type InfrastructureAlertOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "query" | "condition" | "threshold" | "duration" | "severity" | "state" | "labels" | "annotations" | "createdAt" | "updatedAt" | "firedAt" | "resolvedAt", ExtArgs["result"]["infrastructureAlert"]>
  export type InfrastructureAlertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | InfrastructureAlert$notificationsArgs<ExtArgs>
    _count?: boolean | InfrastructureAlertCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InfrastructureAlertIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type InfrastructureAlertIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $InfrastructureAlertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InfrastructureAlert"
    objects: {
      notifications: Prisma.$AlertNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      query: string
      condition: string
      threshold: number
      duration: string
      severity: $Enums.AlertSeverity
      state: $Enums.AlertState
      labels: Prisma.JsonValue | null
      annotations: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      firedAt: Date | null
      resolvedAt: Date | null
    }, ExtArgs["result"]["infrastructureAlert"]>
    composites: {}
  }

  type InfrastructureAlertGetPayload<S extends boolean | null | undefined | InfrastructureAlertDefaultArgs> = $Result.GetResult<Prisma.$InfrastructureAlertPayload, S>

  type InfrastructureAlertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InfrastructureAlertFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InfrastructureAlertCountAggregateInputType | true
    }

  export interface InfrastructureAlertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InfrastructureAlert'], meta: { name: 'InfrastructureAlert' } }
    /**
     * Find zero or one InfrastructureAlert that matches the filter.
     * @param {InfrastructureAlertFindUniqueArgs} args - Arguments to find a InfrastructureAlert
     * @example
     * // Get one InfrastructureAlert
     * const infrastructureAlert = await prisma.infrastructureAlert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InfrastructureAlertFindUniqueArgs>(args: SelectSubset<T, InfrastructureAlertFindUniqueArgs<ExtArgs>>): Prisma__InfrastructureAlertClient<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InfrastructureAlert that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InfrastructureAlertFindUniqueOrThrowArgs} args - Arguments to find a InfrastructureAlert
     * @example
     * // Get one InfrastructureAlert
     * const infrastructureAlert = await prisma.infrastructureAlert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InfrastructureAlertFindUniqueOrThrowArgs>(args: SelectSubset<T, InfrastructureAlertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InfrastructureAlertClient<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InfrastructureAlert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureAlertFindFirstArgs} args - Arguments to find a InfrastructureAlert
     * @example
     * // Get one InfrastructureAlert
     * const infrastructureAlert = await prisma.infrastructureAlert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InfrastructureAlertFindFirstArgs>(args?: SelectSubset<T, InfrastructureAlertFindFirstArgs<ExtArgs>>): Prisma__InfrastructureAlertClient<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InfrastructureAlert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureAlertFindFirstOrThrowArgs} args - Arguments to find a InfrastructureAlert
     * @example
     * // Get one InfrastructureAlert
     * const infrastructureAlert = await prisma.infrastructureAlert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InfrastructureAlertFindFirstOrThrowArgs>(args?: SelectSubset<T, InfrastructureAlertFindFirstOrThrowArgs<ExtArgs>>): Prisma__InfrastructureAlertClient<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InfrastructureAlerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureAlertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InfrastructureAlerts
     * const infrastructureAlerts = await prisma.infrastructureAlert.findMany()
     * 
     * // Get first 10 InfrastructureAlerts
     * const infrastructureAlerts = await prisma.infrastructureAlert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const infrastructureAlertWithIdOnly = await prisma.infrastructureAlert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InfrastructureAlertFindManyArgs>(args?: SelectSubset<T, InfrastructureAlertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InfrastructureAlert.
     * @param {InfrastructureAlertCreateArgs} args - Arguments to create a InfrastructureAlert.
     * @example
     * // Create one InfrastructureAlert
     * const InfrastructureAlert = await prisma.infrastructureAlert.create({
     *   data: {
     *     // ... data to create a InfrastructureAlert
     *   }
     * })
     * 
     */
    create<T extends InfrastructureAlertCreateArgs>(args: SelectSubset<T, InfrastructureAlertCreateArgs<ExtArgs>>): Prisma__InfrastructureAlertClient<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InfrastructureAlerts.
     * @param {InfrastructureAlertCreateManyArgs} args - Arguments to create many InfrastructureAlerts.
     * @example
     * // Create many InfrastructureAlerts
     * const infrastructureAlert = await prisma.infrastructureAlert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InfrastructureAlertCreateManyArgs>(args?: SelectSubset<T, InfrastructureAlertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InfrastructureAlerts and returns the data saved in the database.
     * @param {InfrastructureAlertCreateManyAndReturnArgs} args - Arguments to create many InfrastructureAlerts.
     * @example
     * // Create many InfrastructureAlerts
     * const infrastructureAlert = await prisma.infrastructureAlert.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InfrastructureAlerts and only return the `id`
     * const infrastructureAlertWithIdOnly = await prisma.infrastructureAlert.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InfrastructureAlertCreateManyAndReturnArgs>(args?: SelectSubset<T, InfrastructureAlertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InfrastructureAlert.
     * @param {InfrastructureAlertDeleteArgs} args - Arguments to delete one InfrastructureAlert.
     * @example
     * // Delete one InfrastructureAlert
     * const InfrastructureAlert = await prisma.infrastructureAlert.delete({
     *   where: {
     *     // ... filter to delete one InfrastructureAlert
     *   }
     * })
     * 
     */
    delete<T extends InfrastructureAlertDeleteArgs>(args: SelectSubset<T, InfrastructureAlertDeleteArgs<ExtArgs>>): Prisma__InfrastructureAlertClient<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InfrastructureAlert.
     * @param {InfrastructureAlertUpdateArgs} args - Arguments to update one InfrastructureAlert.
     * @example
     * // Update one InfrastructureAlert
     * const infrastructureAlert = await prisma.infrastructureAlert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InfrastructureAlertUpdateArgs>(args: SelectSubset<T, InfrastructureAlertUpdateArgs<ExtArgs>>): Prisma__InfrastructureAlertClient<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InfrastructureAlerts.
     * @param {InfrastructureAlertDeleteManyArgs} args - Arguments to filter InfrastructureAlerts to delete.
     * @example
     * // Delete a few InfrastructureAlerts
     * const { count } = await prisma.infrastructureAlert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InfrastructureAlertDeleteManyArgs>(args?: SelectSubset<T, InfrastructureAlertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InfrastructureAlerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureAlertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InfrastructureAlerts
     * const infrastructureAlert = await prisma.infrastructureAlert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InfrastructureAlertUpdateManyArgs>(args: SelectSubset<T, InfrastructureAlertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InfrastructureAlerts and returns the data updated in the database.
     * @param {InfrastructureAlertUpdateManyAndReturnArgs} args - Arguments to update many InfrastructureAlerts.
     * @example
     * // Update many InfrastructureAlerts
     * const infrastructureAlert = await prisma.infrastructureAlert.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InfrastructureAlerts and only return the `id`
     * const infrastructureAlertWithIdOnly = await prisma.infrastructureAlert.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InfrastructureAlertUpdateManyAndReturnArgs>(args: SelectSubset<T, InfrastructureAlertUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InfrastructureAlert.
     * @param {InfrastructureAlertUpsertArgs} args - Arguments to update or create a InfrastructureAlert.
     * @example
     * // Update or create a InfrastructureAlert
     * const infrastructureAlert = await prisma.infrastructureAlert.upsert({
     *   create: {
     *     // ... data to create a InfrastructureAlert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InfrastructureAlert we want to update
     *   }
     * })
     */
    upsert<T extends InfrastructureAlertUpsertArgs>(args: SelectSubset<T, InfrastructureAlertUpsertArgs<ExtArgs>>): Prisma__InfrastructureAlertClient<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InfrastructureAlerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureAlertCountArgs} args - Arguments to filter InfrastructureAlerts to count.
     * @example
     * // Count the number of InfrastructureAlerts
     * const count = await prisma.infrastructureAlert.count({
     *   where: {
     *     // ... the filter for the InfrastructureAlerts we want to count
     *   }
     * })
    **/
    count<T extends InfrastructureAlertCountArgs>(
      args?: Subset<T, InfrastructureAlertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InfrastructureAlertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InfrastructureAlert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureAlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InfrastructureAlertAggregateArgs>(args: Subset<T, InfrastructureAlertAggregateArgs>): Prisma.PrismaPromise<GetInfrastructureAlertAggregateType<T>>

    /**
     * Group by InfrastructureAlert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfrastructureAlertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InfrastructureAlertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InfrastructureAlertGroupByArgs['orderBy'] }
        : { orderBy?: InfrastructureAlertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InfrastructureAlertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInfrastructureAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InfrastructureAlert model
   */
  readonly fields: InfrastructureAlertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InfrastructureAlert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InfrastructureAlertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notifications<T extends InfrastructureAlert$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, InfrastructureAlert$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InfrastructureAlert model
   */
  interface InfrastructureAlertFieldRefs {
    readonly id: FieldRef<"InfrastructureAlert", 'String'>
    readonly name: FieldRef<"InfrastructureAlert", 'String'>
    readonly query: FieldRef<"InfrastructureAlert", 'String'>
    readonly condition: FieldRef<"InfrastructureAlert", 'String'>
    readonly threshold: FieldRef<"InfrastructureAlert", 'Float'>
    readonly duration: FieldRef<"InfrastructureAlert", 'String'>
    readonly severity: FieldRef<"InfrastructureAlert", 'AlertSeverity'>
    readonly state: FieldRef<"InfrastructureAlert", 'AlertState'>
    readonly labels: FieldRef<"InfrastructureAlert", 'Json'>
    readonly annotations: FieldRef<"InfrastructureAlert", 'Json'>
    readonly createdAt: FieldRef<"InfrastructureAlert", 'DateTime'>
    readonly updatedAt: FieldRef<"InfrastructureAlert", 'DateTime'>
    readonly firedAt: FieldRef<"InfrastructureAlert", 'DateTime'>
    readonly resolvedAt: FieldRef<"InfrastructureAlert", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InfrastructureAlert findUnique
   */
  export type InfrastructureAlertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfrastructureAlertInclude<ExtArgs> | null
    /**
     * Filter, which InfrastructureAlert to fetch.
     */
    where: InfrastructureAlertWhereUniqueInput
  }

  /**
   * InfrastructureAlert findUniqueOrThrow
   */
  export type InfrastructureAlertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfrastructureAlertInclude<ExtArgs> | null
    /**
     * Filter, which InfrastructureAlert to fetch.
     */
    where: InfrastructureAlertWhereUniqueInput
  }

  /**
   * InfrastructureAlert findFirst
   */
  export type InfrastructureAlertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfrastructureAlertInclude<ExtArgs> | null
    /**
     * Filter, which InfrastructureAlert to fetch.
     */
    where?: InfrastructureAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InfrastructureAlerts to fetch.
     */
    orderBy?: InfrastructureAlertOrderByWithRelationInput | InfrastructureAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InfrastructureAlerts.
     */
    cursor?: InfrastructureAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InfrastructureAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InfrastructureAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InfrastructureAlerts.
     */
    distinct?: InfrastructureAlertScalarFieldEnum | InfrastructureAlertScalarFieldEnum[]
  }

  /**
   * InfrastructureAlert findFirstOrThrow
   */
  export type InfrastructureAlertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfrastructureAlertInclude<ExtArgs> | null
    /**
     * Filter, which InfrastructureAlert to fetch.
     */
    where?: InfrastructureAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InfrastructureAlerts to fetch.
     */
    orderBy?: InfrastructureAlertOrderByWithRelationInput | InfrastructureAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InfrastructureAlerts.
     */
    cursor?: InfrastructureAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InfrastructureAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InfrastructureAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InfrastructureAlerts.
     */
    distinct?: InfrastructureAlertScalarFieldEnum | InfrastructureAlertScalarFieldEnum[]
  }

  /**
   * InfrastructureAlert findMany
   */
  export type InfrastructureAlertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfrastructureAlertInclude<ExtArgs> | null
    /**
     * Filter, which InfrastructureAlerts to fetch.
     */
    where?: InfrastructureAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InfrastructureAlerts to fetch.
     */
    orderBy?: InfrastructureAlertOrderByWithRelationInput | InfrastructureAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InfrastructureAlerts.
     */
    cursor?: InfrastructureAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InfrastructureAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InfrastructureAlerts.
     */
    skip?: number
    distinct?: InfrastructureAlertScalarFieldEnum | InfrastructureAlertScalarFieldEnum[]
  }

  /**
   * InfrastructureAlert create
   */
  export type InfrastructureAlertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfrastructureAlertInclude<ExtArgs> | null
    /**
     * The data needed to create a InfrastructureAlert.
     */
    data: XOR<InfrastructureAlertCreateInput, InfrastructureAlertUncheckedCreateInput>
  }

  /**
   * InfrastructureAlert createMany
   */
  export type InfrastructureAlertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InfrastructureAlerts.
     */
    data: InfrastructureAlertCreateManyInput | InfrastructureAlertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InfrastructureAlert createManyAndReturn
   */
  export type InfrastructureAlertCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * The data used to create many InfrastructureAlerts.
     */
    data: InfrastructureAlertCreateManyInput | InfrastructureAlertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InfrastructureAlert update
   */
  export type InfrastructureAlertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfrastructureAlertInclude<ExtArgs> | null
    /**
     * The data needed to update a InfrastructureAlert.
     */
    data: XOR<InfrastructureAlertUpdateInput, InfrastructureAlertUncheckedUpdateInput>
    /**
     * Choose, which InfrastructureAlert to update.
     */
    where: InfrastructureAlertWhereUniqueInput
  }

  /**
   * InfrastructureAlert updateMany
   */
  export type InfrastructureAlertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InfrastructureAlerts.
     */
    data: XOR<InfrastructureAlertUpdateManyMutationInput, InfrastructureAlertUncheckedUpdateManyInput>
    /**
     * Filter which InfrastructureAlerts to update
     */
    where?: InfrastructureAlertWhereInput
    /**
     * Limit how many InfrastructureAlerts to update.
     */
    limit?: number
  }

  /**
   * InfrastructureAlert updateManyAndReturn
   */
  export type InfrastructureAlertUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * The data used to update InfrastructureAlerts.
     */
    data: XOR<InfrastructureAlertUpdateManyMutationInput, InfrastructureAlertUncheckedUpdateManyInput>
    /**
     * Filter which InfrastructureAlerts to update
     */
    where?: InfrastructureAlertWhereInput
    /**
     * Limit how many InfrastructureAlerts to update.
     */
    limit?: number
  }

  /**
   * InfrastructureAlert upsert
   */
  export type InfrastructureAlertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfrastructureAlertInclude<ExtArgs> | null
    /**
     * The filter to search for the InfrastructureAlert to update in case it exists.
     */
    where: InfrastructureAlertWhereUniqueInput
    /**
     * In case the InfrastructureAlert found by the `where` argument doesn't exist, create a new InfrastructureAlert with this data.
     */
    create: XOR<InfrastructureAlertCreateInput, InfrastructureAlertUncheckedCreateInput>
    /**
     * In case the InfrastructureAlert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InfrastructureAlertUpdateInput, InfrastructureAlertUncheckedUpdateInput>
  }

  /**
   * InfrastructureAlert delete
   */
  export type InfrastructureAlertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfrastructureAlertInclude<ExtArgs> | null
    /**
     * Filter which InfrastructureAlert to delete.
     */
    where: InfrastructureAlertWhereUniqueInput
  }

  /**
   * InfrastructureAlert deleteMany
   */
  export type InfrastructureAlertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InfrastructureAlerts to delete
     */
    where?: InfrastructureAlertWhereInput
    /**
     * Limit how many InfrastructureAlerts to delete.
     */
    limit?: number
  }

  /**
   * InfrastructureAlert.notifications
   */
  export type InfrastructureAlert$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
    where?: AlertNotificationWhereInput
    orderBy?: AlertNotificationOrderByWithRelationInput | AlertNotificationOrderByWithRelationInput[]
    cursor?: AlertNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertNotificationScalarFieldEnum | AlertNotificationScalarFieldEnum[]
  }

  /**
   * InfrastructureAlert without action
   */
  export type InfrastructureAlertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InfrastructureAlert
     */
    select?: InfrastructureAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InfrastructureAlert
     */
    omit?: InfrastructureAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfrastructureAlertInclude<ExtArgs> | null
  }


  /**
   * Model AlertNotification
   */

  export type AggregateAlertNotification = {
    _count: AlertNotificationCountAggregateOutputType | null
    _min: AlertNotificationMinAggregateOutputType | null
    _max: AlertNotificationMaxAggregateOutputType | null
  }

  export type AlertNotificationMinAggregateOutputType = {
    id: string | null
    alertId: string | null
    type: $Enums.NotificationType | null
    recipient: string | null
    message: string | null
    sentAt: Date | null
  }

  export type AlertNotificationMaxAggregateOutputType = {
    id: string | null
    alertId: string | null
    type: $Enums.NotificationType | null
    recipient: string | null
    message: string | null
    sentAt: Date | null
  }

  export type AlertNotificationCountAggregateOutputType = {
    id: number
    alertId: number
    type: number
    recipient: number
    message: number
    sentAt: number
    _all: number
  }


  export type AlertNotificationMinAggregateInputType = {
    id?: true
    alertId?: true
    type?: true
    recipient?: true
    message?: true
    sentAt?: true
  }

  export type AlertNotificationMaxAggregateInputType = {
    id?: true
    alertId?: true
    type?: true
    recipient?: true
    message?: true
    sentAt?: true
  }

  export type AlertNotificationCountAggregateInputType = {
    id?: true
    alertId?: true
    type?: true
    recipient?: true
    message?: true
    sentAt?: true
    _all?: true
  }

  export type AlertNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlertNotification to aggregate.
     */
    where?: AlertNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertNotifications to fetch.
     */
    orderBy?: AlertNotificationOrderByWithRelationInput | AlertNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlertNotifications
    **/
    _count?: true | AlertNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertNotificationMaxAggregateInputType
  }

  export type GetAlertNotificationAggregateType<T extends AlertNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateAlertNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlertNotification[P]>
      : GetScalarType<T[P], AggregateAlertNotification[P]>
  }




  export type AlertNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertNotificationWhereInput
    orderBy?: AlertNotificationOrderByWithAggregationInput | AlertNotificationOrderByWithAggregationInput[]
    by: AlertNotificationScalarFieldEnum[] | AlertNotificationScalarFieldEnum
    having?: AlertNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertNotificationCountAggregateInputType | true
    _min?: AlertNotificationMinAggregateInputType
    _max?: AlertNotificationMaxAggregateInputType
  }

  export type AlertNotificationGroupByOutputType = {
    id: string
    alertId: string
    type: $Enums.NotificationType
    recipient: string
    message: string
    sentAt: Date
    _count: AlertNotificationCountAggregateOutputType | null
    _min: AlertNotificationMinAggregateOutputType | null
    _max: AlertNotificationMaxAggregateOutputType | null
  }

  type GetAlertNotificationGroupByPayload<T extends AlertNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], AlertNotificationGroupByOutputType[P]>
        }
      >
    >


  export type AlertNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alertId?: boolean
    type?: boolean
    recipient?: boolean
    message?: boolean
    sentAt?: boolean
    alert?: boolean | InfrastructureAlertDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alertNotification"]>

  export type AlertNotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alertId?: boolean
    type?: boolean
    recipient?: boolean
    message?: boolean
    sentAt?: boolean
    alert?: boolean | InfrastructureAlertDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alertNotification"]>

  export type AlertNotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alertId?: boolean
    type?: boolean
    recipient?: boolean
    message?: boolean
    sentAt?: boolean
    alert?: boolean | InfrastructureAlertDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alertNotification"]>

  export type AlertNotificationSelectScalar = {
    id?: boolean
    alertId?: boolean
    type?: boolean
    recipient?: boolean
    message?: boolean
    sentAt?: boolean
  }

  export type AlertNotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "alertId" | "type" | "recipient" | "message" | "sentAt", ExtArgs["result"]["alertNotification"]>
  export type AlertNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alert?: boolean | InfrastructureAlertDefaultArgs<ExtArgs>
  }
  export type AlertNotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alert?: boolean | InfrastructureAlertDefaultArgs<ExtArgs>
  }
  export type AlertNotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alert?: boolean | InfrastructureAlertDefaultArgs<ExtArgs>
  }

  export type $AlertNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AlertNotification"
    objects: {
      alert: Prisma.$InfrastructureAlertPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      alertId: string
      type: $Enums.NotificationType
      recipient: string
      message: string
      sentAt: Date
    }, ExtArgs["result"]["alertNotification"]>
    composites: {}
  }

  type AlertNotificationGetPayload<S extends boolean | null | undefined | AlertNotificationDefaultArgs> = $Result.GetResult<Prisma.$AlertNotificationPayload, S>

  type AlertNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlertNotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlertNotificationCountAggregateInputType | true
    }

  export interface AlertNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlertNotification'], meta: { name: 'AlertNotification' } }
    /**
     * Find zero or one AlertNotification that matches the filter.
     * @param {AlertNotificationFindUniqueArgs} args - Arguments to find a AlertNotification
     * @example
     * // Get one AlertNotification
     * const alertNotification = await prisma.alertNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertNotificationFindUniqueArgs>(args: SelectSubset<T, AlertNotificationFindUniqueArgs<ExtArgs>>): Prisma__AlertNotificationClient<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AlertNotification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlertNotificationFindUniqueOrThrowArgs} args - Arguments to find a AlertNotification
     * @example
     * // Get one AlertNotification
     * const alertNotification = await prisma.alertNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertNotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertNotificationClient<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlertNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertNotificationFindFirstArgs} args - Arguments to find a AlertNotification
     * @example
     * // Get one AlertNotification
     * const alertNotification = await prisma.alertNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertNotificationFindFirstArgs>(args?: SelectSubset<T, AlertNotificationFindFirstArgs<ExtArgs>>): Prisma__AlertNotificationClient<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlertNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertNotificationFindFirstOrThrowArgs} args - Arguments to find a AlertNotification
     * @example
     * // Get one AlertNotification
     * const alertNotification = await prisma.alertNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertNotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertNotificationClient<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AlertNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlertNotifications
     * const alertNotifications = await prisma.alertNotification.findMany()
     * 
     * // Get first 10 AlertNotifications
     * const alertNotifications = await prisma.alertNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alertNotificationWithIdOnly = await prisma.alertNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlertNotificationFindManyArgs>(args?: SelectSubset<T, AlertNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AlertNotification.
     * @param {AlertNotificationCreateArgs} args - Arguments to create a AlertNotification.
     * @example
     * // Create one AlertNotification
     * const AlertNotification = await prisma.alertNotification.create({
     *   data: {
     *     // ... data to create a AlertNotification
     *   }
     * })
     * 
     */
    create<T extends AlertNotificationCreateArgs>(args: SelectSubset<T, AlertNotificationCreateArgs<ExtArgs>>): Prisma__AlertNotificationClient<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AlertNotifications.
     * @param {AlertNotificationCreateManyArgs} args - Arguments to create many AlertNotifications.
     * @example
     * // Create many AlertNotifications
     * const alertNotification = await prisma.alertNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertNotificationCreateManyArgs>(args?: SelectSubset<T, AlertNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AlertNotifications and returns the data saved in the database.
     * @param {AlertNotificationCreateManyAndReturnArgs} args - Arguments to create many AlertNotifications.
     * @example
     * // Create many AlertNotifications
     * const alertNotification = await prisma.alertNotification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AlertNotifications and only return the `id`
     * const alertNotificationWithIdOnly = await prisma.alertNotification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlertNotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, AlertNotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AlertNotification.
     * @param {AlertNotificationDeleteArgs} args - Arguments to delete one AlertNotification.
     * @example
     * // Delete one AlertNotification
     * const AlertNotification = await prisma.alertNotification.delete({
     *   where: {
     *     // ... filter to delete one AlertNotification
     *   }
     * })
     * 
     */
    delete<T extends AlertNotificationDeleteArgs>(args: SelectSubset<T, AlertNotificationDeleteArgs<ExtArgs>>): Prisma__AlertNotificationClient<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AlertNotification.
     * @param {AlertNotificationUpdateArgs} args - Arguments to update one AlertNotification.
     * @example
     * // Update one AlertNotification
     * const alertNotification = await prisma.alertNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertNotificationUpdateArgs>(args: SelectSubset<T, AlertNotificationUpdateArgs<ExtArgs>>): Prisma__AlertNotificationClient<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AlertNotifications.
     * @param {AlertNotificationDeleteManyArgs} args - Arguments to filter AlertNotifications to delete.
     * @example
     * // Delete a few AlertNotifications
     * const { count } = await prisma.alertNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertNotificationDeleteManyArgs>(args?: SelectSubset<T, AlertNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlertNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlertNotifications
     * const alertNotification = await prisma.alertNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertNotificationUpdateManyArgs>(args: SelectSubset<T, AlertNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlertNotifications and returns the data updated in the database.
     * @param {AlertNotificationUpdateManyAndReturnArgs} args - Arguments to update many AlertNotifications.
     * @example
     * // Update many AlertNotifications
     * const alertNotification = await prisma.alertNotification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AlertNotifications and only return the `id`
     * const alertNotificationWithIdOnly = await prisma.alertNotification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlertNotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, AlertNotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AlertNotification.
     * @param {AlertNotificationUpsertArgs} args - Arguments to update or create a AlertNotification.
     * @example
     * // Update or create a AlertNotification
     * const alertNotification = await prisma.alertNotification.upsert({
     *   create: {
     *     // ... data to create a AlertNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlertNotification we want to update
     *   }
     * })
     */
    upsert<T extends AlertNotificationUpsertArgs>(args: SelectSubset<T, AlertNotificationUpsertArgs<ExtArgs>>): Prisma__AlertNotificationClient<$Result.GetResult<Prisma.$AlertNotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AlertNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertNotificationCountArgs} args - Arguments to filter AlertNotifications to count.
     * @example
     * // Count the number of AlertNotifications
     * const count = await prisma.alertNotification.count({
     *   where: {
     *     // ... the filter for the AlertNotifications we want to count
     *   }
     * })
    **/
    count<T extends AlertNotificationCountArgs>(
      args?: Subset<T, AlertNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlertNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertNotificationAggregateArgs>(args: Subset<T, AlertNotificationAggregateArgs>): Prisma.PrismaPromise<GetAlertNotificationAggregateType<T>>

    /**
     * Group by AlertNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertNotificationGroupByArgs['orderBy'] }
        : { orderBy?: AlertNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlertNotification model
   */
  readonly fields: AlertNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlertNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    alert<T extends InfrastructureAlertDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InfrastructureAlertDefaultArgs<ExtArgs>>): Prisma__InfrastructureAlertClient<$Result.GetResult<Prisma.$InfrastructureAlertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AlertNotification model
   */
  interface AlertNotificationFieldRefs {
    readonly id: FieldRef<"AlertNotification", 'String'>
    readonly alertId: FieldRef<"AlertNotification", 'String'>
    readonly type: FieldRef<"AlertNotification", 'NotificationType'>
    readonly recipient: FieldRef<"AlertNotification", 'String'>
    readonly message: FieldRef<"AlertNotification", 'String'>
    readonly sentAt: FieldRef<"AlertNotification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AlertNotification findUnique
   */
  export type AlertNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
    /**
     * Filter, which AlertNotification to fetch.
     */
    where: AlertNotificationWhereUniqueInput
  }

  /**
   * AlertNotification findUniqueOrThrow
   */
  export type AlertNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
    /**
     * Filter, which AlertNotification to fetch.
     */
    where: AlertNotificationWhereUniqueInput
  }

  /**
   * AlertNotification findFirst
   */
  export type AlertNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
    /**
     * Filter, which AlertNotification to fetch.
     */
    where?: AlertNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertNotifications to fetch.
     */
    orderBy?: AlertNotificationOrderByWithRelationInput | AlertNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlertNotifications.
     */
    cursor?: AlertNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlertNotifications.
     */
    distinct?: AlertNotificationScalarFieldEnum | AlertNotificationScalarFieldEnum[]
  }

  /**
   * AlertNotification findFirstOrThrow
   */
  export type AlertNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
    /**
     * Filter, which AlertNotification to fetch.
     */
    where?: AlertNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertNotifications to fetch.
     */
    orderBy?: AlertNotificationOrderByWithRelationInput | AlertNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlertNotifications.
     */
    cursor?: AlertNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlertNotifications.
     */
    distinct?: AlertNotificationScalarFieldEnum | AlertNotificationScalarFieldEnum[]
  }

  /**
   * AlertNotification findMany
   */
  export type AlertNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
    /**
     * Filter, which AlertNotifications to fetch.
     */
    where?: AlertNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertNotifications to fetch.
     */
    orderBy?: AlertNotificationOrderByWithRelationInput | AlertNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlertNotifications.
     */
    cursor?: AlertNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertNotifications.
     */
    skip?: number
    distinct?: AlertNotificationScalarFieldEnum | AlertNotificationScalarFieldEnum[]
  }

  /**
   * AlertNotification create
   */
  export type AlertNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a AlertNotification.
     */
    data: XOR<AlertNotificationCreateInput, AlertNotificationUncheckedCreateInput>
  }

  /**
   * AlertNotification createMany
   */
  export type AlertNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlertNotifications.
     */
    data: AlertNotificationCreateManyInput | AlertNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AlertNotification createManyAndReturn
   */
  export type AlertNotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * The data used to create many AlertNotifications.
     */
    data: AlertNotificationCreateManyInput | AlertNotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlertNotification update
   */
  export type AlertNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a AlertNotification.
     */
    data: XOR<AlertNotificationUpdateInput, AlertNotificationUncheckedUpdateInput>
    /**
     * Choose, which AlertNotification to update.
     */
    where: AlertNotificationWhereUniqueInput
  }

  /**
   * AlertNotification updateMany
   */
  export type AlertNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlertNotifications.
     */
    data: XOR<AlertNotificationUpdateManyMutationInput, AlertNotificationUncheckedUpdateManyInput>
    /**
     * Filter which AlertNotifications to update
     */
    where?: AlertNotificationWhereInput
    /**
     * Limit how many AlertNotifications to update.
     */
    limit?: number
  }

  /**
   * AlertNotification updateManyAndReturn
   */
  export type AlertNotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * The data used to update AlertNotifications.
     */
    data: XOR<AlertNotificationUpdateManyMutationInput, AlertNotificationUncheckedUpdateManyInput>
    /**
     * Filter which AlertNotifications to update
     */
    where?: AlertNotificationWhereInput
    /**
     * Limit how many AlertNotifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlertNotification upsert
   */
  export type AlertNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the AlertNotification to update in case it exists.
     */
    where: AlertNotificationWhereUniqueInput
    /**
     * In case the AlertNotification found by the `where` argument doesn't exist, create a new AlertNotification with this data.
     */
    create: XOR<AlertNotificationCreateInput, AlertNotificationUncheckedCreateInput>
    /**
     * In case the AlertNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertNotificationUpdateInput, AlertNotificationUncheckedUpdateInput>
  }

  /**
   * AlertNotification delete
   */
  export type AlertNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
    /**
     * Filter which AlertNotification to delete.
     */
    where: AlertNotificationWhereUniqueInput
  }

  /**
   * AlertNotification deleteMany
   */
  export type AlertNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlertNotifications to delete
     */
    where?: AlertNotificationWhereInput
    /**
     * Limit how many AlertNotifications to delete.
     */
    limit?: number
  }

  /**
   * AlertNotification without action
   */
  export type AlertNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertNotification
     */
    select?: AlertNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertNotification
     */
    omit?: AlertNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertNotificationInclude<ExtArgs> | null
  }


  /**
   * Model WorkspaceFile
   */

  export type AggregateWorkspaceFile = {
    _count: WorkspaceFileCountAggregateOutputType | null
    _avg: WorkspaceFileAvgAggregateOutputType | null
    _sum: WorkspaceFileSumAggregateOutputType | null
    _min: WorkspaceFileMinAggregateOutputType | null
    _max: WorkspaceFileMaxAggregateOutputType | null
  }

  export type WorkspaceFileAvgAggregateOutputType = {
    size: number | null
    version: number | null
  }

  export type WorkspaceFileSumAggregateOutputType = {
    size: bigint | null
    version: number | null
  }

  export type WorkspaceFileMinAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    path: string | null
    name: string | null
    type: string | null
    size: bigint | null
    mimeType: string | null
    encoding: string | null
    content: string | null
    hash: string | null
    parentId: string | null
    isDirectory: boolean | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
    lastAccessedAt: Date | null
  }

  export type WorkspaceFileMaxAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    path: string | null
    name: string | null
    type: string | null
    size: bigint | null
    mimeType: string | null
    encoding: string | null
    content: string | null
    hash: string | null
    parentId: string | null
    isDirectory: boolean | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
    lastAccessedAt: Date | null
  }

  export type WorkspaceFileCountAggregateOutputType = {
    id: number
    workspaceId: number
    path: number
    name: number
    type: number
    size: number
    mimeType: number
    encoding: number
    content: number
    hash: number
    parentId: number
    isDirectory: number
    permissions: number
    metadata: number
    version: number
    createdAt: number
    updatedAt: number
    lastAccessedAt: number
    _all: number
  }


  export type WorkspaceFileAvgAggregateInputType = {
    size?: true
    version?: true
  }

  export type WorkspaceFileSumAggregateInputType = {
    size?: true
    version?: true
  }

  export type WorkspaceFileMinAggregateInputType = {
    id?: true
    workspaceId?: true
    path?: true
    name?: true
    type?: true
    size?: true
    mimeType?: true
    encoding?: true
    content?: true
    hash?: true
    parentId?: true
    isDirectory?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    lastAccessedAt?: true
  }

  export type WorkspaceFileMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    path?: true
    name?: true
    type?: true
    size?: true
    mimeType?: true
    encoding?: true
    content?: true
    hash?: true
    parentId?: true
    isDirectory?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    lastAccessedAt?: true
  }

  export type WorkspaceFileCountAggregateInputType = {
    id?: true
    workspaceId?: true
    path?: true
    name?: true
    type?: true
    size?: true
    mimeType?: true
    encoding?: true
    content?: true
    hash?: true
    parentId?: true
    isDirectory?: true
    permissions?: true
    metadata?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    lastAccessedAt?: true
    _all?: true
  }

  export type WorkspaceFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceFile to aggregate.
     */
    where?: WorkspaceFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceFiles to fetch.
     */
    orderBy?: WorkspaceFileOrderByWithRelationInput | WorkspaceFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkspaceFiles
    **/
    _count?: true | WorkspaceFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkspaceFileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkspaceFileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceFileMaxAggregateInputType
  }

  export type GetWorkspaceFileAggregateType<T extends WorkspaceFileAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspaceFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspaceFile[P]>
      : GetScalarType<T[P], AggregateWorkspaceFile[P]>
  }




  export type WorkspaceFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceFileWhereInput
    orderBy?: WorkspaceFileOrderByWithAggregationInput | WorkspaceFileOrderByWithAggregationInput[]
    by: WorkspaceFileScalarFieldEnum[] | WorkspaceFileScalarFieldEnum
    having?: WorkspaceFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceFileCountAggregateInputType | true
    _avg?: WorkspaceFileAvgAggregateInputType
    _sum?: WorkspaceFileSumAggregateInputType
    _min?: WorkspaceFileMinAggregateInputType
    _max?: WorkspaceFileMaxAggregateInputType
  }

  export type WorkspaceFileGroupByOutputType = {
    id: string
    workspaceId: string
    path: string
    name: string
    type: string
    size: bigint
    mimeType: string
    encoding: string
    content: string | null
    hash: string
    parentId: string | null
    isDirectory: boolean
    permissions: JsonValue
    metadata: JsonValue
    version: number
    createdAt: Date
    updatedAt: Date
    lastAccessedAt: Date
    _count: WorkspaceFileCountAggregateOutputType | null
    _avg: WorkspaceFileAvgAggregateOutputType | null
    _sum: WorkspaceFileSumAggregateOutputType | null
    _min: WorkspaceFileMinAggregateOutputType | null
    _max: WorkspaceFileMaxAggregateOutputType | null
  }

  type GetWorkspaceFileGroupByPayload<T extends WorkspaceFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceFileGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceFileGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    path?: boolean
    name?: boolean
    type?: boolean
    size?: boolean
    mimeType?: boolean
    encoding?: boolean
    content?: boolean
    hash?: boolean
    parentId?: boolean
    isDirectory?: boolean
    permissions?: boolean
    metadata?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastAccessedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    parent?: boolean | WorkspaceFile$parentArgs<ExtArgs>
    children?: boolean | WorkspaceFile$childrenArgs<ExtArgs>
    indexes?: boolean | WorkspaceFile$indexesArgs<ExtArgs>
    _count?: boolean | WorkspaceFileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceFile"]>

  export type WorkspaceFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    path?: boolean
    name?: boolean
    type?: boolean
    size?: boolean
    mimeType?: boolean
    encoding?: boolean
    content?: boolean
    hash?: boolean
    parentId?: boolean
    isDirectory?: boolean
    permissions?: boolean
    metadata?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastAccessedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    parent?: boolean | WorkspaceFile$parentArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceFile"]>

  export type WorkspaceFileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    path?: boolean
    name?: boolean
    type?: boolean
    size?: boolean
    mimeType?: boolean
    encoding?: boolean
    content?: boolean
    hash?: boolean
    parentId?: boolean
    isDirectory?: boolean
    permissions?: boolean
    metadata?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastAccessedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    parent?: boolean | WorkspaceFile$parentArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceFile"]>

  export type WorkspaceFileSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    path?: boolean
    name?: boolean
    type?: boolean
    size?: boolean
    mimeType?: boolean
    encoding?: boolean
    content?: boolean
    hash?: boolean
    parentId?: boolean
    isDirectory?: boolean
    permissions?: boolean
    metadata?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastAccessedAt?: boolean
  }

  export type WorkspaceFileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "path" | "name" | "type" | "size" | "mimeType" | "encoding" | "content" | "hash" | "parentId" | "isDirectory" | "permissions" | "metadata" | "version" | "createdAt" | "updatedAt" | "lastAccessedAt", ExtArgs["result"]["workspaceFile"]>
  export type WorkspaceFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    parent?: boolean | WorkspaceFile$parentArgs<ExtArgs>
    children?: boolean | WorkspaceFile$childrenArgs<ExtArgs>
    indexes?: boolean | WorkspaceFile$indexesArgs<ExtArgs>
    _count?: boolean | WorkspaceFileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkspaceFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    parent?: boolean | WorkspaceFile$parentArgs<ExtArgs>
  }
  export type WorkspaceFileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    parent?: boolean | WorkspaceFile$parentArgs<ExtArgs>
  }

  export type $WorkspaceFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkspaceFile"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      parent: Prisma.$WorkspaceFilePayload<ExtArgs> | null
      children: Prisma.$WorkspaceFilePayload<ExtArgs>[]
      indexes: Prisma.$FileIndexPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workspaceId: string
      path: string
      name: string
      type: string
      size: bigint
      mimeType: string
      encoding: string
      content: string | null
      hash: string
      parentId: string | null
      isDirectory: boolean
      permissions: Prisma.JsonValue
      metadata: Prisma.JsonValue
      version: number
      createdAt: Date
      updatedAt: Date
      lastAccessedAt: Date
    }, ExtArgs["result"]["workspaceFile"]>
    composites: {}
  }

  type WorkspaceFileGetPayload<S extends boolean | null | undefined | WorkspaceFileDefaultArgs> = $Result.GetResult<Prisma.$WorkspaceFilePayload, S>

  type WorkspaceFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspaceFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspaceFileCountAggregateInputType | true
    }

  export interface WorkspaceFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkspaceFile'], meta: { name: 'WorkspaceFile' } }
    /**
     * Find zero or one WorkspaceFile that matches the filter.
     * @param {WorkspaceFileFindUniqueArgs} args - Arguments to find a WorkspaceFile
     * @example
     * // Get one WorkspaceFile
     * const workspaceFile = await prisma.workspaceFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceFileFindUniqueArgs>(args: SelectSubset<T, WorkspaceFileFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceFileClient<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkspaceFile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceFileFindUniqueOrThrowArgs} args - Arguments to find a WorkspaceFile
     * @example
     * // Get one WorkspaceFile
     * const workspaceFile = await prisma.workspaceFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceFileFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceFileClient<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFileFindFirstArgs} args - Arguments to find a WorkspaceFile
     * @example
     * // Get one WorkspaceFile
     * const workspaceFile = await prisma.workspaceFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceFileFindFirstArgs>(args?: SelectSubset<T, WorkspaceFileFindFirstArgs<ExtArgs>>): Prisma__WorkspaceFileClient<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFileFindFirstOrThrowArgs} args - Arguments to find a WorkspaceFile
     * @example
     * // Get one WorkspaceFile
     * const workspaceFile = await prisma.workspaceFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceFileFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceFileClient<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkspaceFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspaceFiles
     * const workspaceFiles = await prisma.workspaceFile.findMany()
     * 
     * // Get first 10 WorkspaceFiles
     * const workspaceFiles = await prisma.workspaceFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceFileWithIdOnly = await prisma.workspaceFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceFileFindManyArgs>(args?: SelectSubset<T, WorkspaceFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkspaceFile.
     * @param {WorkspaceFileCreateArgs} args - Arguments to create a WorkspaceFile.
     * @example
     * // Create one WorkspaceFile
     * const WorkspaceFile = await prisma.workspaceFile.create({
     *   data: {
     *     // ... data to create a WorkspaceFile
     *   }
     * })
     * 
     */
    create<T extends WorkspaceFileCreateArgs>(args: SelectSubset<T, WorkspaceFileCreateArgs<ExtArgs>>): Prisma__WorkspaceFileClient<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkspaceFiles.
     * @param {WorkspaceFileCreateManyArgs} args - Arguments to create many WorkspaceFiles.
     * @example
     * // Create many WorkspaceFiles
     * const workspaceFile = await prisma.workspaceFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceFileCreateManyArgs>(args?: SelectSubset<T, WorkspaceFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkspaceFiles and returns the data saved in the database.
     * @param {WorkspaceFileCreateManyAndReturnArgs} args - Arguments to create many WorkspaceFiles.
     * @example
     * // Create many WorkspaceFiles
     * const workspaceFile = await prisma.workspaceFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkspaceFiles and only return the `id`
     * const workspaceFileWithIdOnly = await prisma.workspaceFile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceFileCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkspaceFile.
     * @param {WorkspaceFileDeleteArgs} args - Arguments to delete one WorkspaceFile.
     * @example
     * // Delete one WorkspaceFile
     * const WorkspaceFile = await prisma.workspaceFile.delete({
     *   where: {
     *     // ... filter to delete one WorkspaceFile
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceFileDeleteArgs>(args: SelectSubset<T, WorkspaceFileDeleteArgs<ExtArgs>>): Prisma__WorkspaceFileClient<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkspaceFile.
     * @param {WorkspaceFileUpdateArgs} args - Arguments to update one WorkspaceFile.
     * @example
     * // Update one WorkspaceFile
     * const workspaceFile = await prisma.workspaceFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceFileUpdateArgs>(args: SelectSubset<T, WorkspaceFileUpdateArgs<ExtArgs>>): Prisma__WorkspaceFileClient<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkspaceFiles.
     * @param {WorkspaceFileDeleteManyArgs} args - Arguments to filter WorkspaceFiles to delete.
     * @example
     * // Delete a few WorkspaceFiles
     * const { count } = await prisma.workspaceFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceFileDeleteManyArgs>(args?: SelectSubset<T, WorkspaceFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspaceFiles
     * const workspaceFile = await prisma.workspaceFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceFileUpdateManyArgs>(args: SelectSubset<T, WorkspaceFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceFiles and returns the data updated in the database.
     * @param {WorkspaceFileUpdateManyAndReturnArgs} args - Arguments to update many WorkspaceFiles.
     * @example
     * // Update many WorkspaceFiles
     * const workspaceFile = await prisma.workspaceFile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkspaceFiles and only return the `id`
     * const workspaceFileWithIdOnly = await prisma.workspaceFile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspaceFileUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspaceFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkspaceFile.
     * @param {WorkspaceFileUpsertArgs} args - Arguments to update or create a WorkspaceFile.
     * @example
     * // Update or create a WorkspaceFile
     * const workspaceFile = await prisma.workspaceFile.upsert({
     *   create: {
     *     // ... data to create a WorkspaceFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspaceFile we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceFileUpsertArgs>(args: SelectSubset<T, WorkspaceFileUpsertArgs<ExtArgs>>): Prisma__WorkspaceFileClient<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkspaceFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFileCountArgs} args - Arguments to filter WorkspaceFiles to count.
     * @example
     * // Count the number of WorkspaceFiles
     * const count = await prisma.workspaceFile.count({
     *   where: {
     *     // ... the filter for the WorkspaceFiles we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceFileCountArgs>(
      args?: Subset<T, WorkspaceFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkspaceFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceFileAggregateArgs>(args: Subset<T, WorkspaceFileAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceFileAggregateType<T>>

    /**
     * Group by WorkspaceFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceFileGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkspaceFile model
   */
  readonly fields: WorkspaceFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspaceFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parent<T extends WorkspaceFile$parentArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceFile$parentArgs<ExtArgs>>): Prisma__WorkspaceFileClient<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends WorkspaceFile$childrenArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceFile$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    indexes<T extends WorkspaceFile$indexesArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceFile$indexesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkspaceFile model
   */
  interface WorkspaceFileFieldRefs {
    readonly id: FieldRef<"WorkspaceFile", 'String'>
    readonly workspaceId: FieldRef<"WorkspaceFile", 'String'>
    readonly path: FieldRef<"WorkspaceFile", 'String'>
    readonly name: FieldRef<"WorkspaceFile", 'String'>
    readonly type: FieldRef<"WorkspaceFile", 'String'>
    readonly size: FieldRef<"WorkspaceFile", 'BigInt'>
    readonly mimeType: FieldRef<"WorkspaceFile", 'String'>
    readonly encoding: FieldRef<"WorkspaceFile", 'String'>
    readonly content: FieldRef<"WorkspaceFile", 'String'>
    readonly hash: FieldRef<"WorkspaceFile", 'String'>
    readonly parentId: FieldRef<"WorkspaceFile", 'String'>
    readonly isDirectory: FieldRef<"WorkspaceFile", 'Boolean'>
    readonly permissions: FieldRef<"WorkspaceFile", 'Json'>
    readonly metadata: FieldRef<"WorkspaceFile", 'Json'>
    readonly version: FieldRef<"WorkspaceFile", 'Int'>
    readonly createdAt: FieldRef<"WorkspaceFile", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkspaceFile", 'DateTime'>
    readonly lastAccessedAt: FieldRef<"WorkspaceFile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkspaceFile findUnique
   */
  export type WorkspaceFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceFile to fetch.
     */
    where: WorkspaceFileWhereUniqueInput
  }

  /**
   * WorkspaceFile findUniqueOrThrow
   */
  export type WorkspaceFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceFile to fetch.
     */
    where: WorkspaceFileWhereUniqueInput
  }

  /**
   * WorkspaceFile findFirst
   */
  export type WorkspaceFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceFile to fetch.
     */
    where?: WorkspaceFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceFiles to fetch.
     */
    orderBy?: WorkspaceFileOrderByWithRelationInput | WorkspaceFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceFiles.
     */
    cursor?: WorkspaceFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceFiles.
     */
    distinct?: WorkspaceFileScalarFieldEnum | WorkspaceFileScalarFieldEnum[]
  }

  /**
   * WorkspaceFile findFirstOrThrow
   */
  export type WorkspaceFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceFile to fetch.
     */
    where?: WorkspaceFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceFiles to fetch.
     */
    orderBy?: WorkspaceFileOrderByWithRelationInput | WorkspaceFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceFiles.
     */
    cursor?: WorkspaceFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceFiles.
     */
    distinct?: WorkspaceFileScalarFieldEnum | WorkspaceFileScalarFieldEnum[]
  }

  /**
   * WorkspaceFile findMany
   */
  export type WorkspaceFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceFiles to fetch.
     */
    where?: WorkspaceFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceFiles to fetch.
     */
    orderBy?: WorkspaceFileOrderByWithRelationInput | WorkspaceFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkspaceFiles.
     */
    cursor?: WorkspaceFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceFiles.
     */
    skip?: number
    distinct?: WorkspaceFileScalarFieldEnum | WorkspaceFileScalarFieldEnum[]
  }

  /**
   * WorkspaceFile create
   */
  export type WorkspaceFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkspaceFile.
     */
    data: XOR<WorkspaceFileCreateInput, WorkspaceFileUncheckedCreateInput>
  }

  /**
   * WorkspaceFile createMany
   */
  export type WorkspaceFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkspaceFiles.
     */
    data: WorkspaceFileCreateManyInput | WorkspaceFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkspaceFile createManyAndReturn
   */
  export type WorkspaceFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * The data used to create many WorkspaceFiles.
     */
    data: WorkspaceFileCreateManyInput | WorkspaceFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceFile update
   */
  export type WorkspaceFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkspaceFile.
     */
    data: XOR<WorkspaceFileUpdateInput, WorkspaceFileUncheckedUpdateInput>
    /**
     * Choose, which WorkspaceFile to update.
     */
    where: WorkspaceFileWhereUniqueInput
  }

  /**
   * WorkspaceFile updateMany
   */
  export type WorkspaceFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkspaceFiles.
     */
    data: XOR<WorkspaceFileUpdateManyMutationInput, WorkspaceFileUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceFiles to update
     */
    where?: WorkspaceFileWhereInput
    /**
     * Limit how many WorkspaceFiles to update.
     */
    limit?: number
  }

  /**
   * WorkspaceFile updateManyAndReturn
   */
  export type WorkspaceFileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * The data used to update WorkspaceFiles.
     */
    data: XOR<WorkspaceFileUpdateManyMutationInput, WorkspaceFileUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceFiles to update
     */
    where?: WorkspaceFileWhereInput
    /**
     * Limit how many WorkspaceFiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceFile upsert
   */
  export type WorkspaceFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkspaceFile to update in case it exists.
     */
    where: WorkspaceFileWhereUniqueInput
    /**
     * In case the WorkspaceFile found by the `where` argument doesn't exist, create a new WorkspaceFile with this data.
     */
    create: XOR<WorkspaceFileCreateInput, WorkspaceFileUncheckedCreateInput>
    /**
     * In case the WorkspaceFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceFileUpdateInput, WorkspaceFileUncheckedUpdateInput>
  }

  /**
   * WorkspaceFile delete
   */
  export type WorkspaceFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    /**
     * Filter which WorkspaceFile to delete.
     */
    where: WorkspaceFileWhereUniqueInput
  }

  /**
   * WorkspaceFile deleteMany
   */
  export type WorkspaceFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceFiles to delete
     */
    where?: WorkspaceFileWhereInput
    /**
     * Limit how many WorkspaceFiles to delete.
     */
    limit?: number
  }

  /**
   * WorkspaceFile.parent
   */
  export type WorkspaceFile$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    where?: WorkspaceFileWhereInput
  }

  /**
   * WorkspaceFile.children
   */
  export type WorkspaceFile$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
    where?: WorkspaceFileWhereInput
    orderBy?: WorkspaceFileOrderByWithRelationInput | WorkspaceFileOrderByWithRelationInput[]
    cursor?: WorkspaceFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceFileScalarFieldEnum | WorkspaceFileScalarFieldEnum[]
  }

  /**
   * WorkspaceFile.indexes
   */
  export type WorkspaceFile$indexesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
    where?: FileIndexWhereInput
    orderBy?: FileIndexOrderByWithRelationInput | FileIndexOrderByWithRelationInput[]
    cursor?: FileIndexWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileIndexScalarFieldEnum | FileIndexScalarFieldEnum[]
  }

  /**
   * WorkspaceFile without action
   */
  export type WorkspaceFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceFile
     */
    select?: WorkspaceFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceFile
     */
    omit?: WorkspaceFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceFileInclude<ExtArgs> | null
  }


  /**
   * Model FileIndex
   */

  export type AggregateFileIndex = {
    _count: FileIndexCountAggregateOutputType | null
    _min: FileIndexMinAggregateOutputType | null
    _max: FileIndexMaxAggregateOutputType | null
  }

  export type FileIndexMinAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    path: string | null
    content: string | null
    language: string | null
    lastIndexed: Date | null
    indexVersion: string | null
  }

  export type FileIndexMaxAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    path: string | null
    content: string | null
    language: string | null
    lastIndexed: Date | null
    indexVersion: string | null
  }

  export type FileIndexCountAggregateOutputType = {
    id: number
    workspaceId: number
    path: number
    content: number
    tokens: number
    language: number
    symbols: number
    imports: number
    exports: number
    dependencies: number
    complexity: number
    lastIndexed: number
    indexVersion: number
    _all: number
  }


  export type FileIndexMinAggregateInputType = {
    id?: true
    workspaceId?: true
    path?: true
    content?: true
    language?: true
    lastIndexed?: true
    indexVersion?: true
  }

  export type FileIndexMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    path?: true
    content?: true
    language?: true
    lastIndexed?: true
    indexVersion?: true
  }

  export type FileIndexCountAggregateInputType = {
    id?: true
    workspaceId?: true
    path?: true
    content?: true
    tokens?: true
    language?: true
    symbols?: true
    imports?: true
    exports?: true
    dependencies?: true
    complexity?: true
    lastIndexed?: true
    indexVersion?: true
    _all?: true
  }

  export type FileIndexAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileIndex to aggregate.
     */
    where?: FileIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileIndices to fetch.
     */
    orderBy?: FileIndexOrderByWithRelationInput | FileIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileIndices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FileIndices
    **/
    _count?: true | FileIndexCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileIndexMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileIndexMaxAggregateInputType
  }

  export type GetFileIndexAggregateType<T extends FileIndexAggregateArgs> = {
        [P in keyof T & keyof AggregateFileIndex]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFileIndex[P]>
      : GetScalarType<T[P], AggregateFileIndex[P]>
  }




  export type FileIndexGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileIndexWhereInput
    orderBy?: FileIndexOrderByWithAggregationInput | FileIndexOrderByWithAggregationInput[]
    by: FileIndexScalarFieldEnum[] | FileIndexScalarFieldEnum
    having?: FileIndexScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileIndexCountAggregateInputType | true
    _min?: FileIndexMinAggregateInputType
    _max?: FileIndexMaxAggregateInputType
  }

  export type FileIndexGroupByOutputType = {
    id: string
    workspaceId: string
    path: string
    content: string
    tokens: JsonValue
    language: string
    symbols: JsonValue
    imports: JsonValue
    exports: JsonValue
    dependencies: JsonValue
    complexity: JsonValue
    lastIndexed: Date
    indexVersion: string
    _count: FileIndexCountAggregateOutputType | null
    _min: FileIndexMinAggregateOutputType | null
    _max: FileIndexMaxAggregateOutputType | null
  }

  type GetFileIndexGroupByPayload<T extends FileIndexGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileIndexGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileIndexGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileIndexGroupByOutputType[P]>
            : GetScalarType<T[P], FileIndexGroupByOutputType[P]>
        }
      >
    >


  export type FileIndexSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    path?: boolean
    content?: boolean
    tokens?: boolean
    language?: boolean
    symbols?: boolean
    imports?: boolean
    exports?: boolean
    dependencies?: boolean
    complexity?: boolean
    lastIndexed?: boolean
    indexVersion?: boolean
    workspaceFile?: boolean | WorkspaceFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fileIndex"]>

  export type FileIndexSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    path?: boolean
    content?: boolean
    tokens?: boolean
    language?: boolean
    symbols?: boolean
    imports?: boolean
    exports?: boolean
    dependencies?: boolean
    complexity?: boolean
    lastIndexed?: boolean
    indexVersion?: boolean
    workspaceFile?: boolean | WorkspaceFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fileIndex"]>

  export type FileIndexSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    path?: boolean
    content?: boolean
    tokens?: boolean
    language?: boolean
    symbols?: boolean
    imports?: boolean
    exports?: boolean
    dependencies?: boolean
    complexity?: boolean
    lastIndexed?: boolean
    indexVersion?: boolean
    workspaceFile?: boolean | WorkspaceFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fileIndex"]>

  export type FileIndexSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    path?: boolean
    content?: boolean
    tokens?: boolean
    language?: boolean
    symbols?: boolean
    imports?: boolean
    exports?: boolean
    dependencies?: boolean
    complexity?: boolean
    lastIndexed?: boolean
    indexVersion?: boolean
  }

  export type FileIndexOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "path" | "content" | "tokens" | "language" | "symbols" | "imports" | "exports" | "dependencies" | "complexity" | "lastIndexed" | "indexVersion", ExtArgs["result"]["fileIndex"]>
  export type FileIndexInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspaceFile?: boolean | WorkspaceFileDefaultArgs<ExtArgs>
  }
  export type FileIndexIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspaceFile?: boolean | WorkspaceFileDefaultArgs<ExtArgs>
  }
  export type FileIndexIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspaceFile?: boolean | WorkspaceFileDefaultArgs<ExtArgs>
  }

  export type $FileIndexPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FileIndex"
    objects: {
      workspaceFile: Prisma.$WorkspaceFilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workspaceId: string
      path: string
      content: string
      tokens: Prisma.JsonValue
      language: string
      symbols: Prisma.JsonValue
      imports: Prisma.JsonValue
      exports: Prisma.JsonValue
      dependencies: Prisma.JsonValue
      complexity: Prisma.JsonValue
      lastIndexed: Date
      indexVersion: string
    }, ExtArgs["result"]["fileIndex"]>
    composites: {}
  }

  type FileIndexGetPayload<S extends boolean | null | undefined | FileIndexDefaultArgs> = $Result.GetResult<Prisma.$FileIndexPayload, S>

  type FileIndexCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileIndexFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileIndexCountAggregateInputType | true
    }

  export interface FileIndexDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileIndex'], meta: { name: 'FileIndex' } }
    /**
     * Find zero or one FileIndex that matches the filter.
     * @param {FileIndexFindUniqueArgs} args - Arguments to find a FileIndex
     * @example
     * // Get one FileIndex
     * const fileIndex = await prisma.fileIndex.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileIndexFindUniqueArgs>(args: SelectSubset<T, FileIndexFindUniqueArgs<ExtArgs>>): Prisma__FileIndexClient<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FileIndex that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileIndexFindUniqueOrThrowArgs} args - Arguments to find a FileIndex
     * @example
     * // Get one FileIndex
     * const fileIndex = await prisma.fileIndex.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileIndexFindUniqueOrThrowArgs>(args: SelectSubset<T, FileIndexFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileIndexClient<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FileIndex that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileIndexFindFirstArgs} args - Arguments to find a FileIndex
     * @example
     * // Get one FileIndex
     * const fileIndex = await prisma.fileIndex.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileIndexFindFirstArgs>(args?: SelectSubset<T, FileIndexFindFirstArgs<ExtArgs>>): Prisma__FileIndexClient<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FileIndex that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileIndexFindFirstOrThrowArgs} args - Arguments to find a FileIndex
     * @example
     * // Get one FileIndex
     * const fileIndex = await prisma.fileIndex.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileIndexFindFirstOrThrowArgs>(args?: SelectSubset<T, FileIndexFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileIndexClient<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FileIndices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileIndexFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FileIndices
     * const fileIndices = await prisma.fileIndex.findMany()
     * 
     * // Get first 10 FileIndices
     * const fileIndices = await prisma.fileIndex.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileIndexWithIdOnly = await prisma.fileIndex.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileIndexFindManyArgs>(args?: SelectSubset<T, FileIndexFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FileIndex.
     * @param {FileIndexCreateArgs} args - Arguments to create a FileIndex.
     * @example
     * // Create one FileIndex
     * const FileIndex = await prisma.fileIndex.create({
     *   data: {
     *     // ... data to create a FileIndex
     *   }
     * })
     * 
     */
    create<T extends FileIndexCreateArgs>(args: SelectSubset<T, FileIndexCreateArgs<ExtArgs>>): Prisma__FileIndexClient<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FileIndices.
     * @param {FileIndexCreateManyArgs} args - Arguments to create many FileIndices.
     * @example
     * // Create many FileIndices
     * const fileIndex = await prisma.fileIndex.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileIndexCreateManyArgs>(args?: SelectSubset<T, FileIndexCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FileIndices and returns the data saved in the database.
     * @param {FileIndexCreateManyAndReturnArgs} args - Arguments to create many FileIndices.
     * @example
     * // Create many FileIndices
     * const fileIndex = await prisma.fileIndex.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FileIndices and only return the `id`
     * const fileIndexWithIdOnly = await prisma.fileIndex.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileIndexCreateManyAndReturnArgs>(args?: SelectSubset<T, FileIndexCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FileIndex.
     * @param {FileIndexDeleteArgs} args - Arguments to delete one FileIndex.
     * @example
     * // Delete one FileIndex
     * const FileIndex = await prisma.fileIndex.delete({
     *   where: {
     *     // ... filter to delete one FileIndex
     *   }
     * })
     * 
     */
    delete<T extends FileIndexDeleteArgs>(args: SelectSubset<T, FileIndexDeleteArgs<ExtArgs>>): Prisma__FileIndexClient<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FileIndex.
     * @param {FileIndexUpdateArgs} args - Arguments to update one FileIndex.
     * @example
     * // Update one FileIndex
     * const fileIndex = await prisma.fileIndex.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileIndexUpdateArgs>(args: SelectSubset<T, FileIndexUpdateArgs<ExtArgs>>): Prisma__FileIndexClient<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FileIndices.
     * @param {FileIndexDeleteManyArgs} args - Arguments to filter FileIndices to delete.
     * @example
     * // Delete a few FileIndices
     * const { count } = await prisma.fileIndex.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileIndexDeleteManyArgs>(args?: SelectSubset<T, FileIndexDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileIndices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileIndexUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FileIndices
     * const fileIndex = await prisma.fileIndex.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileIndexUpdateManyArgs>(args: SelectSubset<T, FileIndexUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileIndices and returns the data updated in the database.
     * @param {FileIndexUpdateManyAndReturnArgs} args - Arguments to update many FileIndices.
     * @example
     * // Update many FileIndices
     * const fileIndex = await prisma.fileIndex.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FileIndices and only return the `id`
     * const fileIndexWithIdOnly = await prisma.fileIndex.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileIndexUpdateManyAndReturnArgs>(args: SelectSubset<T, FileIndexUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FileIndex.
     * @param {FileIndexUpsertArgs} args - Arguments to update or create a FileIndex.
     * @example
     * // Update or create a FileIndex
     * const fileIndex = await prisma.fileIndex.upsert({
     *   create: {
     *     // ... data to create a FileIndex
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FileIndex we want to update
     *   }
     * })
     */
    upsert<T extends FileIndexUpsertArgs>(args: SelectSubset<T, FileIndexUpsertArgs<ExtArgs>>): Prisma__FileIndexClient<$Result.GetResult<Prisma.$FileIndexPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FileIndices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileIndexCountArgs} args - Arguments to filter FileIndices to count.
     * @example
     * // Count the number of FileIndices
     * const count = await prisma.fileIndex.count({
     *   where: {
     *     // ... the filter for the FileIndices we want to count
     *   }
     * })
    **/
    count<T extends FileIndexCountArgs>(
      args?: Subset<T, FileIndexCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileIndexCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FileIndex.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileIndexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileIndexAggregateArgs>(args: Subset<T, FileIndexAggregateArgs>): Prisma.PrismaPromise<GetFileIndexAggregateType<T>>

    /**
     * Group by FileIndex.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileIndexGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileIndexGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileIndexGroupByArgs['orderBy'] }
        : { orderBy?: FileIndexGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileIndexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileIndexGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FileIndex model
   */
  readonly fields: FileIndexFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FileIndex.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileIndexClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspaceFile<T extends WorkspaceFileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceFileDefaultArgs<ExtArgs>>): Prisma__WorkspaceFileClient<$Result.GetResult<Prisma.$WorkspaceFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FileIndex model
   */
  interface FileIndexFieldRefs {
    readonly id: FieldRef<"FileIndex", 'String'>
    readonly workspaceId: FieldRef<"FileIndex", 'String'>
    readonly path: FieldRef<"FileIndex", 'String'>
    readonly content: FieldRef<"FileIndex", 'String'>
    readonly tokens: FieldRef<"FileIndex", 'Json'>
    readonly language: FieldRef<"FileIndex", 'String'>
    readonly symbols: FieldRef<"FileIndex", 'Json'>
    readonly imports: FieldRef<"FileIndex", 'Json'>
    readonly exports: FieldRef<"FileIndex", 'Json'>
    readonly dependencies: FieldRef<"FileIndex", 'Json'>
    readonly complexity: FieldRef<"FileIndex", 'Json'>
    readonly lastIndexed: FieldRef<"FileIndex", 'DateTime'>
    readonly indexVersion: FieldRef<"FileIndex", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FileIndex findUnique
   */
  export type FileIndexFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
    /**
     * Filter, which FileIndex to fetch.
     */
    where: FileIndexWhereUniqueInput
  }

  /**
   * FileIndex findUniqueOrThrow
   */
  export type FileIndexFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
    /**
     * Filter, which FileIndex to fetch.
     */
    where: FileIndexWhereUniqueInput
  }

  /**
   * FileIndex findFirst
   */
  export type FileIndexFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
    /**
     * Filter, which FileIndex to fetch.
     */
    where?: FileIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileIndices to fetch.
     */
    orderBy?: FileIndexOrderByWithRelationInput | FileIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileIndices.
     */
    cursor?: FileIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileIndices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileIndices.
     */
    distinct?: FileIndexScalarFieldEnum | FileIndexScalarFieldEnum[]
  }

  /**
   * FileIndex findFirstOrThrow
   */
  export type FileIndexFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
    /**
     * Filter, which FileIndex to fetch.
     */
    where?: FileIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileIndices to fetch.
     */
    orderBy?: FileIndexOrderByWithRelationInput | FileIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileIndices.
     */
    cursor?: FileIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileIndices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileIndices.
     */
    distinct?: FileIndexScalarFieldEnum | FileIndexScalarFieldEnum[]
  }

  /**
   * FileIndex findMany
   */
  export type FileIndexFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
    /**
     * Filter, which FileIndices to fetch.
     */
    where?: FileIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileIndices to fetch.
     */
    orderBy?: FileIndexOrderByWithRelationInput | FileIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FileIndices.
     */
    cursor?: FileIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileIndices.
     */
    skip?: number
    distinct?: FileIndexScalarFieldEnum | FileIndexScalarFieldEnum[]
  }

  /**
   * FileIndex create
   */
  export type FileIndexCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
    /**
     * The data needed to create a FileIndex.
     */
    data: XOR<FileIndexCreateInput, FileIndexUncheckedCreateInput>
  }

  /**
   * FileIndex createMany
   */
  export type FileIndexCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FileIndices.
     */
    data: FileIndexCreateManyInput | FileIndexCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FileIndex createManyAndReturn
   */
  export type FileIndexCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * The data used to create many FileIndices.
     */
    data: FileIndexCreateManyInput | FileIndexCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FileIndex update
   */
  export type FileIndexUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
    /**
     * The data needed to update a FileIndex.
     */
    data: XOR<FileIndexUpdateInput, FileIndexUncheckedUpdateInput>
    /**
     * Choose, which FileIndex to update.
     */
    where: FileIndexWhereUniqueInput
  }

  /**
   * FileIndex updateMany
   */
  export type FileIndexUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FileIndices.
     */
    data: XOR<FileIndexUpdateManyMutationInput, FileIndexUncheckedUpdateManyInput>
    /**
     * Filter which FileIndices to update
     */
    where?: FileIndexWhereInput
    /**
     * Limit how many FileIndices to update.
     */
    limit?: number
  }

  /**
   * FileIndex updateManyAndReturn
   */
  export type FileIndexUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * The data used to update FileIndices.
     */
    data: XOR<FileIndexUpdateManyMutationInput, FileIndexUncheckedUpdateManyInput>
    /**
     * Filter which FileIndices to update
     */
    where?: FileIndexWhereInput
    /**
     * Limit how many FileIndices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FileIndex upsert
   */
  export type FileIndexUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
    /**
     * The filter to search for the FileIndex to update in case it exists.
     */
    where: FileIndexWhereUniqueInput
    /**
     * In case the FileIndex found by the `where` argument doesn't exist, create a new FileIndex with this data.
     */
    create: XOR<FileIndexCreateInput, FileIndexUncheckedCreateInput>
    /**
     * In case the FileIndex was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileIndexUpdateInput, FileIndexUncheckedUpdateInput>
  }

  /**
   * FileIndex delete
   */
  export type FileIndexDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
    /**
     * Filter which FileIndex to delete.
     */
    where: FileIndexWhereUniqueInput
  }

  /**
   * FileIndex deleteMany
   */
  export type FileIndexDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileIndices to delete
     */
    where?: FileIndexWhereInput
    /**
     * Limit how many FileIndices to delete.
     */
    limit?: number
  }

  /**
   * FileIndex without action
   */
  export type FileIndexDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileIndex
     */
    select?: FileIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileIndex
     */
    omit?: FileIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIndexInclude<ExtArgs> | null
  }


  /**
   * Model WorkspaceState
   */

  export type AggregateWorkspaceState = {
    _count: WorkspaceStateCountAggregateOutputType | null
    _min: WorkspaceStateMinAggregateOutputType | null
    _max: WorkspaceStateMaxAggregateOutputType | null
  }

  export type WorkspaceStateMinAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    sessionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceStateMaxAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    sessionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceStateCountAggregateOutputType = {
    id: number
    workspaceId: number
    sessionId: number
    environment: number
    processes: number
    openFiles: number
    terminalSessions: number
    editorState: number
    gitState: number
    installedPackages: number
    customSettings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkspaceStateMinAggregateInputType = {
    id?: true
    workspaceId?: true
    sessionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceStateMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    sessionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceStateCountAggregateInputType = {
    id?: true
    workspaceId?: true
    sessionId?: true
    environment?: true
    processes?: true
    openFiles?: true
    terminalSessions?: true
    editorState?: true
    gitState?: true
    installedPackages?: true
    customSettings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkspaceStateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceState to aggregate.
     */
    where?: WorkspaceStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceStates to fetch.
     */
    orderBy?: WorkspaceStateOrderByWithRelationInput | WorkspaceStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkspaceStates
    **/
    _count?: true | WorkspaceStateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceStateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceStateMaxAggregateInputType
  }

  export type GetWorkspaceStateAggregateType<T extends WorkspaceStateAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspaceState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspaceState[P]>
      : GetScalarType<T[P], AggregateWorkspaceState[P]>
  }




  export type WorkspaceStateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceStateWhereInput
    orderBy?: WorkspaceStateOrderByWithAggregationInput | WorkspaceStateOrderByWithAggregationInput[]
    by: WorkspaceStateScalarFieldEnum[] | WorkspaceStateScalarFieldEnum
    having?: WorkspaceStateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceStateCountAggregateInputType | true
    _min?: WorkspaceStateMinAggregateInputType
    _max?: WorkspaceStateMaxAggregateInputType
  }

  export type WorkspaceStateGroupByOutputType = {
    id: string
    workspaceId: string
    sessionId: string
    environment: JsonValue
    processes: JsonValue
    openFiles: JsonValue
    terminalSessions: JsonValue
    editorState: JsonValue
    gitState: JsonValue
    installedPackages: JsonValue
    customSettings: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: WorkspaceStateCountAggregateOutputType | null
    _min: WorkspaceStateMinAggregateOutputType | null
    _max: WorkspaceStateMaxAggregateOutputType | null
  }

  type GetWorkspaceStateGroupByPayload<T extends WorkspaceStateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceStateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceStateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceStateGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceStateGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceStateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    sessionId?: boolean
    environment?: boolean
    processes?: boolean
    openFiles?: boolean
    terminalSessions?: boolean
    editorState?: boolean
    gitState?: boolean
    installedPackages?: boolean
    customSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceState"]>

  export type WorkspaceStateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    sessionId?: boolean
    environment?: boolean
    processes?: boolean
    openFiles?: boolean
    terminalSessions?: boolean
    editorState?: boolean
    gitState?: boolean
    installedPackages?: boolean
    customSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceState"]>

  export type WorkspaceStateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    sessionId?: boolean
    environment?: boolean
    processes?: boolean
    openFiles?: boolean
    terminalSessions?: boolean
    editorState?: boolean
    gitState?: boolean
    installedPackages?: boolean
    customSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceState"]>

  export type WorkspaceStateSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    sessionId?: boolean
    environment?: boolean
    processes?: boolean
    openFiles?: boolean
    terminalSessions?: boolean
    editorState?: boolean
    gitState?: boolean
    installedPackages?: boolean
    customSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkspaceStateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "sessionId" | "environment" | "processes" | "openFiles" | "terminalSessions" | "editorState" | "gitState" | "installedPackages" | "customSettings" | "createdAt" | "updatedAt", ExtArgs["result"]["workspaceState"]>
  export type WorkspaceStateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type WorkspaceStateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type WorkspaceStateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $WorkspaceStatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkspaceState"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workspaceId: string
      sessionId: string
      environment: Prisma.JsonValue
      processes: Prisma.JsonValue
      openFiles: Prisma.JsonValue
      terminalSessions: Prisma.JsonValue
      editorState: Prisma.JsonValue
      gitState: Prisma.JsonValue
      installedPackages: Prisma.JsonValue
      customSettings: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workspaceState"]>
    composites: {}
  }

  type WorkspaceStateGetPayload<S extends boolean | null | undefined | WorkspaceStateDefaultArgs> = $Result.GetResult<Prisma.$WorkspaceStatePayload, S>

  type WorkspaceStateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspaceStateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspaceStateCountAggregateInputType | true
    }

  export interface WorkspaceStateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkspaceState'], meta: { name: 'WorkspaceState' } }
    /**
     * Find zero or one WorkspaceState that matches the filter.
     * @param {WorkspaceStateFindUniqueArgs} args - Arguments to find a WorkspaceState
     * @example
     * // Get one WorkspaceState
     * const workspaceState = await prisma.workspaceState.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceStateFindUniqueArgs>(args: SelectSubset<T, WorkspaceStateFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceStateClient<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkspaceState that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceStateFindUniqueOrThrowArgs} args - Arguments to find a WorkspaceState
     * @example
     * // Get one WorkspaceState
     * const workspaceState = await prisma.workspaceState.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceStateFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceStateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceStateClient<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceState that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceStateFindFirstArgs} args - Arguments to find a WorkspaceState
     * @example
     * // Get one WorkspaceState
     * const workspaceState = await prisma.workspaceState.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceStateFindFirstArgs>(args?: SelectSubset<T, WorkspaceStateFindFirstArgs<ExtArgs>>): Prisma__WorkspaceStateClient<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceState that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceStateFindFirstOrThrowArgs} args - Arguments to find a WorkspaceState
     * @example
     * // Get one WorkspaceState
     * const workspaceState = await prisma.workspaceState.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceStateFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceStateFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceStateClient<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkspaceStates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceStateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspaceStates
     * const workspaceStates = await prisma.workspaceState.findMany()
     * 
     * // Get first 10 WorkspaceStates
     * const workspaceStates = await prisma.workspaceState.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceStateWithIdOnly = await prisma.workspaceState.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceStateFindManyArgs>(args?: SelectSubset<T, WorkspaceStateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkspaceState.
     * @param {WorkspaceStateCreateArgs} args - Arguments to create a WorkspaceState.
     * @example
     * // Create one WorkspaceState
     * const WorkspaceState = await prisma.workspaceState.create({
     *   data: {
     *     // ... data to create a WorkspaceState
     *   }
     * })
     * 
     */
    create<T extends WorkspaceStateCreateArgs>(args: SelectSubset<T, WorkspaceStateCreateArgs<ExtArgs>>): Prisma__WorkspaceStateClient<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkspaceStates.
     * @param {WorkspaceStateCreateManyArgs} args - Arguments to create many WorkspaceStates.
     * @example
     * // Create many WorkspaceStates
     * const workspaceState = await prisma.workspaceState.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceStateCreateManyArgs>(args?: SelectSubset<T, WorkspaceStateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkspaceStates and returns the data saved in the database.
     * @param {WorkspaceStateCreateManyAndReturnArgs} args - Arguments to create many WorkspaceStates.
     * @example
     * // Create many WorkspaceStates
     * const workspaceState = await prisma.workspaceState.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkspaceStates and only return the `id`
     * const workspaceStateWithIdOnly = await prisma.workspaceState.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceStateCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceStateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkspaceState.
     * @param {WorkspaceStateDeleteArgs} args - Arguments to delete one WorkspaceState.
     * @example
     * // Delete one WorkspaceState
     * const WorkspaceState = await prisma.workspaceState.delete({
     *   where: {
     *     // ... filter to delete one WorkspaceState
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceStateDeleteArgs>(args: SelectSubset<T, WorkspaceStateDeleteArgs<ExtArgs>>): Prisma__WorkspaceStateClient<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkspaceState.
     * @param {WorkspaceStateUpdateArgs} args - Arguments to update one WorkspaceState.
     * @example
     * // Update one WorkspaceState
     * const workspaceState = await prisma.workspaceState.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceStateUpdateArgs>(args: SelectSubset<T, WorkspaceStateUpdateArgs<ExtArgs>>): Prisma__WorkspaceStateClient<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkspaceStates.
     * @param {WorkspaceStateDeleteManyArgs} args - Arguments to filter WorkspaceStates to delete.
     * @example
     * // Delete a few WorkspaceStates
     * const { count } = await prisma.workspaceState.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceStateDeleteManyArgs>(args?: SelectSubset<T, WorkspaceStateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceStateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspaceStates
     * const workspaceState = await prisma.workspaceState.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceStateUpdateManyArgs>(args: SelectSubset<T, WorkspaceStateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceStates and returns the data updated in the database.
     * @param {WorkspaceStateUpdateManyAndReturnArgs} args - Arguments to update many WorkspaceStates.
     * @example
     * // Update many WorkspaceStates
     * const workspaceState = await prisma.workspaceState.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkspaceStates and only return the `id`
     * const workspaceStateWithIdOnly = await prisma.workspaceState.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspaceStateUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspaceStateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkspaceState.
     * @param {WorkspaceStateUpsertArgs} args - Arguments to update or create a WorkspaceState.
     * @example
     * // Update or create a WorkspaceState
     * const workspaceState = await prisma.workspaceState.upsert({
     *   create: {
     *     // ... data to create a WorkspaceState
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspaceState we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceStateUpsertArgs>(args: SelectSubset<T, WorkspaceStateUpsertArgs<ExtArgs>>): Prisma__WorkspaceStateClient<$Result.GetResult<Prisma.$WorkspaceStatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkspaceStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceStateCountArgs} args - Arguments to filter WorkspaceStates to count.
     * @example
     * // Count the number of WorkspaceStates
     * const count = await prisma.workspaceState.count({
     *   where: {
     *     // ... the filter for the WorkspaceStates we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceStateCountArgs>(
      args?: Subset<T, WorkspaceStateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceStateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkspaceState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceStateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceStateAggregateArgs>(args: Subset<T, WorkspaceStateAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceStateAggregateType<T>>

    /**
     * Group by WorkspaceState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceStateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceStateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceStateGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceStateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceStateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkspaceState model
   */
  readonly fields: WorkspaceStateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspaceState.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceStateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkspaceState model
   */
  interface WorkspaceStateFieldRefs {
    readonly id: FieldRef<"WorkspaceState", 'String'>
    readonly workspaceId: FieldRef<"WorkspaceState", 'String'>
    readonly sessionId: FieldRef<"WorkspaceState", 'String'>
    readonly environment: FieldRef<"WorkspaceState", 'Json'>
    readonly processes: FieldRef<"WorkspaceState", 'Json'>
    readonly openFiles: FieldRef<"WorkspaceState", 'Json'>
    readonly terminalSessions: FieldRef<"WorkspaceState", 'Json'>
    readonly editorState: FieldRef<"WorkspaceState", 'Json'>
    readonly gitState: FieldRef<"WorkspaceState", 'Json'>
    readonly installedPackages: FieldRef<"WorkspaceState", 'Json'>
    readonly customSettings: FieldRef<"WorkspaceState", 'Json'>
    readonly createdAt: FieldRef<"WorkspaceState", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkspaceState", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkspaceState findUnique
   */
  export type WorkspaceStateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceState to fetch.
     */
    where: WorkspaceStateWhereUniqueInput
  }

  /**
   * WorkspaceState findUniqueOrThrow
   */
  export type WorkspaceStateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceState to fetch.
     */
    where: WorkspaceStateWhereUniqueInput
  }

  /**
   * WorkspaceState findFirst
   */
  export type WorkspaceStateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceState to fetch.
     */
    where?: WorkspaceStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceStates to fetch.
     */
    orderBy?: WorkspaceStateOrderByWithRelationInput | WorkspaceStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceStates.
     */
    cursor?: WorkspaceStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceStates.
     */
    distinct?: WorkspaceStateScalarFieldEnum | WorkspaceStateScalarFieldEnum[]
  }

  /**
   * WorkspaceState findFirstOrThrow
   */
  export type WorkspaceStateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceState to fetch.
     */
    where?: WorkspaceStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceStates to fetch.
     */
    orderBy?: WorkspaceStateOrderByWithRelationInput | WorkspaceStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceStates.
     */
    cursor?: WorkspaceStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceStates.
     */
    distinct?: WorkspaceStateScalarFieldEnum | WorkspaceStateScalarFieldEnum[]
  }

  /**
   * WorkspaceState findMany
   */
  export type WorkspaceStateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceStates to fetch.
     */
    where?: WorkspaceStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceStates to fetch.
     */
    orderBy?: WorkspaceStateOrderByWithRelationInput | WorkspaceStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkspaceStates.
     */
    cursor?: WorkspaceStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceStates.
     */
    skip?: number
    distinct?: WorkspaceStateScalarFieldEnum | WorkspaceStateScalarFieldEnum[]
  }

  /**
   * WorkspaceState create
   */
  export type WorkspaceStateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkspaceState.
     */
    data: XOR<WorkspaceStateCreateInput, WorkspaceStateUncheckedCreateInput>
  }

  /**
   * WorkspaceState createMany
   */
  export type WorkspaceStateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkspaceStates.
     */
    data: WorkspaceStateCreateManyInput | WorkspaceStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkspaceState createManyAndReturn
   */
  export type WorkspaceStateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * The data used to create many WorkspaceStates.
     */
    data: WorkspaceStateCreateManyInput | WorkspaceStateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceState update
   */
  export type WorkspaceStateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkspaceState.
     */
    data: XOR<WorkspaceStateUpdateInput, WorkspaceStateUncheckedUpdateInput>
    /**
     * Choose, which WorkspaceState to update.
     */
    where: WorkspaceStateWhereUniqueInput
  }

  /**
   * WorkspaceState updateMany
   */
  export type WorkspaceStateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkspaceStates.
     */
    data: XOR<WorkspaceStateUpdateManyMutationInput, WorkspaceStateUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceStates to update
     */
    where?: WorkspaceStateWhereInput
    /**
     * Limit how many WorkspaceStates to update.
     */
    limit?: number
  }

  /**
   * WorkspaceState updateManyAndReturn
   */
  export type WorkspaceStateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * The data used to update WorkspaceStates.
     */
    data: XOR<WorkspaceStateUpdateManyMutationInput, WorkspaceStateUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceStates to update
     */
    where?: WorkspaceStateWhereInput
    /**
     * Limit how many WorkspaceStates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceState upsert
   */
  export type WorkspaceStateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkspaceState to update in case it exists.
     */
    where: WorkspaceStateWhereUniqueInput
    /**
     * In case the WorkspaceState found by the `where` argument doesn't exist, create a new WorkspaceState with this data.
     */
    create: XOR<WorkspaceStateCreateInput, WorkspaceStateUncheckedCreateInput>
    /**
     * In case the WorkspaceState was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceStateUpdateInput, WorkspaceStateUncheckedUpdateInput>
  }

  /**
   * WorkspaceState delete
   */
  export type WorkspaceStateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
    /**
     * Filter which WorkspaceState to delete.
     */
    where: WorkspaceStateWhereUniqueInput
  }

  /**
   * WorkspaceState deleteMany
   */
  export type WorkspaceStateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceStates to delete
     */
    where?: WorkspaceStateWhereInput
    /**
     * Limit how many WorkspaceStates to delete.
     */
    limit?: number
  }

  /**
   * WorkspaceState without action
   */
  export type WorkspaceStateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceState
     */
    select?: WorkspaceStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceState
     */
    omit?: WorkspaceStateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceStateInclude<ExtArgs> | null
  }


  /**
   * Model WorkspaceSync
   */

  export type AggregateWorkspaceSync = {
    _count: WorkspaceSyncCountAggregateOutputType | null
    _min: WorkspaceSyncMinAggregateOutputType | null
    _max: WorkspaceSyncMaxAggregateOutputType | null
  }

  export type WorkspaceSyncMinAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    type: $Enums.SyncType | null
    status: $Enums.SyncStatus | null
    direction: string | null
    lastSync: Date | null
    nextSync: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceSyncMaxAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    type: $Enums.SyncType | null
    status: $Enums.SyncStatus | null
    direction: string | null
    lastSync: Date | null
    nextSync: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceSyncCountAggregateOutputType = {
    id: number
    workspaceId: number
    type: number
    status: number
    direction: number
    source: number
    target: number
    progress: number
    conflicts: number
    lastSync: number
    nextSync: number
    settings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkspaceSyncMinAggregateInputType = {
    id?: true
    workspaceId?: true
    type?: true
    status?: true
    direction?: true
    lastSync?: true
    nextSync?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceSyncMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    type?: true
    status?: true
    direction?: true
    lastSync?: true
    nextSync?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceSyncCountAggregateInputType = {
    id?: true
    workspaceId?: true
    type?: true
    status?: true
    direction?: true
    source?: true
    target?: true
    progress?: true
    conflicts?: true
    lastSync?: true
    nextSync?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkspaceSyncAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceSync to aggregate.
     */
    where?: WorkspaceSyncWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceSyncs to fetch.
     */
    orderBy?: WorkspaceSyncOrderByWithRelationInput | WorkspaceSyncOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceSyncWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceSyncs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceSyncs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkspaceSyncs
    **/
    _count?: true | WorkspaceSyncCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceSyncMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceSyncMaxAggregateInputType
  }

  export type GetWorkspaceSyncAggregateType<T extends WorkspaceSyncAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspaceSync]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspaceSync[P]>
      : GetScalarType<T[P], AggregateWorkspaceSync[P]>
  }




  export type WorkspaceSyncGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceSyncWhereInput
    orderBy?: WorkspaceSyncOrderByWithAggregationInput | WorkspaceSyncOrderByWithAggregationInput[]
    by: WorkspaceSyncScalarFieldEnum[] | WorkspaceSyncScalarFieldEnum
    having?: WorkspaceSyncScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceSyncCountAggregateInputType | true
    _min?: WorkspaceSyncMinAggregateInputType
    _max?: WorkspaceSyncMaxAggregateInputType
  }

  export type WorkspaceSyncGroupByOutputType = {
    id: string
    workspaceId: string
    type: $Enums.SyncType
    status: $Enums.SyncStatus
    direction: string
    source: JsonValue
    target: JsonValue
    progress: JsonValue
    conflicts: JsonValue
    lastSync: Date | null
    nextSync: Date | null
    settings: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: WorkspaceSyncCountAggregateOutputType | null
    _min: WorkspaceSyncMinAggregateOutputType | null
    _max: WorkspaceSyncMaxAggregateOutputType | null
  }

  type GetWorkspaceSyncGroupByPayload<T extends WorkspaceSyncGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceSyncGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceSyncGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceSyncGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceSyncGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceSyncSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    type?: boolean
    status?: boolean
    direction?: boolean
    source?: boolean
    target?: boolean
    progress?: boolean
    conflicts?: boolean
    lastSync?: boolean
    nextSync?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceSync"]>

  export type WorkspaceSyncSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    type?: boolean
    status?: boolean
    direction?: boolean
    source?: boolean
    target?: boolean
    progress?: boolean
    conflicts?: boolean
    lastSync?: boolean
    nextSync?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceSync"]>

  export type WorkspaceSyncSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    type?: boolean
    status?: boolean
    direction?: boolean
    source?: boolean
    target?: boolean
    progress?: boolean
    conflicts?: boolean
    lastSync?: boolean
    nextSync?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceSync"]>

  export type WorkspaceSyncSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    type?: boolean
    status?: boolean
    direction?: boolean
    source?: boolean
    target?: boolean
    progress?: boolean
    conflicts?: boolean
    lastSync?: boolean
    nextSync?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkspaceSyncOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "type" | "status" | "direction" | "source" | "target" | "progress" | "conflicts" | "lastSync" | "nextSync" | "settings" | "createdAt" | "updatedAt", ExtArgs["result"]["workspaceSync"]>
  export type WorkspaceSyncInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type WorkspaceSyncIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type WorkspaceSyncIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $WorkspaceSyncPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkspaceSync"
    objects: {
      workspace: Prisma.$WorkspacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workspaceId: string
      type: $Enums.SyncType
      status: $Enums.SyncStatus
      direction: string
      source: Prisma.JsonValue
      target: Prisma.JsonValue
      progress: Prisma.JsonValue
      conflicts: Prisma.JsonValue
      lastSync: Date | null
      nextSync: Date | null
      settings: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workspaceSync"]>
    composites: {}
  }

  type WorkspaceSyncGetPayload<S extends boolean | null | undefined | WorkspaceSyncDefaultArgs> = $Result.GetResult<Prisma.$WorkspaceSyncPayload, S>

  type WorkspaceSyncCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspaceSyncFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspaceSyncCountAggregateInputType | true
    }

  export interface WorkspaceSyncDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkspaceSync'], meta: { name: 'WorkspaceSync' } }
    /**
     * Find zero or one WorkspaceSync that matches the filter.
     * @param {WorkspaceSyncFindUniqueArgs} args - Arguments to find a WorkspaceSync
     * @example
     * // Get one WorkspaceSync
     * const workspaceSync = await prisma.workspaceSync.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceSyncFindUniqueArgs>(args: SelectSubset<T, WorkspaceSyncFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceSyncClient<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkspaceSync that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceSyncFindUniqueOrThrowArgs} args - Arguments to find a WorkspaceSync
     * @example
     * // Get one WorkspaceSync
     * const workspaceSync = await prisma.workspaceSync.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceSyncFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceSyncFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceSyncClient<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceSync that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceSyncFindFirstArgs} args - Arguments to find a WorkspaceSync
     * @example
     * // Get one WorkspaceSync
     * const workspaceSync = await prisma.workspaceSync.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceSyncFindFirstArgs>(args?: SelectSubset<T, WorkspaceSyncFindFirstArgs<ExtArgs>>): Prisma__WorkspaceSyncClient<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceSync that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceSyncFindFirstOrThrowArgs} args - Arguments to find a WorkspaceSync
     * @example
     * // Get one WorkspaceSync
     * const workspaceSync = await prisma.workspaceSync.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceSyncFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceSyncFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceSyncClient<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkspaceSyncs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceSyncFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspaceSyncs
     * const workspaceSyncs = await prisma.workspaceSync.findMany()
     * 
     * // Get first 10 WorkspaceSyncs
     * const workspaceSyncs = await prisma.workspaceSync.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceSyncWithIdOnly = await prisma.workspaceSync.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceSyncFindManyArgs>(args?: SelectSubset<T, WorkspaceSyncFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkspaceSync.
     * @param {WorkspaceSyncCreateArgs} args - Arguments to create a WorkspaceSync.
     * @example
     * // Create one WorkspaceSync
     * const WorkspaceSync = await prisma.workspaceSync.create({
     *   data: {
     *     // ... data to create a WorkspaceSync
     *   }
     * })
     * 
     */
    create<T extends WorkspaceSyncCreateArgs>(args: SelectSubset<T, WorkspaceSyncCreateArgs<ExtArgs>>): Prisma__WorkspaceSyncClient<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkspaceSyncs.
     * @param {WorkspaceSyncCreateManyArgs} args - Arguments to create many WorkspaceSyncs.
     * @example
     * // Create many WorkspaceSyncs
     * const workspaceSync = await prisma.workspaceSync.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceSyncCreateManyArgs>(args?: SelectSubset<T, WorkspaceSyncCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkspaceSyncs and returns the data saved in the database.
     * @param {WorkspaceSyncCreateManyAndReturnArgs} args - Arguments to create many WorkspaceSyncs.
     * @example
     * // Create many WorkspaceSyncs
     * const workspaceSync = await prisma.workspaceSync.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkspaceSyncs and only return the `id`
     * const workspaceSyncWithIdOnly = await prisma.workspaceSync.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceSyncCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceSyncCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkspaceSync.
     * @param {WorkspaceSyncDeleteArgs} args - Arguments to delete one WorkspaceSync.
     * @example
     * // Delete one WorkspaceSync
     * const WorkspaceSync = await prisma.workspaceSync.delete({
     *   where: {
     *     // ... filter to delete one WorkspaceSync
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceSyncDeleteArgs>(args: SelectSubset<T, WorkspaceSyncDeleteArgs<ExtArgs>>): Prisma__WorkspaceSyncClient<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkspaceSync.
     * @param {WorkspaceSyncUpdateArgs} args - Arguments to update one WorkspaceSync.
     * @example
     * // Update one WorkspaceSync
     * const workspaceSync = await prisma.workspaceSync.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceSyncUpdateArgs>(args: SelectSubset<T, WorkspaceSyncUpdateArgs<ExtArgs>>): Prisma__WorkspaceSyncClient<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkspaceSyncs.
     * @param {WorkspaceSyncDeleteManyArgs} args - Arguments to filter WorkspaceSyncs to delete.
     * @example
     * // Delete a few WorkspaceSyncs
     * const { count } = await prisma.workspaceSync.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceSyncDeleteManyArgs>(args?: SelectSubset<T, WorkspaceSyncDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceSyncs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceSyncUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspaceSyncs
     * const workspaceSync = await prisma.workspaceSync.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceSyncUpdateManyArgs>(args: SelectSubset<T, WorkspaceSyncUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceSyncs and returns the data updated in the database.
     * @param {WorkspaceSyncUpdateManyAndReturnArgs} args - Arguments to update many WorkspaceSyncs.
     * @example
     * // Update many WorkspaceSyncs
     * const workspaceSync = await prisma.workspaceSync.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkspaceSyncs and only return the `id`
     * const workspaceSyncWithIdOnly = await prisma.workspaceSync.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspaceSyncUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspaceSyncUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkspaceSync.
     * @param {WorkspaceSyncUpsertArgs} args - Arguments to update or create a WorkspaceSync.
     * @example
     * // Update or create a WorkspaceSync
     * const workspaceSync = await prisma.workspaceSync.upsert({
     *   create: {
     *     // ... data to create a WorkspaceSync
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspaceSync we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceSyncUpsertArgs>(args: SelectSubset<T, WorkspaceSyncUpsertArgs<ExtArgs>>): Prisma__WorkspaceSyncClient<$Result.GetResult<Prisma.$WorkspaceSyncPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkspaceSyncs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceSyncCountArgs} args - Arguments to filter WorkspaceSyncs to count.
     * @example
     * // Count the number of WorkspaceSyncs
     * const count = await prisma.workspaceSync.count({
     *   where: {
     *     // ... the filter for the WorkspaceSyncs we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceSyncCountArgs>(
      args?: Subset<T, WorkspaceSyncCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceSyncCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkspaceSync.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceSyncAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceSyncAggregateArgs>(args: Subset<T, WorkspaceSyncAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceSyncAggregateType<T>>

    /**
     * Group by WorkspaceSync.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceSyncGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceSyncGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceSyncGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceSyncGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceSyncGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceSyncGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkspaceSync model
   */
  readonly fields: WorkspaceSyncFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspaceSync.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceSyncClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkspaceSync model
   */
  interface WorkspaceSyncFieldRefs {
    readonly id: FieldRef<"WorkspaceSync", 'String'>
    readonly workspaceId: FieldRef<"WorkspaceSync", 'String'>
    readonly type: FieldRef<"WorkspaceSync", 'SyncType'>
    readonly status: FieldRef<"WorkspaceSync", 'SyncStatus'>
    readonly direction: FieldRef<"WorkspaceSync", 'String'>
    readonly source: FieldRef<"WorkspaceSync", 'Json'>
    readonly target: FieldRef<"WorkspaceSync", 'Json'>
    readonly progress: FieldRef<"WorkspaceSync", 'Json'>
    readonly conflicts: FieldRef<"WorkspaceSync", 'Json'>
    readonly lastSync: FieldRef<"WorkspaceSync", 'DateTime'>
    readonly nextSync: FieldRef<"WorkspaceSync", 'DateTime'>
    readonly settings: FieldRef<"WorkspaceSync", 'Json'>
    readonly createdAt: FieldRef<"WorkspaceSync", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkspaceSync", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkspaceSync findUnique
   */
  export type WorkspaceSyncFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceSync to fetch.
     */
    where: WorkspaceSyncWhereUniqueInput
  }

  /**
   * WorkspaceSync findUniqueOrThrow
   */
  export type WorkspaceSyncFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceSync to fetch.
     */
    where: WorkspaceSyncWhereUniqueInput
  }

  /**
   * WorkspaceSync findFirst
   */
  export type WorkspaceSyncFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceSync to fetch.
     */
    where?: WorkspaceSyncWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceSyncs to fetch.
     */
    orderBy?: WorkspaceSyncOrderByWithRelationInput | WorkspaceSyncOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceSyncs.
     */
    cursor?: WorkspaceSyncWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceSyncs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceSyncs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceSyncs.
     */
    distinct?: WorkspaceSyncScalarFieldEnum | WorkspaceSyncScalarFieldEnum[]
  }

  /**
   * WorkspaceSync findFirstOrThrow
   */
  export type WorkspaceSyncFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceSync to fetch.
     */
    where?: WorkspaceSyncWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceSyncs to fetch.
     */
    orderBy?: WorkspaceSyncOrderByWithRelationInput | WorkspaceSyncOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceSyncs.
     */
    cursor?: WorkspaceSyncWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceSyncs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceSyncs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceSyncs.
     */
    distinct?: WorkspaceSyncScalarFieldEnum | WorkspaceSyncScalarFieldEnum[]
  }

  /**
   * WorkspaceSync findMany
   */
  export type WorkspaceSyncFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceSyncs to fetch.
     */
    where?: WorkspaceSyncWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceSyncs to fetch.
     */
    orderBy?: WorkspaceSyncOrderByWithRelationInput | WorkspaceSyncOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkspaceSyncs.
     */
    cursor?: WorkspaceSyncWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceSyncs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceSyncs.
     */
    skip?: number
    distinct?: WorkspaceSyncScalarFieldEnum | WorkspaceSyncScalarFieldEnum[]
  }

  /**
   * WorkspaceSync create
   */
  export type WorkspaceSyncCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkspaceSync.
     */
    data: XOR<WorkspaceSyncCreateInput, WorkspaceSyncUncheckedCreateInput>
  }

  /**
   * WorkspaceSync createMany
   */
  export type WorkspaceSyncCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkspaceSyncs.
     */
    data: WorkspaceSyncCreateManyInput | WorkspaceSyncCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkspaceSync createManyAndReturn
   */
  export type WorkspaceSyncCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * The data used to create many WorkspaceSyncs.
     */
    data: WorkspaceSyncCreateManyInput | WorkspaceSyncCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceSync update
   */
  export type WorkspaceSyncUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkspaceSync.
     */
    data: XOR<WorkspaceSyncUpdateInput, WorkspaceSyncUncheckedUpdateInput>
    /**
     * Choose, which WorkspaceSync to update.
     */
    where: WorkspaceSyncWhereUniqueInput
  }

  /**
   * WorkspaceSync updateMany
   */
  export type WorkspaceSyncUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkspaceSyncs.
     */
    data: XOR<WorkspaceSyncUpdateManyMutationInput, WorkspaceSyncUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceSyncs to update
     */
    where?: WorkspaceSyncWhereInput
    /**
     * Limit how many WorkspaceSyncs to update.
     */
    limit?: number
  }

  /**
   * WorkspaceSync updateManyAndReturn
   */
  export type WorkspaceSyncUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * The data used to update WorkspaceSyncs.
     */
    data: XOR<WorkspaceSyncUpdateManyMutationInput, WorkspaceSyncUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceSyncs to update
     */
    where?: WorkspaceSyncWhereInput
    /**
     * Limit how many WorkspaceSyncs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceSync upsert
   */
  export type WorkspaceSyncUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkspaceSync to update in case it exists.
     */
    where: WorkspaceSyncWhereUniqueInput
    /**
     * In case the WorkspaceSync found by the `where` argument doesn't exist, create a new WorkspaceSync with this data.
     */
    create: XOR<WorkspaceSyncCreateInput, WorkspaceSyncUncheckedCreateInput>
    /**
     * In case the WorkspaceSync was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceSyncUpdateInput, WorkspaceSyncUncheckedUpdateInput>
  }

  /**
   * WorkspaceSync delete
   */
  export type WorkspaceSyncDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
    /**
     * Filter which WorkspaceSync to delete.
     */
    where: WorkspaceSyncWhereUniqueInput
  }

  /**
   * WorkspaceSync deleteMany
   */
  export type WorkspaceSyncDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceSyncs to delete
     */
    where?: WorkspaceSyncWhereInput
    /**
     * Limit how many WorkspaceSyncs to delete.
     */
    limit?: number
  }

  /**
   * WorkspaceSync without action
   */
  export type WorkspaceSyncDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceSync
     */
    select?: WorkspaceSyncSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceSync
     */
    omit?: WorkspaceSyncOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceSyncInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const UserPreferenceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    theme: 'theme',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserPreferenceScalarFieldEnum = (typeof UserPreferenceScalarFieldEnum)[keyof typeof UserPreferenceScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const OrganizationMemberScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrganizationMemberScalarFieldEnum = (typeof OrganizationMemberScalarFieldEnum)[keyof typeof OrganizationMemberScalarFieldEnum]


  export const OrganizationInvitationScalarFieldEnum: {
    id: 'id',
    email: 'email',
    organizationId: 'organizationId',
    role: 'role',
    token: 'token',
    expires: 'expires',
    createdAt: 'createdAt'
  };

  export type OrganizationInvitationScalarFieldEnum = (typeof OrganizationInvitationScalarFieldEnum)[keyof typeof OrganizationInvitationScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    organizationId: 'organizationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    projectId: 'projectId',
    assigneeId: 'assigneeId',
    dueDate: 'dueDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const WorkspaceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    projectId: 'projectId',
    status: 'status',
    config: 'config',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkspaceScalarFieldEnum = (typeof WorkspaceScalarFieldEnum)[keyof typeof WorkspaceScalarFieldEnum]


  export const WebVMInstanceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    workspaceId: 'workspaceId',
    status: 'status',
    imageUrl: 'imageUrl',
    config: 'config',
    resources: 'resources',
    networkConfig: 'networkConfig',
    connectionUrl: 'connectionUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    startedAt: 'startedAt',
    stoppedAt: 'stoppedAt',
    templateId: 'templateId'
  };

  export type WebVMInstanceScalarFieldEnum = (typeof WebVMInstanceScalarFieldEnum)[keyof typeof WebVMInstanceScalarFieldEnum]


  export const WebVMMetricScalarFieldEnum: {
    id: 'id',
    instanceId: 'instanceId',
    metricType: 'metricType',
    value: 'value',
    unit: 'unit',
    timestamp: 'timestamp'
  };

  export type WebVMMetricScalarFieldEnum = (typeof WebVMMetricScalarFieldEnum)[keyof typeof WebVMMetricScalarFieldEnum]


  export const StorageBucketScalarFieldEnum: {
    id: 'id',
    name: 'name',
    region: 'region',
    versioning: 'versioning',
    encryption: 'encryption',
    size: 'size',
    objectCount: 'objectCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StorageBucketScalarFieldEnum = (typeof StorageBucketScalarFieldEnum)[keyof typeof StorageBucketScalarFieldEnum]


  export const StorageObjectScalarFieldEnum: {
    id: 'id',
    key: 'key',
    bucketId: 'bucketId',
    size: 'size',
    contentType: 'contentType',
    etag: 'etag',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StorageObjectScalarFieldEnum = (typeof StorageObjectScalarFieldEnum)[keyof typeof StorageObjectScalarFieldEnum]


  export const StorageUsageScalarFieldEnum: {
    id: 'id',
    bucketId: 'bucketId',
    totalSize: 'totalSize',
    objectCount: 'objectCount',
    quota: 'quota',
    timestamp: 'timestamp'
  };

  export type StorageUsageScalarFieldEnum = (typeof StorageUsageScalarFieldEnum)[keyof typeof StorageUsageScalarFieldEnum]


  export const ContainerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    status: 'status',
    command: 'command',
    environment: 'environment',
    ports: 'ports',
    volumes: 'volumes',
    labels: 'labels',
    restartPolicy: 'restartPolicy',
    networkMode: 'networkMode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    startedAt: 'startedAt',
    stoppedAt: 'stoppedAt'
  };

  export type ContainerScalarFieldEnum = (typeof ContainerScalarFieldEnum)[keyof typeof ContainerScalarFieldEnum]


  export const ContainerStatsScalarFieldEnum: {
    id: 'id',
    containerId: 'containerId',
    cpuPercent: 'cpuPercent',
    memoryUsage: 'memoryUsage',
    memoryLimit: 'memoryLimit',
    networkRx: 'networkRx',
    networkTx: 'networkTx',
    blockRead: 'blockRead',
    blockWrite: 'blockWrite',
    timestamp: 'timestamp'
  };

  export type ContainerStatsScalarFieldEnum = (typeof ContainerStatsScalarFieldEnum)[keyof typeof ContainerStatsScalarFieldEnum]


  export const ContainerLogScalarFieldEnum: {
    id: 'id',
    containerId: 'containerId',
    message: 'message',
    level: 'level',
    timestamp: 'timestamp'
  };

  export type ContainerLogScalarFieldEnum = (typeof ContainerLogScalarFieldEnum)[keyof typeof ContainerLogScalarFieldEnum]


  export const ServiceHealthScalarFieldEnum: {
    id: 'id',
    serviceName: 'serviceName',
    status: 'status',
    responseTime: 'responseTime',
    error: 'error',
    details: 'details',
    lastCheck: 'lastCheck',
    createdAt: 'createdAt'
  };

  export type ServiceHealthScalarFieldEnum = (typeof ServiceHealthScalarFieldEnum)[keyof typeof ServiceHealthScalarFieldEnum]


  export const InfrastructureMetricScalarFieldEnum: {
    id: 'id',
    service: 'service',
    metricName: 'metricName',
    value: 'value',
    unit: 'unit',
    labels: 'labels',
    timestamp: 'timestamp'
  };

  export type InfrastructureMetricScalarFieldEnum = (typeof InfrastructureMetricScalarFieldEnum)[keyof typeof InfrastructureMetricScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    resource: 'resource',
    resourceId: 'resourceId',
    details: 'details',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    timestamp: 'timestamp'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const WebVMTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    image: 'image',
    memory: 'memory',
    cpuCount: 'cpuCount',
    diskSize: 'diskSize',
    preInstalledSoftware: 'preInstalledSoftware',
    category: 'category',
    isPublic: 'isPublic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WebVMTemplateScalarFieldEnum = (typeof WebVMTemplateScalarFieldEnum)[keyof typeof WebVMTemplateScalarFieldEnum]


  export const WebVMSnapshotScalarFieldEnum: {
    id: 'id',
    instanceId: 'instanceId',
    name: 'name',
    description: 'description',
    size: 'size',
    createdAt: 'createdAt'
  };

  export type WebVMSnapshotScalarFieldEnum = (typeof WebVMSnapshotScalarFieldEnum)[keyof typeof WebVMSnapshotScalarFieldEnum]


  export const WorkspacePersistenceScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    storageSize: 'storageSize',
    backupCount: 'backupCount',
    lastBackup: 'lastBackup',
    config: 'config',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkspacePersistenceScalarFieldEnum = (typeof WorkspacePersistenceScalarFieldEnum)[keyof typeof WorkspacePersistenceScalarFieldEnum]


  export const InfrastructureAlertScalarFieldEnum: {
    id: 'id',
    name: 'name',
    query: 'query',
    condition: 'condition',
    threshold: 'threshold',
    duration: 'duration',
    severity: 'severity',
    state: 'state',
    labels: 'labels',
    annotations: 'annotations',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    firedAt: 'firedAt',
    resolvedAt: 'resolvedAt'
  };

  export type InfrastructureAlertScalarFieldEnum = (typeof InfrastructureAlertScalarFieldEnum)[keyof typeof InfrastructureAlertScalarFieldEnum]


  export const AlertNotificationScalarFieldEnum: {
    id: 'id',
    alertId: 'alertId',
    type: 'type',
    recipient: 'recipient',
    message: 'message',
    sentAt: 'sentAt'
  };

  export type AlertNotificationScalarFieldEnum = (typeof AlertNotificationScalarFieldEnum)[keyof typeof AlertNotificationScalarFieldEnum]


  export const WorkspaceFileScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    path: 'path',
    name: 'name',
    type: 'type',
    size: 'size',
    mimeType: 'mimeType',
    encoding: 'encoding',
    content: 'content',
    hash: 'hash',
    parentId: 'parentId',
    isDirectory: 'isDirectory',
    permissions: 'permissions',
    metadata: 'metadata',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastAccessedAt: 'lastAccessedAt'
  };

  export type WorkspaceFileScalarFieldEnum = (typeof WorkspaceFileScalarFieldEnum)[keyof typeof WorkspaceFileScalarFieldEnum]


  export const FileIndexScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    path: 'path',
    content: 'content',
    tokens: 'tokens',
    language: 'language',
    symbols: 'symbols',
    imports: 'imports',
    exports: 'exports',
    dependencies: 'dependencies',
    complexity: 'complexity',
    lastIndexed: 'lastIndexed',
    indexVersion: 'indexVersion'
  };

  export type FileIndexScalarFieldEnum = (typeof FileIndexScalarFieldEnum)[keyof typeof FileIndexScalarFieldEnum]


  export const WorkspaceStateScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    sessionId: 'sessionId',
    environment: 'environment',
    processes: 'processes',
    openFiles: 'openFiles',
    terminalSessions: 'terminalSessions',
    editorState: 'editorState',
    gitState: 'gitState',
    installedPackages: 'installedPackages',
    customSettings: 'customSettings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkspaceStateScalarFieldEnum = (typeof WorkspaceStateScalarFieldEnum)[keyof typeof WorkspaceStateScalarFieldEnum]


  export const WorkspaceSyncScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    type: 'type',
    status: 'status',
    direction: 'direction',
    source: 'source',
    target: 'target',
    progress: 'progress',
    conflicts: 'conflicts',
    lastSync: 'lastSync',
    nextSync: 'nextSync',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkspaceSyncScalarFieldEnum = (typeof WorkspaceSyncScalarFieldEnum)[keyof typeof WorkspaceSyncScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    image: 'image',
    password: 'password'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const AccountOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountOrderByRelevanceFieldEnum = (typeof AccountOrderByRelevanceFieldEnum)[keyof typeof AccountOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const VerificationTokenOrderByRelevanceFieldEnum: {
    identifier: 'identifier',
    token: 'token'
  };

  export type VerificationTokenOrderByRelevanceFieldEnum = (typeof VerificationTokenOrderByRelevanceFieldEnum)[keyof typeof VerificationTokenOrderByRelevanceFieldEnum]


  export const UserPreferenceOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    theme: 'theme'
  };

  export type UserPreferenceOrderByRelevanceFieldEnum = (typeof UserPreferenceOrderByRelevanceFieldEnum)[keyof typeof UserPreferenceOrderByRelevanceFieldEnum]


  export const OrganizationOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    image: 'image'
  };

  export type OrganizationOrderByRelevanceFieldEnum = (typeof OrganizationOrderByRelevanceFieldEnum)[keyof typeof OrganizationOrderByRelevanceFieldEnum]


  export const OrganizationMemberOrderByRelevanceFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId'
  };

  export type OrganizationMemberOrderByRelevanceFieldEnum = (typeof OrganizationMemberOrderByRelevanceFieldEnum)[keyof typeof OrganizationMemberOrderByRelevanceFieldEnum]


  export const OrganizationInvitationOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    organizationId: 'organizationId',
    token: 'token'
  };

  export type OrganizationInvitationOrderByRelevanceFieldEnum = (typeof OrganizationInvitationOrderByRelevanceFieldEnum)[keyof typeof OrganizationInvitationOrderByRelevanceFieldEnum]


  export const ProjectOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    organizationId: 'organizationId'
  };

  export type ProjectOrderByRelevanceFieldEnum = (typeof ProjectOrderByRelevanceFieldEnum)[keyof typeof ProjectOrderByRelevanceFieldEnum]


  export const TaskOrderByRelevanceFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    projectId: 'projectId',
    assigneeId: 'assigneeId'
  };

  export type TaskOrderByRelevanceFieldEnum = (typeof TaskOrderByRelevanceFieldEnum)[keyof typeof TaskOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const WorkspaceOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    projectId: 'projectId'
  };

  export type WorkspaceOrderByRelevanceFieldEnum = (typeof WorkspaceOrderByRelevanceFieldEnum)[keyof typeof WorkspaceOrderByRelevanceFieldEnum]


  export const WebVMInstanceOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    workspaceId: 'workspaceId',
    imageUrl: 'imageUrl',
    connectionUrl: 'connectionUrl',
    templateId: 'templateId'
  };

  export type WebVMInstanceOrderByRelevanceFieldEnum = (typeof WebVMInstanceOrderByRelevanceFieldEnum)[keyof typeof WebVMInstanceOrderByRelevanceFieldEnum]


  export const WebVMMetricOrderByRelevanceFieldEnum: {
    id: 'id',
    instanceId: 'instanceId',
    unit: 'unit'
  };

  export type WebVMMetricOrderByRelevanceFieldEnum = (typeof WebVMMetricOrderByRelevanceFieldEnum)[keyof typeof WebVMMetricOrderByRelevanceFieldEnum]


  export const StorageBucketOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    region: 'region'
  };

  export type StorageBucketOrderByRelevanceFieldEnum = (typeof StorageBucketOrderByRelevanceFieldEnum)[keyof typeof StorageBucketOrderByRelevanceFieldEnum]


  export const StorageObjectOrderByRelevanceFieldEnum: {
    id: 'id',
    key: 'key',
    bucketId: 'bucketId',
    contentType: 'contentType',
    etag: 'etag'
  };

  export type StorageObjectOrderByRelevanceFieldEnum = (typeof StorageObjectOrderByRelevanceFieldEnum)[keyof typeof StorageObjectOrderByRelevanceFieldEnum]


  export const StorageUsageOrderByRelevanceFieldEnum: {
    id: 'id',
    bucketId: 'bucketId'
  };

  export type StorageUsageOrderByRelevanceFieldEnum = (typeof StorageUsageOrderByRelevanceFieldEnum)[keyof typeof StorageUsageOrderByRelevanceFieldEnum]


  export const ContainerOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    restartPolicy: 'restartPolicy',
    networkMode: 'networkMode'
  };

  export type ContainerOrderByRelevanceFieldEnum = (typeof ContainerOrderByRelevanceFieldEnum)[keyof typeof ContainerOrderByRelevanceFieldEnum]


  export const ContainerStatsOrderByRelevanceFieldEnum: {
    id: 'id',
    containerId: 'containerId'
  };

  export type ContainerStatsOrderByRelevanceFieldEnum = (typeof ContainerStatsOrderByRelevanceFieldEnum)[keyof typeof ContainerStatsOrderByRelevanceFieldEnum]


  export const ContainerLogOrderByRelevanceFieldEnum: {
    id: 'id',
    containerId: 'containerId',
    message: 'message'
  };

  export type ContainerLogOrderByRelevanceFieldEnum = (typeof ContainerLogOrderByRelevanceFieldEnum)[keyof typeof ContainerLogOrderByRelevanceFieldEnum]


  export const ServiceHealthOrderByRelevanceFieldEnum: {
    id: 'id',
    serviceName: 'serviceName',
    error: 'error'
  };

  export type ServiceHealthOrderByRelevanceFieldEnum = (typeof ServiceHealthOrderByRelevanceFieldEnum)[keyof typeof ServiceHealthOrderByRelevanceFieldEnum]


  export const InfrastructureMetricOrderByRelevanceFieldEnum: {
    id: 'id',
    service: 'service',
    metricName: 'metricName',
    unit: 'unit'
  };

  export type InfrastructureMetricOrderByRelevanceFieldEnum = (typeof InfrastructureMetricOrderByRelevanceFieldEnum)[keyof typeof InfrastructureMetricOrderByRelevanceFieldEnum]


  export const AuditLogOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    resource: 'resource',
    resourceId: 'resourceId',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent'
  };

  export type AuditLogOrderByRelevanceFieldEnum = (typeof AuditLogOrderByRelevanceFieldEnum)[keyof typeof AuditLogOrderByRelevanceFieldEnum]


  export const WebVMTemplateOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    image: 'image',
    memory: 'memory',
    diskSize: 'diskSize',
    category: 'category'
  };

  export type WebVMTemplateOrderByRelevanceFieldEnum = (typeof WebVMTemplateOrderByRelevanceFieldEnum)[keyof typeof WebVMTemplateOrderByRelevanceFieldEnum]


  export const WebVMSnapshotOrderByRelevanceFieldEnum: {
    id: 'id',
    instanceId: 'instanceId',
    name: 'name',
    description: 'description'
  };

  export type WebVMSnapshotOrderByRelevanceFieldEnum = (typeof WebVMSnapshotOrderByRelevanceFieldEnum)[keyof typeof WebVMSnapshotOrderByRelevanceFieldEnum]


  export const WorkspacePersistenceOrderByRelevanceFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId'
  };

  export type WorkspacePersistenceOrderByRelevanceFieldEnum = (typeof WorkspacePersistenceOrderByRelevanceFieldEnum)[keyof typeof WorkspacePersistenceOrderByRelevanceFieldEnum]


  export const InfrastructureAlertOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    query: 'query',
    condition: 'condition',
    duration: 'duration'
  };

  export type InfrastructureAlertOrderByRelevanceFieldEnum = (typeof InfrastructureAlertOrderByRelevanceFieldEnum)[keyof typeof InfrastructureAlertOrderByRelevanceFieldEnum]


  export const AlertNotificationOrderByRelevanceFieldEnum: {
    id: 'id',
    alertId: 'alertId',
    recipient: 'recipient',
    message: 'message'
  };

  export type AlertNotificationOrderByRelevanceFieldEnum = (typeof AlertNotificationOrderByRelevanceFieldEnum)[keyof typeof AlertNotificationOrderByRelevanceFieldEnum]


  export const WorkspaceFileOrderByRelevanceFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    path: 'path',
    name: 'name',
    type: 'type',
    mimeType: 'mimeType',
    encoding: 'encoding',
    content: 'content',
    hash: 'hash',
    parentId: 'parentId'
  };

  export type WorkspaceFileOrderByRelevanceFieldEnum = (typeof WorkspaceFileOrderByRelevanceFieldEnum)[keyof typeof WorkspaceFileOrderByRelevanceFieldEnum]


  export const FileIndexOrderByRelevanceFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    path: 'path',
    content: 'content',
    language: 'language',
    indexVersion: 'indexVersion'
  };

  export type FileIndexOrderByRelevanceFieldEnum = (typeof FileIndexOrderByRelevanceFieldEnum)[keyof typeof FileIndexOrderByRelevanceFieldEnum]


  export const WorkspaceStateOrderByRelevanceFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    sessionId: 'sessionId'
  };

  export type WorkspaceStateOrderByRelevanceFieldEnum = (typeof WorkspaceStateOrderByRelevanceFieldEnum)[keyof typeof WorkspaceStateOrderByRelevanceFieldEnum]


  export const WorkspaceSyncOrderByRelevanceFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    direction: 'direction'
  };

  export type WorkspaceSyncOrderByRelevanceFieldEnum = (typeof WorkspaceSyncOrderByRelevanceFieldEnum)[keyof typeof WorkspaceSyncOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'MemberRole'
   */
  export type EnumMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemberRole'>
    


  /**
   * Reference to a field of type 'MemberRole[]'
   */
  export type ListEnumMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemberRole[]'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'TaskPriority'
   */
  export type EnumTaskPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskPriority'>
    


  /**
   * Reference to a field of type 'TaskPriority[]'
   */
  export type ListEnumTaskPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskPriority[]'>
    


  /**
   * Reference to a field of type 'WorkspaceStatus'
   */
  export type EnumWorkspaceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkspaceStatus'>
    


  /**
   * Reference to a field of type 'WorkspaceStatus[]'
   */
  export type ListEnumWorkspaceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkspaceStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'WebVMStatus'
   */
  export type EnumWebVMStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WebVMStatus'>
    


  /**
   * Reference to a field of type 'WebVMStatus[]'
   */
  export type ListEnumWebVMStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WebVMStatus[]'>
    


  /**
   * Reference to a field of type 'MetricType'
   */
  export type EnumMetricTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetricType'>
    


  /**
   * Reference to a field of type 'MetricType[]'
   */
  export type ListEnumMetricTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetricType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'ContainerStatus'
   */
  export type EnumContainerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContainerStatus'>
    


  /**
   * Reference to a field of type 'ContainerStatus[]'
   */
  export type ListEnumContainerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContainerStatus[]'>
    


  /**
   * Reference to a field of type 'LogLevel'
   */
  export type EnumLogLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogLevel'>
    


  /**
   * Reference to a field of type 'LogLevel[]'
   */
  export type ListEnumLogLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogLevel[]'>
    


  /**
   * Reference to a field of type 'HealthStatus'
   */
  export type EnumHealthStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HealthStatus'>
    


  /**
   * Reference to a field of type 'HealthStatus[]'
   */
  export type ListEnumHealthStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HealthStatus[]'>
    


  /**
   * Reference to a field of type 'AlertSeverity'
   */
  export type EnumAlertSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertSeverity'>
    


  /**
   * Reference to a field of type 'AlertSeverity[]'
   */
  export type ListEnumAlertSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertSeverity[]'>
    


  /**
   * Reference to a field of type 'AlertState'
   */
  export type EnumAlertStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertState'>
    


  /**
   * Reference to a field of type 'AlertState[]'
   */
  export type ListEnumAlertStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertState[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'SyncType'
   */
  export type EnumSyncTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncType'>
    


  /**
   * Reference to a field of type 'SyncType[]'
   */
  export type ListEnumSyncTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncType[]'>
    


  /**
   * Reference to a field of type 'SyncStatus'
   */
  export type EnumSyncStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncStatus'>
    


  /**
   * Reference to a field of type 'SyncStatus[]'
   */
  export type ListEnumSyncStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    organizations?: OrganizationMemberListRelationFilter
    assignedTasks?: TaskListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    preferences?: XOR<UserPreferenceNullableScalarRelationFilter, UserPreferenceWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    organizations?: OrganizationMemberOrderByRelationAggregateInput
    assignedTasks?: TaskOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    preferences?: UserPreferenceOrderByWithRelationInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    organizations?: OrganizationMemberListRelationFilter
    assignedTasks?: TaskListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    preferences?: XOR<UserPreferenceNullableScalarRelationFilter, UserPreferenceWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AccountOrderByRelevanceInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _relevance?: VerificationTokenOrderByRelevanceInput
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type UserPreferenceWhereInput = {
    AND?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    OR?: UserPreferenceWhereInput[]
    NOT?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    id?: StringFilter<"UserPreference"> | string
    userId?: StringFilter<"UserPreference"> | string
    theme?: StringFilter<"UserPreference"> | string
    createdAt?: DateTimeFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: UserPreferenceOrderByRelevanceInput
  }

  export type UserPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    OR?: UserPreferenceWhereInput[]
    NOT?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    theme?: StringFilter<"UserPreference"> | string
    createdAt?: DateTimeFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserPreferenceCountOrderByAggregateInput
    _max?: UserPreferenceMaxOrderByAggregateInput
    _min?: UserPreferenceMinOrderByAggregateInput
  }

  export type UserPreferenceScalarWhereWithAggregatesInput = {
    AND?: UserPreferenceScalarWhereWithAggregatesInput | UserPreferenceScalarWhereWithAggregatesInput[]
    OR?: UserPreferenceScalarWhereWithAggregatesInput[]
    NOT?: UserPreferenceScalarWhereWithAggregatesInput | UserPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPreference"> | string
    userId?: StringWithAggregatesFilter<"UserPreference"> | string
    theme?: StringWithAggregatesFilter<"UserPreference"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserPreference"> | Date | string
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    slug?: StringFilter<"Organization"> | string
    image?: StringNullableFilter<"Organization"> | string | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    members?: OrganizationMemberListRelationFilter
    projects?: ProjectListRelationFilter
    invitations?: OrganizationInvitationListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: OrganizationMemberOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
    invitations?: OrganizationInvitationOrderByRelationAggregateInput
    _relevance?: OrganizationOrderByRelevanceInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    image?: StringNullableFilter<"Organization"> | string | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    members?: OrganizationMemberListRelationFilter
    projects?: ProjectListRelationFilter
    invitations?: OrganizationInvitationListRelationFilter
  }, "id" | "slug">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    slug?: StringWithAggregatesFilter<"Organization"> | string
    image?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
  }

  export type OrganizationMemberWhereInput = {
    AND?: OrganizationMemberWhereInput | OrganizationMemberWhereInput[]
    OR?: OrganizationMemberWhereInput[]
    NOT?: OrganizationMemberWhereInput | OrganizationMemberWhereInput[]
    id?: StringFilter<"OrganizationMember"> | string
    organizationId?: StringFilter<"OrganizationMember"> | string
    userId?: StringFilter<"OrganizationMember"> | string
    role?: EnumMemberRoleFilter<"OrganizationMember"> | $Enums.MemberRole
    createdAt?: DateTimeFilter<"OrganizationMember"> | Date | string
    updatedAt?: DateTimeFilter<"OrganizationMember"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OrganizationMemberOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    _relevance?: OrganizationMemberOrderByRelevanceInput
  }

  export type OrganizationMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    organizationId_userId?: OrganizationMemberOrganizationIdUserIdCompoundUniqueInput
    AND?: OrganizationMemberWhereInput | OrganizationMemberWhereInput[]
    OR?: OrganizationMemberWhereInput[]
    NOT?: OrganizationMemberWhereInput | OrganizationMemberWhereInput[]
    organizationId?: StringFilter<"OrganizationMember"> | string
    userId?: StringFilter<"OrganizationMember"> | string
    role?: EnumMemberRoleFilter<"OrganizationMember"> | $Enums.MemberRole
    createdAt?: DateTimeFilter<"OrganizationMember"> | Date | string
    updatedAt?: DateTimeFilter<"OrganizationMember"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "organizationId_userId">

  export type OrganizationMemberOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrganizationMemberCountOrderByAggregateInput
    _max?: OrganizationMemberMaxOrderByAggregateInput
    _min?: OrganizationMemberMinOrderByAggregateInput
  }

  export type OrganizationMemberScalarWhereWithAggregatesInput = {
    AND?: OrganizationMemberScalarWhereWithAggregatesInput | OrganizationMemberScalarWhereWithAggregatesInput[]
    OR?: OrganizationMemberScalarWhereWithAggregatesInput[]
    NOT?: OrganizationMemberScalarWhereWithAggregatesInput | OrganizationMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrganizationMember"> | string
    organizationId?: StringWithAggregatesFilter<"OrganizationMember"> | string
    userId?: StringWithAggregatesFilter<"OrganizationMember"> | string
    role?: EnumMemberRoleWithAggregatesFilter<"OrganizationMember"> | $Enums.MemberRole
    createdAt?: DateTimeWithAggregatesFilter<"OrganizationMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OrganizationMember"> | Date | string
  }

  export type OrganizationInvitationWhereInput = {
    AND?: OrganizationInvitationWhereInput | OrganizationInvitationWhereInput[]
    OR?: OrganizationInvitationWhereInput[]
    NOT?: OrganizationInvitationWhereInput | OrganizationInvitationWhereInput[]
    id?: StringFilter<"OrganizationInvitation"> | string
    email?: StringFilter<"OrganizationInvitation"> | string
    organizationId?: StringFilter<"OrganizationInvitation"> | string
    role?: EnumMemberRoleFilter<"OrganizationInvitation"> | $Enums.MemberRole
    token?: StringFilter<"OrganizationInvitation"> | string
    expires?: DateTimeFilter<"OrganizationInvitation"> | Date | string
    createdAt?: DateTimeFilter<"OrganizationInvitation"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type OrganizationInvitationOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    _relevance?: OrganizationInvitationOrderByRelevanceInput
  }

  export type OrganizationInvitationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: OrganizationInvitationWhereInput | OrganizationInvitationWhereInput[]
    OR?: OrganizationInvitationWhereInput[]
    NOT?: OrganizationInvitationWhereInput | OrganizationInvitationWhereInput[]
    email?: StringFilter<"OrganizationInvitation"> | string
    organizationId?: StringFilter<"OrganizationInvitation"> | string
    role?: EnumMemberRoleFilter<"OrganizationInvitation"> | $Enums.MemberRole
    expires?: DateTimeFilter<"OrganizationInvitation"> | Date | string
    createdAt?: DateTimeFilter<"OrganizationInvitation"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id" | "token">

  export type OrganizationInvitationOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    _count?: OrganizationInvitationCountOrderByAggregateInput
    _max?: OrganizationInvitationMaxOrderByAggregateInput
    _min?: OrganizationInvitationMinOrderByAggregateInput
  }

  export type OrganizationInvitationScalarWhereWithAggregatesInput = {
    AND?: OrganizationInvitationScalarWhereWithAggregatesInput | OrganizationInvitationScalarWhereWithAggregatesInput[]
    OR?: OrganizationInvitationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationInvitationScalarWhereWithAggregatesInput | OrganizationInvitationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrganizationInvitation"> | string
    email?: StringWithAggregatesFilter<"OrganizationInvitation"> | string
    organizationId?: StringWithAggregatesFilter<"OrganizationInvitation"> | string
    role?: EnumMemberRoleWithAggregatesFilter<"OrganizationInvitation"> | $Enums.MemberRole
    token?: StringWithAggregatesFilter<"OrganizationInvitation"> | string
    expires?: DateTimeWithAggregatesFilter<"OrganizationInvitation"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"OrganizationInvitation"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    organizationId?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    tasks?: TaskListRelationFilter
    workspaces?: WorkspaceListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    tasks?: TaskOrderByRelationAggregateInput
    workspaces?: WorkspaceOrderByRelationAggregateInput
    _relevance?: ProjectOrderByRelevanceInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    organizationId?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    tasks?: TaskListRelationFilter
    workspaces?: WorkspaceListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    organizationId?: StringWithAggregatesFilter<"Project"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumTaskPriorityFilter<"Task"> | $Enums.TaskPriority
    projectId?: StringFilter<"Task"> | string
    assigneeId?: StringNullableFilter<"Task"> | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    projectId?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    assignee?: UserOrderByWithRelationInput
    _relevance?: TaskOrderByRelevanceInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumTaskPriorityFilter<"Task"> | $Enums.TaskPriority
    projectId?: StringFilter<"Task"> | string
    assigneeId?: StringNullableFilter<"Task"> | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    projectId?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    status?: EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumTaskPriorityWithAggregatesFilter<"Task"> | $Enums.TaskPriority
    projectId?: StringWithAggregatesFilter<"Task"> | string
    assigneeId?: StringNullableWithAggregatesFilter<"Task"> | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
  }

  export type WorkspaceWhereInput = {
    AND?: WorkspaceWhereInput | WorkspaceWhereInput[]
    OR?: WorkspaceWhereInput[]
    NOT?: WorkspaceWhereInput | WorkspaceWhereInput[]
    id?: StringFilter<"Workspace"> | string
    name?: StringFilter<"Workspace"> | string
    description?: StringNullableFilter<"Workspace"> | string | null
    projectId?: StringFilter<"Workspace"> | string
    status?: EnumWorkspaceStatusFilter<"Workspace"> | $Enums.WorkspaceStatus
    config?: JsonNullableFilter<"Workspace">
    createdAt?: DateTimeFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    instances?: WebVMInstanceListRelationFilter
    persistence?: XOR<WorkspacePersistenceNullableScalarRelationFilter, WorkspacePersistenceWhereInput> | null
    files?: WorkspaceFileListRelationFilter
    states?: WorkspaceStateListRelationFilter
    syncs?: WorkspaceSyncListRelationFilter
  }

  export type WorkspaceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    projectId?: SortOrder
    status?: SortOrder
    config?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    instances?: WebVMInstanceOrderByRelationAggregateInput
    persistence?: WorkspacePersistenceOrderByWithRelationInput
    files?: WorkspaceFileOrderByRelationAggregateInput
    states?: WorkspaceStateOrderByRelationAggregateInput
    syncs?: WorkspaceSyncOrderByRelationAggregateInput
    _relevance?: WorkspaceOrderByRelevanceInput
  }

  export type WorkspaceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkspaceWhereInput | WorkspaceWhereInput[]
    OR?: WorkspaceWhereInput[]
    NOT?: WorkspaceWhereInput | WorkspaceWhereInput[]
    name?: StringFilter<"Workspace"> | string
    description?: StringNullableFilter<"Workspace"> | string | null
    projectId?: StringFilter<"Workspace"> | string
    status?: EnumWorkspaceStatusFilter<"Workspace"> | $Enums.WorkspaceStatus
    config?: JsonNullableFilter<"Workspace">
    createdAt?: DateTimeFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    instances?: WebVMInstanceListRelationFilter
    persistence?: XOR<WorkspacePersistenceNullableScalarRelationFilter, WorkspacePersistenceWhereInput> | null
    files?: WorkspaceFileListRelationFilter
    states?: WorkspaceStateListRelationFilter
    syncs?: WorkspaceSyncListRelationFilter
  }, "id">

  export type WorkspaceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    projectId?: SortOrder
    status?: SortOrder
    config?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkspaceCountOrderByAggregateInput
    _max?: WorkspaceMaxOrderByAggregateInput
    _min?: WorkspaceMinOrderByAggregateInput
  }

  export type WorkspaceScalarWhereWithAggregatesInput = {
    AND?: WorkspaceScalarWhereWithAggregatesInput | WorkspaceScalarWhereWithAggregatesInput[]
    OR?: WorkspaceScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceScalarWhereWithAggregatesInput | WorkspaceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Workspace"> | string
    name?: StringWithAggregatesFilter<"Workspace"> | string
    description?: StringNullableWithAggregatesFilter<"Workspace"> | string | null
    projectId?: StringWithAggregatesFilter<"Workspace"> | string
    status?: EnumWorkspaceStatusWithAggregatesFilter<"Workspace"> | $Enums.WorkspaceStatus
    config?: JsonNullableWithAggregatesFilter<"Workspace">
    createdAt?: DateTimeWithAggregatesFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Workspace"> | Date | string
  }

  export type WebVMInstanceWhereInput = {
    AND?: WebVMInstanceWhereInput | WebVMInstanceWhereInput[]
    OR?: WebVMInstanceWhereInput[]
    NOT?: WebVMInstanceWhereInput | WebVMInstanceWhereInput[]
    id?: StringFilter<"WebVMInstance"> | string
    name?: StringFilter<"WebVMInstance"> | string
    workspaceId?: StringFilter<"WebVMInstance"> | string
    status?: EnumWebVMStatusFilter<"WebVMInstance"> | $Enums.WebVMStatus
    imageUrl?: StringNullableFilter<"WebVMInstance"> | string | null
    config?: JsonNullableFilter<"WebVMInstance">
    resources?: JsonNullableFilter<"WebVMInstance">
    networkConfig?: JsonNullableFilter<"WebVMInstance">
    connectionUrl?: StringNullableFilter<"WebVMInstance"> | string | null
    createdAt?: DateTimeFilter<"WebVMInstance"> | Date | string
    updatedAt?: DateTimeFilter<"WebVMInstance"> | Date | string
    startedAt?: DateTimeNullableFilter<"WebVMInstance"> | Date | string | null
    stoppedAt?: DateTimeNullableFilter<"WebVMInstance"> | Date | string | null
    templateId?: StringNullableFilter<"WebVMInstance"> | string | null
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    metrics?: WebVMMetricListRelationFilter
    snapshots?: WebVMSnapshotListRelationFilter
    template?: XOR<WebVMTemplateNullableScalarRelationFilter, WebVMTemplateWhereInput> | null
  }

  export type WebVMInstanceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    workspaceId?: SortOrder
    status?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    config?: SortOrderInput | SortOrder
    resources?: SortOrderInput | SortOrder
    networkConfig?: SortOrderInput | SortOrder
    connectionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    stoppedAt?: SortOrderInput | SortOrder
    templateId?: SortOrderInput | SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    metrics?: WebVMMetricOrderByRelationAggregateInput
    snapshots?: WebVMSnapshotOrderByRelationAggregateInput
    template?: WebVMTemplateOrderByWithRelationInput
    _relevance?: WebVMInstanceOrderByRelevanceInput
  }

  export type WebVMInstanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WebVMInstanceWhereInput | WebVMInstanceWhereInput[]
    OR?: WebVMInstanceWhereInput[]
    NOT?: WebVMInstanceWhereInput | WebVMInstanceWhereInput[]
    name?: StringFilter<"WebVMInstance"> | string
    workspaceId?: StringFilter<"WebVMInstance"> | string
    status?: EnumWebVMStatusFilter<"WebVMInstance"> | $Enums.WebVMStatus
    imageUrl?: StringNullableFilter<"WebVMInstance"> | string | null
    config?: JsonNullableFilter<"WebVMInstance">
    resources?: JsonNullableFilter<"WebVMInstance">
    networkConfig?: JsonNullableFilter<"WebVMInstance">
    connectionUrl?: StringNullableFilter<"WebVMInstance"> | string | null
    createdAt?: DateTimeFilter<"WebVMInstance"> | Date | string
    updatedAt?: DateTimeFilter<"WebVMInstance"> | Date | string
    startedAt?: DateTimeNullableFilter<"WebVMInstance"> | Date | string | null
    stoppedAt?: DateTimeNullableFilter<"WebVMInstance"> | Date | string | null
    templateId?: StringNullableFilter<"WebVMInstance"> | string | null
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    metrics?: WebVMMetricListRelationFilter
    snapshots?: WebVMSnapshotListRelationFilter
    template?: XOR<WebVMTemplateNullableScalarRelationFilter, WebVMTemplateWhereInput> | null
  }, "id">

  export type WebVMInstanceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    workspaceId?: SortOrder
    status?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    config?: SortOrderInput | SortOrder
    resources?: SortOrderInput | SortOrder
    networkConfig?: SortOrderInput | SortOrder
    connectionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    stoppedAt?: SortOrderInput | SortOrder
    templateId?: SortOrderInput | SortOrder
    _count?: WebVMInstanceCountOrderByAggregateInput
    _max?: WebVMInstanceMaxOrderByAggregateInput
    _min?: WebVMInstanceMinOrderByAggregateInput
  }

  export type WebVMInstanceScalarWhereWithAggregatesInput = {
    AND?: WebVMInstanceScalarWhereWithAggregatesInput | WebVMInstanceScalarWhereWithAggregatesInput[]
    OR?: WebVMInstanceScalarWhereWithAggregatesInput[]
    NOT?: WebVMInstanceScalarWhereWithAggregatesInput | WebVMInstanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebVMInstance"> | string
    name?: StringWithAggregatesFilter<"WebVMInstance"> | string
    workspaceId?: StringWithAggregatesFilter<"WebVMInstance"> | string
    status?: EnumWebVMStatusWithAggregatesFilter<"WebVMInstance"> | $Enums.WebVMStatus
    imageUrl?: StringNullableWithAggregatesFilter<"WebVMInstance"> | string | null
    config?: JsonNullableWithAggregatesFilter<"WebVMInstance">
    resources?: JsonNullableWithAggregatesFilter<"WebVMInstance">
    networkConfig?: JsonNullableWithAggregatesFilter<"WebVMInstance">
    connectionUrl?: StringNullableWithAggregatesFilter<"WebVMInstance"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WebVMInstance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WebVMInstance"> | Date | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"WebVMInstance"> | Date | string | null
    stoppedAt?: DateTimeNullableWithAggregatesFilter<"WebVMInstance"> | Date | string | null
    templateId?: StringNullableWithAggregatesFilter<"WebVMInstance"> | string | null
  }

  export type WebVMMetricWhereInput = {
    AND?: WebVMMetricWhereInput | WebVMMetricWhereInput[]
    OR?: WebVMMetricWhereInput[]
    NOT?: WebVMMetricWhereInput | WebVMMetricWhereInput[]
    id?: StringFilter<"WebVMMetric"> | string
    instanceId?: StringFilter<"WebVMMetric"> | string
    metricType?: EnumMetricTypeFilter<"WebVMMetric"> | $Enums.MetricType
    value?: FloatFilter<"WebVMMetric"> | number
    unit?: StringFilter<"WebVMMetric"> | string
    timestamp?: DateTimeFilter<"WebVMMetric"> | Date | string
    instance?: XOR<WebVMInstanceScalarRelationFilter, WebVMInstanceWhereInput>
  }

  export type WebVMMetricOrderByWithRelationInput = {
    id?: SortOrder
    instanceId?: SortOrder
    metricType?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    timestamp?: SortOrder
    instance?: WebVMInstanceOrderByWithRelationInput
    _relevance?: WebVMMetricOrderByRelevanceInput
  }

  export type WebVMMetricWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WebVMMetricWhereInput | WebVMMetricWhereInput[]
    OR?: WebVMMetricWhereInput[]
    NOT?: WebVMMetricWhereInput | WebVMMetricWhereInput[]
    instanceId?: StringFilter<"WebVMMetric"> | string
    metricType?: EnumMetricTypeFilter<"WebVMMetric"> | $Enums.MetricType
    value?: FloatFilter<"WebVMMetric"> | number
    unit?: StringFilter<"WebVMMetric"> | string
    timestamp?: DateTimeFilter<"WebVMMetric"> | Date | string
    instance?: XOR<WebVMInstanceScalarRelationFilter, WebVMInstanceWhereInput>
  }, "id">

  export type WebVMMetricOrderByWithAggregationInput = {
    id?: SortOrder
    instanceId?: SortOrder
    metricType?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    timestamp?: SortOrder
    _count?: WebVMMetricCountOrderByAggregateInput
    _avg?: WebVMMetricAvgOrderByAggregateInput
    _max?: WebVMMetricMaxOrderByAggregateInput
    _min?: WebVMMetricMinOrderByAggregateInput
    _sum?: WebVMMetricSumOrderByAggregateInput
  }

  export type WebVMMetricScalarWhereWithAggregatesInput = {
    AND?: WebVMMetricScalarWhereWithAggregatesInput | WebVMMetricScalarWhereWithAggregatesInput[]
    OR?: WebVMMetricScalarWhereWithAggregatesInput[]
    NOT?: WebVMMetricScalarWhereWithAggregatesInput | WebVMMetricScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebVMMetric"> | string
    instanceId?: StringWithAggregatesFilter<"WebVMMetric"> | string
    metricType?: EnumMetricTypeWithAggregatesFilter<"WebVMMetric"> | $Enums.MetricType
    value?: FloatWithAggregatesFilter<"WebVMMetric"> | number
    unit?: StringWithAggregatesFilter<"WebVMMetric"> | string
    timestamp?: DateTimeWithAggregatesFilter<"WebVMMetric"> | Date | string
  }

  export type StorageBucketWhereInput = {
    AND?: StorageBucketWhereInput | StorageBucketWhereInput[]
    OR?: StorageBucketWhereInput[]
    NOT?: StorageBucketWhereInput | StorageBucketWhereInput[]
    id?: StringFilter<"StorageBucket"> | string
    name?: StringFilter<"StorageBucket"> | string
    region?: StringFilter<"StorageBucket"> | string
    versioning?: BoolFilter<"StorageBucket"> | boolean
    encryption?: BoolFilter<"StorageBucket"> | boolean
    size?: BigIntFilter<"StorageBucket"> | bigint | number
    objectCount?: IntFilter<"StorageBucket"> | number
    createdAt?: DateTimeFilter<"StorageBucket"> | Date | string
    updatedAt?: DateTimeFilter<"StorageBucket"> | Date | string
    objects?: StorageObjectListRelationFilter
    usage?: StorageUsageListRelationFilter
  }

  export type StorageBucketOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrder
    versioning?: SortOrder
    encryption?: SortOrder
    size?: SortOrder
    objectCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    objects?: StorageObjectOrderByRelationAggregateInput
    usage?: StorageUsageOrderByRelationAggregateInput
    _relevance?: StorageBucketOrderByRelevanceInput
  }

  export type StorageBucketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: StorageBucketWhereInput | StorageBucketWhereInput[]
    OR?: StorageBucketWhereInput[]
    NOT?: StorageBucketWhereInput | StorageBucketWhereInput[]
    region?: StringFilter<"StorageBucket"> | string
    versioning?: BoolFilter<"StorageBucket"> | boolean
    encryption?: BoolFilter<"StorageBucket"> | boolean
    size?: BigIntFilter<"StorageBucket"> | bigint | number
    objectCount?: IntFilter<"StorageBucket"> | number
    createdAt?: DateTimeFilter<"StorageBucket"> | Date | string
    updatedAt?: DateTimeFilter<"StorageBucket"> | Date | string
    objects?: StorageObjectListRelationFilter
    usage?: StorageUsageListRelationFilter
  }, "id" | "name">

  export type StorageBucketOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrder
    versioning?: SortOrder
    encryption?: SortOrder
    size?: SortOrder
    objectCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StorageBucketCountOrderByAggregateInput
    _avg?: StorageBucketAvgOrderByAggregateInput
    _max?: StorageBucketMaxOrderByAggregateInput
    _min?: StorageBucketMinOrderByAggregateInput
    _sum?: StorageBucketSumOrderByAggregateInput
  }

  export type StorageBucketScalarWhereWithAggregatesInput = {
    AND?: StorageBucketScalarWhereWithAggregatesInput | StorageBucketScalarWhereWithAggregatesInput[]
    OR?: StorageBucketScalarWhereWithAggregatesInput[]
    NOT?: StorageBucketScalarWhereWithAggregatesInput | StorageBucketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StorageBucket"> | string
    name?: StringWithAggregatesFilter<"StorageBucket"> | string
    region?: StringWithAggregatesFilter<"StorageBucket"> | string
    versioning?: BoolWithAggregatesFilter<"StorageBucket"> | boolean
    encryption?: BoolWithAggregatesFilter<"StorageBucket"> | boolean
    size?: BigIntWithAggregatesFilter<"StorageBucket"> | bigint | number
    objectCount?: IntWithAggregatesFilter<"StorageBucket"> | number
    createdAt?: DateTimeWithAggregatesFilter<"StorageBucket"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StorageBucket"> | Date | string
  }

  export type StorageObjectWhereInput = {
    AND?: StorageObjectWhereInput | StorageObjectWhereInput[]
    OR?: StorageObjectWhereInput[]
    NOT?: StorageObjectWhereInput | StorageObjectWhereInput[]
    id?: StringFilter<"StorageObject"> | string
    key?: StringFilter<"StorageObject"> | string
    bucketId?: StringFilter<"StorageObject"> | string
    size?: BigIntFilter<"StorageObject"> | bigint | number
    contentType?: StringFilter<"StorageObject"> | string
    etag?: StringFilter<"StorageObject"> | string
    metadata?: JsonNullableFilter<"StorageObject">
    createdAt?: DateTimeFilter<"StorageObject"> | Date | string
    updatedAt?: DateTimeFilter<"StorageObject"> | Date | string
    bucket?: XOR<StorageBucketScalarRelationFilter, StorageBucketWhereInput>
  }

  export type StorageObjectOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    bucketId?: SortOrder
    size?: SortOrder
    contentType?: SortOrder
    etag?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bucket?: StorageBucketOrderByWithRelationInput
    _relevance?: StorageObjectOrderByRelevanceInput
  }

  export type StorageObjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    bucketId_key?: StorageObjectBucketIdKeyCompoundUniqueInput
    AND?: StorageObjectWhereInput | StorageObjectWhereInput[]
    OR?: StorageObjectWhereInput[]
    NOT?: StorageObjectWhereInput | StorageObjectWhereInput[]
    key?: StringFilter<"StorageObject"> | string
    bucketId?: StringFilter<"StorageObject"> | string
    size?: BigIntFilter<"StorageObject"> | bigint | number
    contentType?: StringFilter<"StorageObject"> | string
    etag?: StringFilter<"StorageObject"> | string
    metadata?: JsonNullableFilter<"StorageObject">
    createdAt?: DateTimeFilter<"StorageObject"> | Date | string
    updatedAt?: DateTimeFilter<"StorageObject"> | Date | string
    bucket?: XOR<StorageBucketScalarRelationFilter, StorageBucketWhereInput>
  }, "id" | "bucketId_key">

  export type StorageObjectOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    bucketId?: SortOrder
    size?: SortOrder
    contentType?: SortOrder
    etag?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StorageObjectCountOrderByAggregateInput
    _avg?: StorageObjectAvgOrderByAggregateInput
    _max?: StorageObjectMaxOrderByAggregateInput
    _min?: StorageObjectMinOrderByAggregateInput
    _sum?: StorageObjectSumOrderByAggregateInput
  }

  export type StorageObjectScalarWhereWithAggregatesInput = {
    AND?: StorageObjectScalarWhereWithAggregatesInput | StorageObjectScalarWhereWithAggregatesInput[]
    OR?: StorageObjectScalarWhereWithAggregatesInput[]
    NOT?: StorageObjectScalarWhereWithAggregatesInput | StorageObjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StorageObject"> | string
    key?: StringWithAggregatesFilter<"StorageObject"> | string
    bucketId?: StringWithAggregatesFilter<"StorageObject"> | string
    size?: BigIntWithAggregatesFilter<"StorageObject"> | bigint | number
    contentType?: StringWithAggregatesFilter<"StorageObject"> | string
    etag?: StringWithAggregatesFilter<"StorageObject"> | string
    metadata?: JsonNullableWithAggregatesFilter<"StorageObject">
    createdAt?: DateTimeWithAggregatesFilter<"StorageObject"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StorageObject"> | Date | string
  }

  export type StorageUsageWhereInput = {
    AND?: StorageUsageWhereInput | StorageUsageWhereInput[]
    OR?: StorageUsageWhereInput[]
    NOT?: StorageUsageWhereInput | StorageUsageWhereInput[]
    id?: StringFilter<"StorageUsage"> | string
    bucketId?: StringFilter<"StorageUsage"> | string
    totalSize?: BigIntFilter<"StorageUsage"> | bigint | number
    objectCount?: IntFilter<"StorageUsage"> | number
    quota?: BigIntFilter<"StorageUsage"> | bigint | number
    timestamp?: DateTimeFilter<"StorageUsage"> | Date | string
    bucket?: XOR<StorageBucketScalarRelationFilter, StorageBucketWhereInput>
  }

  export type StorageUsageOrderByWithRelationInput = {
    id?: SortOrder
    bucketId?: SortOrder
    totalSize?: SortOrder
    objectCount?: SortOrder
    quota?: SortOrder
    timestamp?: SortOrder
    bucket?: StorageBucketOrderByWithRelationInput
    _relevance?: StorageUsageOrderByRelevanceInput
  }

  export type StorageUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StorageUsageWhereInput | StorageUsageWhereInput[]
    OR?: StorageUsageWhereInput[]
    NOT?: StorageUsageWhereInput | StorageUsageWhereInput[]
    bucketId?: StringFilter<"StorageUsage"> | string
    totalSize?: BigIntFilter<"StorageUsage"> | bigint | number
    objectCount?: IntFilter<"StorageUsage"> | number
    quota?: BigIntFilter<"StorageUsage"> | bigint | number
    timestamp?: DateTimeFilter<"StorageUsage"> | Date | string
    bucket?: XOR<StorageBucketScalarRelationFilter, StorageBucketWhereInput>
  }, "id">

  export type StorageUsageOrderByWithAggregationInput = {
    id?: SortOrder
    bucketId?: SortOrder
    totalSize?: SortOrder
    objectCount?: SortOrder
    quota?: SortOrder
    timestamp?: SortOrder
    _count?: StorageUsageCountOrderByAggregateInput
    _avg?: StorageUsageAvgOrderByAggregateInput
    _max?: StorageUsageMaxOrderByAggregateInput
    _min?: StorageUsageMinOrderByAggregateInput
    _sum?: StorageUsageSumOrderByAggregateInput
  }

  export type StorageUsageScalarWhereWithAggregatesInput = {
    AND?: StorageUsageScalarWhereWithAggregatesInput | StorageUsageScalarWhereWithAggregatesInput[]
    OR?: StorageUsageScalarWhereWithAggregatesInput[]
    NOT?: StorageUsageScalarWhereWithAggregatesInput | StorageUsageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StorageUsage"> | string
    bucketId?: StringWithAggregatesFilter<"StorageUsage"> | string
    totalSize?: BigIntWithAggregatesFilter<"StorageUsage"> | bigint | number
    objectCount?: IntWithAggregatesFilter<"StorageUsage"> | number
    quota?: BigIntWithAggregatesFilter<"StorageUsage"> | bigint | number
    timestamp?: DateTimeWithAggregatesFilter<"StorageUsage"> | Date | string
  }

  export type ContainerWhereInput = {
    AND?: ContainerWhereInput | ContainerWhereInput[]
    OR?: ContainerWhereInput[]
    NOT?: ContainerWhereInput | ContainerWhereInput[]
    id?: StringFilter<"Container"> | string
    name?: StringFilter<"Container"> | string
    image?: StringFilter<"Container"> | string
    status?: EnumContainerStatusFilter<"Container"> | $Enums.ContainerStatus
    command?: JsonNullableFilter<"Container">
    environment?: JsonNullableFilter<"Container">
    ports?: JsonNullableFilter<"Container">
    volumes?: JsonNullableFilter<"Container">
    labels?: JsonNullableFilter<"Container">
    restartPolicy?: StringFilter<"Container"> | string
    networkMode?: StringFilter<"Container"> | string
    createdAt?: DateTimeFilter<"Container"> | Date | string
    updatedAt?: DateTimeFilter<"Container"> | Date | string
    startedAt?: DateTimeNullableFilter<"Container"> | Date | string | null
    stoppedAt?: DateTimeNullableFilter<"Container"> | Date | string | null
    stats?: ContainerStatsListRelationFilter
    logs?: ContainerLogListRelationFilter
  }

  export type ContainerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    status?: SortOrder
    command?: SortOrderInput | SortOrder
    environment?: SortOrderInput | SortOrder
    ports?: SortOrderInput | SortOrder
    volumes?: SortOrderInput | SortOrder
    labels?: SortOrderInput | SortOrder
    restartPolicy?: SortOrder
    networkMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    stoppedAt?: SortOrderInput | SortOrder
    stats?: ContainerStatsOrderByRelationAggregateInput
    logs?: ContainerLogOrderByRelationAggregateInput
    _relevance?: ContainerOrderByRelevanceInput
  }

  export type ContainerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ContainerWhereInput | ContainerWhereInput[]
    OR?: ContainerWhereInput[]
    NOT?: ContainerWhereInput | ContainerWhereInput[]
    image?: StringFilter<"Container"> | string
    status?: EnumContainerStatusFilter<"Container"> | $Enums.ContainerStatus
    command?: JsonNullableFilter<"Container">
    environment?: JsonNullableFilter<"Container">
    ports?: JsonNullableFilter<"Container">
    volumes?: JsonNullableFilter<"Container">
    labels?: JsonNullableFilter<"Container">
    restartPolicy?: StringFilter<"Container"> | string
    networkMode?: StringFilter<"Container"> | string
    createdAt?: DateTimeFilter<"Container"> | Date | string
    updatedAt?: DateTimeFilter<"Container"> | Date | string
    startedAt?: DateTimeNullableFilter<"Container"> | Date | string | null
    stoppedAt?: DateTimeNullableFilter<"Container"> | Date | string | null
    stats?: ContainerStatsListRelationFilter
    logs?: ContainerLogListRelationFilter
  }, "id" | "name">

  export type ContainerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    status?: SortOrder
    command?: SortOrderInput | SortOrder
    environment?: SortOrderInput | SortOrder
    ports?: SortOrderInput | SortOrder
    volumes?: SortOrderInput | SortOrder
    labels?: SortOrderInput | SortOrder
    restartPolicy?: SortOrder
    networkMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    stoppedAt?: SortOrderInput | SortOrder
    _count?: ContainerCountOrderByAggregateInput
    _max?: ContainerMaxOrderByAggregateInput
    _min?: ContainerMinOrderByAggregateInput
  }

  export type ContainerScalarWhereWithAggregatesInput = {
    AND?: ContainerScalarWhereWithAggregatesInput | ContainerScalarWhereWithAggregatesInput[]
    OR?: ContainerScalarWhereWithAggregatesInput[]
    NOT?: ContainerScalarWhereWithAggregatesInput | ContainerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Container"> | string
    name?: StringWithAggregatesFilter<"Container"> | string
    image?: StringWithAggregatesFilter<"Container"> | string
    status?: EnumContainerStatusWithAggregatesFilter<"Container"> | $Enums.ContainerStatus
    command?: JsonNullableWithAggregatesFilter<"Container">
    environment?: JsonNullableWithAggregatesFilter<"Container">
    ports?: JsonNullableWithAggregatesFilter<"Container">
    volumes?: JsonNullableWithAggregatesFilter<"Container">
    labels?: JsonNullableWithAggregatesFilter<"Container">
    restartPolicy?: StringWithAggregatesFilter<"Container"> | string
    networkMode?: StringWithAggregatesFilter<"Container"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Container"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Container"> | Date | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"Container"> | Date | string | null
    stoppedAt?: DateTimeNullableWithAggregatesFilter<"Container"> | Date | string | null
  }

  export type ContainerStatsWhereInput = {
    AND?: ContainerStatsWhereInput | ContainerStatsWhereInput[]
    OR?: ContainerStatsWhereInput[]
    NOT?: ContainerStatsWhereInput | ContainerStatsWhereInput[]
    id?: StringFilter<"ContainerStats"> | string
    containerId?: StringFilter<"ContainerStats"> | string
    cpuPercent?: FloatFilter<"ContainerStats"> | number
    memoryUsage?: BigIntFilter<"ContainerStats"> | bigint | number
    memoryLimit?: BigIntFilter<"ContainerStats"> | bigint | number
    networkRx?: BigIntFilter<"ContainerStats"> | bigint | number
    networkTx?: BigIntFilter<"ContainerStats"> | bigint | number
    blockRead?: BigIntFilter<"ContainerStats"> | bigint | number
    blockWrite?: BigIntFilter<"ContainerStats"> | bigint | number
    timestamp?: DateTimeFilter<"ContainerStats"> | Date | string
    container?: XOR<ContainerScalarRelationFilter, ContainerWhereInput>
  }

  export type ContainerStatsOrderByWithRelationInput = {
    id?: SortOrder
    containerId?: SortOrder
    cpuPercent?: SortOrder
    memoryUsage?: SortOrder
    memoryLimit?: SortOrder
    networkRx?: SortOrder
    networkTx?: SortOrder
    blockRead?: SortOrder
    blockWrite?: SortOrder
    timestamp?: SortOrder
    container?: ContainerOrderByWithRelationInput
    _relevance?: ContainerStatsOrderByRelevanceInput
  }

  export type ContainerStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContainerStatsWhereInput | ContainerStatsWhereInput[]
    OR?: ContainerStatsWhereInput[]
    NOT?: ContainerStatsWhereInput | ContainerStatsWhereInput[]
    containerId?: StringFilter<"ContainerStats"> | string
    cpuPercent?: FloatFilter<"ContainerStats"> | number
    memoryUsage?: BigIntFilter<"ContainerStats"> | bigint | number
    memoryLimit?: BigIntFilter<"ContainerStats"> | bigint | number
    networkRx?: BigIntFilter<"ContainerStats"> | bigint | number
    networkTx?: BigIntFilter<"ContainerStats"> | bigint | number
    blockRead?: BigIntFilter<"ContainerStats"> | bigint | number
    blockWrite?: BigIntFilter<"ContainerStats"> | bigint | number
    timestamp?: DateTimeFilter<"ContainerStats"> | Date | string
    container?: XOR<ContainerScalarRelationFilter, ContainerWhereInput>
  }, "id">

  export type ContainerStatsOrderByWithAggregationInput = {
    id?: SortOrder
    containerId?: SortOrder
    cpuPercent?: SortOrder
    memoryUsage?: SortOrder
    memoryLimit?: SortOrder
    networkRx?: SortOrder
    networkTx?: SortOrder
    blockRead?: SortOrder
    blockWrite?: SortOrder
    timestamp?: SortOrder
    _count?: ContainerStatsCountOrderByAggregateInput
    _avg?: ContainerStatsAvgOrderByAggregateInput
    _max?: ContainerStatsMaxOrderByAggregateInput
    _min?: ContainerStatsMinOrderByAggregateInput
    _sum?: ContainerStatsSumOrderByAggregateInput
  }

  export type ContainerStatsScalarWhereWithAggregatesInput = {
    AND?: ContainerStatsScalarWhereWithAggregatesInput | ContainerStatsScalarWhereWithAggregatesInput[]
    OR?: ContainerStatsScalarWhereWithAggregatesInput[]
    NOT?: ContainerStatsScalarWhereWithAggregatesInput | ContainerStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContainerStats"> | string
    containerId?: StringWithAggregatesFilter<"ContainerStats"> | string
    cpuPercent?: FloatWithAggregatesFilter<"ContainerStats"> | number
    memoryUsage?: BigIntWithAggregatesFilter<"ContainerStats"> | bigint | number
    memoryLimit?: BigIntWithAggregatesFilter<"ContainerStats"> | bigint | number
    networkRx?: BigIntWithAggregatesFilter<"ContainerStats"> | bigint | number
    networkTx?: BigIntWithAggregatesFilter<"ContainerStats"> | bigint | number
    blockRead?: BigIntWithAggregatesFilter<"ContainerStats"> | bigint | number
    blockWrite?: BigIntWithAggregatesFilter<"ContainerStats"> | bigint | number
    timestamp?: DateTimeWithAggregatesFilter<"ContainerStats"> | Date | string
  }

  export type ContainerLogWhereInput = {
    AND?: ContainerLogWhereInput | ContainerLogWhereInput[]
    OR?: ContainerLogWhereInput[]
    NOT?: ContainerLogWhereInput | ContainerLogWhereInput[]
    id?: StringFilter<"ContainerLog"> | string
    containerId?: StringFilter<"ContainerLog"> | string
    message?: StringFilter<"ContainerLog"> | string
    level?: EnumLogLevelFilter<"ContainerLog"> | $Enums.LogLevel
    timestamp?: DateTimeFilter<"ContainerLog"> | Date | string
    container?: XOR<ContainerScalarRelationFilter, ContainerWhereInput>
  }

  export type ContainerLogOrderByWithRelationInput = {
    id?: SortOrder
    containerId?: SortOrder
    message?: SortOrder
    level?: SortOrder
    timestamp?: SortOrder
    container?: ContainerOrderByWithRelationInput
    _relevance?: ContainerLogOrderByRelevanceInput
  }

  export type ContainerLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContainerLogWhereInput | ContainerLogWhereInput[]
    OR?: ContainerLogWhereInput[]
    NOT?: ContainerLogWhereInput | ContainerLogWhereInput[]
    containerId?: StringFilter<"ContainerLog"> | string
    message?: StringFilter<"ContainerLog"> | string
    level?: EnumLogLevelFilter<"ContainerLog"> | $Enums.LogLevel
    timestamp?: DateTimeFilter<"ContainerLog"> | Date | string
    container?: XOR<ContainerScalarRelationFilter, ContainerWhereInput>
  }, "id">

  export type ContainerLogOrderByWithAggregationInput = {
    id?: SortOrder
    containerId?: SortOrder
    message?: SortOrder
    level?: SortOrder
    timestamp?: SortOrder
    _count?: ContainerLogCountOrderByAggregateInput
    _max?: ContainerLogMaxOrderByAggregateInput
    _min?: ContainerLogMinOrderByAggregateInput
  }

  export type ContainerLogScalarWhereWithAggregatesInput = {
    AND?: ContainerLogScalarWhereWithAggregatesInput | ContainerLogScalarWhereWithAggregatesInput[]
    OR?: ContainerLogScalarWhereWithAggregatesInput[]
    NOT?: ContainerLogScalarWhereWithAggregatesInput | ContainerLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContainerLog"> | string
    containerId?: StringWithAggregatesFilter<"ContainerLog"> | string
    message?: StringWithAggregatesFilter<"ContainerLog"> | string
    level?: EnumLogLevelWithAggregatesFilter<"ContainerLog"> | $Enums.LogLevel
    timestamp?: DateTimeWithAggregatesFilter<"ContainerLog"> | Date | string
  }

  export type ServiceHealthWhereInput = {
    AND?: ServiceHealthWhereInput | ServiceHealthWhereInput[]
    OR?: ServiceHealthWhereInput[]
    NOT?: ServiceHealthWhereInput | ServiceHealthWhereInput[]
    id?: StringFilter<"ServiceHealth"> | string
    serviceName?: StringFilter<"ServiceHealth"> | string
    status?: EnumHealthStatusFilter<"ServiceHealth"> | $Enums.HealthStatus
    responseTime?: IntFilter<"ServiceHealth"> | number
    error?: StringNullableFilter<"ServiceHealth"> | string | null
    details?: JsonNullableFilter<"ServiceHealth">
    lastCheck?: DateTimeFilter<"ServiceHealth"> | Date | string
    createdAt?: DateTimeFilter<"ServiceHealth"> | Date | string
  }

  export type ServiceHealthOrderByWithRelationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    status?: SortOrder
    responseTime?: SortOrder
    error?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    lastCheck?: SortOrder
    createdAt?: SortOrder
    _relevance?: ServiceHealthOrderByRelevanceInput
  }

  export type ServiceHealthWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServiceHealthWhereInput | ServiceHealthWhereInput[]
    OR?: ServiceHealthWhereInput[]
    NOT?: ServiceHealthWhereInput | ServiceHealthWhereInput[]
    serviceName?: StringFilter<"ServiceHealth"> | string
    status?: EnumHealthStatusFilter<"ServiceHealth"> | $Enums.HealthStatus
    responseTime?: IntFilter<"ServiceHealth"> | number
    error?: StringNullableFilter<"ServiceHealth"> | string | null
    details?: JsonNullableFilter<"ServiceHealth">
    lastCheck?: DateTimeFilter<"ServiceHealth"> | Date | string
    createdAt?: DateTimeFilter<"ServiceHealth"> | Date | string
  }, "id">

  export type ServiceHealthOrderByWithAggregationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    status?: SortOrder
    responseTime?: SortOrder
    error?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    lastCheck?: SortOrder
    createdAt?: SortOrder
    _count?: ServiceHealthCountOrderByAggregateInput
    _avg?: ServiceHealthAvgOrderByAggregateInput
    _max?: ServiceHealthMaxOrderByAggregateInput
    _min?: ServiceHealthMinOrderByAggregateInput
    _sum?: ServiceHealthSumOrderByAggregateInput
  }

  export type ServiceHealthScalarWhereWithAggregatesInput = {
    AND?: ServiceHealthScalarWhereWithAggregatesInput | ServiceHealthScalarWhereWithAggregatesInput[]
    OR?: ServiceHealthScalarWhereWithAggregatesInput[]
    NOT?: ServiceHealthScalarWhereWithAggregatesInput | ServiceHealthScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ServiceHealth"> | string
    serviceName?: StringWithAggregatesFilter<"ServiceHealth"> | string
    status?: EnumHealthStatusWithAggregatesFilter<"ServiceHealth"> | $Enums.HealthStatus
    responseTime?: IntWithAggregatesFilter<"ServiceHealth"> | number
    error?: StringNullableWithAggregatesFilter<"ServiceHealth"> | string | null
    details?: JsonNullableWithAggregatesFilter<"ServiceHealth">
    lastCheck?: DateTimeWithAggregatesFilter<"ServiceHealth"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"ServiceHealth"> | Date | string
  }

  export type InfrastructureMetricWhereInput = {
    AND?: InfrastructureMetricWhereInput | InfrastructureMetricWhereInput[]
    OR?: InfrastructureMetricWhereInput[]
    NOT?: InfrastructureMetricWhereInput | InfrastructureMetricWhereInput[]
    id?: StringFilter<"InfrastructureMetric"> | string
    service?: StringFilter<"InfrastructureMetric"> | string
    metricName?: StringFilter<"InfrastructureMetric"> | string
    value?: FloatFilter<"InfrastructureMetric"> | number
    unit?: StringFilter<"InfrastructureMetric"> | string
    labels?: JsonNullableFilter<"InfrastructureMetric">
    timestamp?: DateTimeFilter<"InfrastructureMetric"> | Date | string
  }

  export type InfrastructureMetricOrderByWithRelationInput = {
    id?: SortOrder
    service?: SortOrder
    metricName?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    labels?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _relevance?: InfrastructureMetricOrderByRelevanceInput
  }

  export type InfrastructureMetricWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InfrastructureMetricWhereInput | InfrastructureMetricWhereInput[]
    OR?: InfrastructureMetricWhereInput[]
    NOT?: InfrastructureMetricWhereInput | InfrastructureMetricWhereInput[]
    service?: StringFilter<"InfrastructureMetric"> | string
    metricName?: StringFilter<"InfrastructureMetric"> | string
    value?: FloatFilter<"InfrastructureMetric"> | number
    unit?: StringFilter<"InfrastructureMetric"> | string
    labels?: JsonNullableFilter<"InfrastructureMetric">
    timestamp?: DateTimeFilter<"InfrastructureMetric"> | Date | string
  }, "id">

  export type InfrastructureMetricOrderByWithAggregationInput = {
    id?: SortOrder
    service?: SortOrder
    metricName?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    labels?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: InfrastructureMetricCountOrderByAggregateInput
    _avg?: InfrastructureMetricAvgOrderByAggregateInput
    _max?: InfrastructureMetricMaxOrderByAggregateInput
    _min?: InfrastructureMetricMinOrderByAggregateInput
    _sum?: InfrastructureMetricSumOrderByAggregateInput
  }

  export type InfrastructureMetricScalarWhereWithAggregatesInput = {
    AND?: InfrastructureMetricScalarWhereWithAggregatesInput | InfrastructureMetricScalarWhereWithAggregatesInput[]
    OR?: InfrastructureMetricScalarWhereWithAggregatesInput[]
    NOT?: InfrastructureMetricScalarWhereWithAggregatesInput | InfrastructureMetricScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InfrastructureMetric"> | string
    service?: StringWithAggregatesFilter<"InfrastructureMetric"> | string
    metricName?: StringWithAggregatesFilter<"InfrastructureMetric"> | string
    value?: FloatWithAggregatesFilter<"InfrastructureMetric"> | number
    unit?: StringWithAggregatesFilter<"InfrastructureMetric"> | string
    labels?: JsonNullableWithAggregatesFilter<"InfrastructureMetric">
    timestamp?: DateTimeWithAggregatesFilter<"InfrastructureMetric"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringFilter<"AuditLog"> | string
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringFilter<"AuditLog"> | string
    userAgent?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AuditLogOrderByRelevanceInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringFilter<"AuditLog"> | string
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringFilter<"AuditLog"> | string
    userAgent?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    resource?: StringWithAggregatesFilter<"AuditLog"> | string
    resourceId?: StringWithAggregatesFilter<"AuditLog"> | string
    details?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringWithAggregatesFilter<"AuditLog"> | string
    userAgent?: StringWithAggregatesFilter<"AuditLog"> | string
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type WebVMTemplateWhereInput = {
    AND?: WebVMTemplateWhereInput | WebVMTemplateWhereInput[]
    OR?: WebVMTemplateWhereInput[]
    NOT?: WebVMTemplateWhereInput | WebVMTemplateWhereInput[]
    id?: StringFilter<"WebVMTemplate"> | string
    name?: StringFilter<"WebVMTemplate"> | string
    description?: StringNullableFilter<"WebVMTemplate"> | string | null
    image?: StringFilter<"WebVMTemplate"> | string
    memory?: StringFilter<"WebVMTemplate"> | string
    cpuCount?: IntFilter<"WebVMTemplate"> | number
    diskSize?: StringFilter<"WebVMTemplate"> | string
    preInstalledSoftware?: JsonNullableFilter<"WebVMTemplate">
    category?: StringFilter<"WebVMTemplate"> | string
    isPublic?: BoolFilter<"WebVMTemplate"> | boolean
    createdAt?: DateTimeFilter<"WebVMTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"WebVMTemplate"> | Date | string
    instances?: WebVMInstanceListRelationFilter
  }

  export type WebVMTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrder
    memory?: SortOrder
    cpuCount?: SortOrder
    diskSize?: SortOrder
    preInstalledSoftware?: SortOrderInput | SortOrder
    category?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    instances?: WebVMInstanceOrderByRelationAggregateInput
    _relevance?: WebVMTemplateOrderByRelevanceInput
  }

  export type WebVMTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: WebVMTemplateWhereInput | WebVMTemplateWhereInput[]
    OR?: WebVMTemplateWhereInput[]
    NOT?: WebVMTemplateWhereInput | WebVMTemplateWhereInput[]
    description?: StringNullableFilter<"WebVMTemplate"> | string | null
    image?: StringFilter<"WebVMTemplate"> | string
    memory?: StringFilter<"WebVMTemplate"> | string
    cpuCount?: IntFilter<"WebVMTemplate"> | number
    diskSize?: StringFilter<"WebVMTemplate"> | string
    preInstalledSoftware?: JsonNullableFilter<"WebVMTemplate">
    category?: StringFilter<"WebVMTemplate"> | string
    isPublic?: BoolFilter<"WebVMTemplate"> | boolean
    createdAt?: DateTimeFilter<"WebVMTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"WebVMTemplate"> | Date | string
    instances?: WebVMInstanceListRelationFilter
  }, "id" | "name">

  export type WebVMTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrder
    memory?: SortOrder
    cpuCount?: SortOrder
    diskSize?: SortOrder
    preInstalledSoftware?: SortOrderInput | SortOrder
    category?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WebVMTemplateCountOrderByAggregateInput
    _avg?: WebVMTemplateAvgOrderByAggregateInput
    _max?: WebVMTemplateMaxOrderByAggregateInput
    _min?: WebVMTemplateMinOrderByAggregateInput
    _sum?: WebVMTemplateSumOrderByAggregateInput
  }

  export type WebVMTemplateScalarWhereWithAggregatesInput = {
    AND?: WebVMTemplateScalarWhereWithAggregatesInput | WebVMTemplateScalarWhereWithAggregatesInput[]
    OR?: WebVMTemplateScalarWhereWithAggregatesInput[]
    NOT?: WebVMTemplateScalarWhereWithAggregatesInput | WebVMTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebVMTemplate"> | string
    name?: StringWithAggregatesFilter<"WebVMTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"WebVMTemplate"> | string | null
    image?: StringWithAggregatesFilter<"WebVMTemplate"> | string
    memory?: StringWithAggregatesFilter<"WebVMTemplate"> | string
    cpuCount?: IntWithAggregatesFilter<"WebVMTemplate"> | number
    diskSize?: StringWithAggregatesFilter<"WebVMTemplate"> | string
    preInstalledSoftware?: JsonNullableWithAggregatesFilter<"WebVMTemplate">
    category?: StringWithAggregatesFilter<"WebVMTemplate"> | string
    isPublic?: BoolWithAggregatesFilter<"WebVMTemplate"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"WebVMTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WebVMTemplate"> | Date | string
  }

  export type WebVMSnapshotWhereInput = {
    AND?: WebVMSnapshotWhereInput | WebVMSnapshotWhereInput[]
    OR?: WebVMSnapshotWhereInput[]
    NOT?: WebVMSnapshotWhereInput | WebVMSnapshotWhereInput[]
    id?: StringFilter<"WebVMSnapshot"> | string
    instanceId?: StringFilter<"WebVMSnapshot"> | string
    name?: StringFilter<"WebVMSnapshot"> | string
    description?: StringNullableFilter<"WebVMSnapshot"> | string | null
    size?: BigIntFilter<"WebVMSnapshot"> | bigint | number
    createdAt?: DateTimeFilter<"WebVMSnapshot"> | Date | string
    instance?: XOR<WebVMInstanceScalarRelationFilter, WebVMInstanceWhereInput>
  }

  export type WebVMSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    instanceId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    instance?: WebVMInstanceOrderByWithRelationInput
    _relevance?: WebVMSnapshotOrderByRelevanceInput
  }

  export type WebVMSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WebVMSnapshotWhereInput | WebVMSnapshotWhereInput[]
    OR?: WebVMSnapshotWhereInput[]
    NOT?: WebVMSnapshotWhereInput | WebVMSnapshotWhereInput[]
    instanceId?: StringFilter<"WebVMSnapshot"> | string
    name?: StringFilter<"WebVMSnapshot"> | string
    description?: StringNullableFilter<"WebVMSnapshot"> | string | null
    size?: BigIntFilter<"WebVMSnapshot"> | bigint | number
    createdAt?: DateTimeFilter<"WebVMSnapshot"> | Date | string
    instance?: XOR<WebVMInstanceScalarRelationFilter, WebVMInstanceWhereInput>
  }, "id">

  export type WebVMSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    instanceId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    _count?: WebVMSnapshotCountOrderByAggregateInput
    _avg?: WebVMSnapshotAvgOrderByAggregateInput
    _max?: WebVMSnapshotMaxOrderByAggregateInput
    _min?: WebVMSnapshotMinOrderByAggregateInput
    _sum?: WebVMSnapshotSumOrderByAggregateInput
  }

  export type WebVMSnapshotScalarWhereWithAggregatesInput = {
    AND?: WebVMSnapshotScalarWhereWithAggregatesInput | WebVMSnapshotScalarWhereWithAggregatesInput[]
    OR?: WebVMSnapshotScalarWhereWithAggregatesInput[]
    NOT?: WebVMSnapshotScalarWhereWithAggregatesInput | WebVMSnapshotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebVMSnapshot"> | string
    instanceId?: StringWithAggregatesFilter<"WebVMSnapshot"> | string
    name?: StringWithAggregatesFilter<"WebVMSnapshot"> | string
    description?: StringNullableWithAggregatesFilter<"WebVMSnapshot"> | string | null
    size?: BigIntWithAggregatesFilter<"WebVMSnapshot"> | bigint | number
    createdAt?: DateTimeWithAggregatesFilter<"WebVMSnapshot"> | Date | string
  }

  export type WorkspacePersistenceWhereInput = {
    AND?: WorkspacePersistenceWhereInput | WorkspacePersistenceWhereInput[]
    OR?: WorkspacePersistenceWhereInput[]
    NOT?: WorkspacePersistenceWhereInput | WorkspacePersistenceWhereInput[]
    id?: StringFilter<"WorkspacePersistence"> | string
    workspaceId?: StringFilter<"WorkspacePersistence"> | string
    storageSize?: BigIntFilter<"WorkspacePersistence"> | bigint | number
    backupCount?: IntFilter<"WorkspacePersistence"> | number
    lastBackup?: DateTimeNullableFilter<"WorkspacePersistence"> | Date | string | null
    config?: JsonNullableFilter<"WorkspacePersistence">
    createdAt?: DateTimeFilter<"WorkspacePersistence"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspacePersistence"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
  }

  export type WorkspacePersistenceOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    storageSize?: SortOrder
    backupCount?: SortOrder
    lastBackup?: SortOrderInput | SortOrder
    config?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    _relevance?: WorkspacePersistenceOrderByRelevanceInput
  }

  export type WorkspacePersistenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    workspaceId?: string
    AND?: WorkspacePersistenceWhereInput | WorkspacePersistenceWhereInput[]
    OR?: WorkspacePersistenceWhereInput[]
    NOT?: WorkspacePersistenceWhereInput | WorkspacePersistenceWhereInput[]
    storageSize?: BigIntFilter<"WorkspacePersistence"> | bigint | number
    backupCount?: IntFilter<"WorkspacePersistence"> | number
    lastBackup?: DateTimeNullableFilter<"WorkspacePersistence"> | Date | string | null
    config?: JsonNullableFilter<"WorkspacePersistence">
    createdAt?: DateTimeFilter<"WorkspacePersistence"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspacePersistence"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
  }, "id" | "workspaceId">

  export type WorkspacePersistenceOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    storageSize?: SortOrder
    backupCount?: SortOrder
    lastBackup?: SortOrderInput | SortOrder
    config?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkspacePersistenceCountOrderByAggregateInput
    _avg?: WorkspacePersistenceAvgOrderByAggregateInput
    _max?: WorkspacePersistenceMaxOrderByAggregateInput
    _min?: WorkspacePersistenceMinOrderByAggregateInput
    _sum?: WorkspacePersistenceSumOrderByAggregateInput
  }

  export type WorkspacePersistenceScalarWhereWithAggregatesInput = {
    AND?: WorkspacePersistenceScalarWhereWithAggregatesInput | WorkspacePersistenceScalarWhereWithAggregatesInput[]
    OR?: WorkspacePersistenceScalarWhereWithAggregatesInput[]
    NOT?: WorkspacePersistenceScalarWhereWithAggregatesInput | WorkspacePersistenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkspacePersistence"> | string
    workspaceId?: StringWithAggregatesFilter<"WorkspacePersistence"> | string
    storageSize?: BigIntWithAggregatesFilter<"WorkspacePersistence"> | bigint | number
    backupCount?: IntWithAggregatesFilter<"WorkspacePersistence"> | number
    lastBackup?: DateTimeNullableWithAggregatesFilter<"WorkspacePersistence"> | Date | string | null
    config?: JsonNullableWithAggregatesFilter<"WorkspacePersistence">
    createdAt?: DateTimeWithAggregatesFilter<"WorkspacePersistence"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkspacePersistence"> | Date | string
  }

  export type InfrastructureAlertWhereInput = {
    AND?: InfrastructureAlertWhereInput | InfrastructureAlertWhereInput[]
    OR?: InfrastructureAlertWhereInput[]
    NOT?: InfrastructureAlertWhereInput | InfrastructureAlertWhereInput[]
    id?: StringFilter<"InfrastructureAlert"> | string
    name?: StringFilter<"InfrastructureAlert"> | string
    query?: StringFilter<"InfrastructureAlert"> | string
    condition?: StringFilter<"InfrastructureAlert"> | string
    threshold?: FloatFilter<"InfrastructureAlert"> | number
    duration?: StringFilter<"InfrastructureAlert"> | string
    severity?: EnumAlertSeverityFilter<"InfrastructureAlert"> | $Enums.AlertSeverity
    state?: EnumAlertStateFilter<"InfrastructureAlert"> | $Enums.AlertState
    labels?: JsonNullableFilter<"InfrastructureAlert">
    annotations?: JsonNullableFilter<"InfrastructureAlert">
    createdAt?: DateTimeFilter<"InfrastructureAlert"> | Date | string
    updatedAt?: DateTimeFilter<"InfrastructureAlert"> | Date | string
    firedAt?: DateTimeNullableFilter<"InfrastructureAlert"> | Date | string | null
    resolvedAt?: DateTimeNullableFilter<"InfrastructureAlert"> | Date | string | null
    notifications?: AlertNotificationListRelationFilter
  }

  export type InfrastructureAlertOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    query?: SortOrder
    condition?: SortOrder
    threshold?: SortOrder
    duration?: SortOrder
    severity?: SortOrder
    state?: SortOrder
    labels?: SortOrderInput | SortOrder
    annotations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firedAt?: SortOrderInput | SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    notifications?: AlertNotificationOrderByRelationAggregateInput
    _relevance?: InfrastructureAlertOrderByRelevanceInput
  }

  export type InfrastructureAlertWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InfrastructureAlertWhereInput | InfrastructureAlertWhereInput[]
    OR?: InfrastructureAlertWhereInput[]
    NOT?: InfrastructureAlertWhereInput | InfrastructureAlertWhereInput[]
    name?: StringFilter<"InfrastructureAlert"> | string
    query?: StringFilter<"InfrastructureAlert"> | string
    condition?: StringFilter<"InfrastructureAlert"> | string
    threshold?: FloatFilter<"InfrastructureAlert"> | number
    duration?: StringFilter<"InfrastructureAlert"> | string
    severity?: EnumAlertSeverityFilter<"InfrastructureAlert"> | $Enums.AlertSeverity
    state?: EnumAlertStateFilter<"InfrastructureAlert"> | $Enums.AlertState
    labels?: JsonNullableFilter<"InfrastructureAlert">
    annotations?: JsonNullableFilter<"InfrastructureAlert">
    createdAt?: DateTimeFilter<"InfrastructureAlert"> | Date | string
    updatedAt?: DateTimeFilter<"InfrastructureAlert"> | Date | string
    firedAt?: DateTimeNullableFilter<"InfrastructureAlert"> | Date | string | null
    resolvedAt?: DateTimeNullableFilter<"InfrastructureAlert"> | Date | string | null
    notifications?: AlertNotificationListRelationFilter
  }, "id">

  export type InfrastructureAlertOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    query?: SortOrder
    condition?: SortOrder
    threshold?: SortOrder
    duration?: SortOrder
    severity?: SortOrder
    state?: SortOrder
    labels?: SortOrderInput | SortOrder
    annotations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firedAt?: SortOrderInput | SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    _count?: InfrastructureAlertCountOrderByAggregateInput
    _avg?: InfrastructureAlertAvgOrderByAggregateInput
    _max?: InfrastructureAlertMaxOrderByAggregateInput
    _min?: InfrastructureAlertMinOrderByAggregateInput
    _sum?: InfrastructureAlertSumOrderByAggregateInput
  }

  export type InfrastructureAlertScalarWhereWithAggregatesInput = {
    AND?: InfrastructureAlertScalarWhereWithAggregatesInput | InfrastructureAlertScalarWhereWithAggregatesInput[]
    OR?: InfrastructureAlertScalarWhereWithAggregatesInput[]
    NOT?: InfrastructureAlertScalarWhereWithAggregatesInput | InfrastructureAlertScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InfrastructureAlert"> | string
    name?: StringWithAggregatesFilter<"InfrastructureAlert"> | string
    query?: StringWithAggregatesFilter<"InfrastructureAlert"> | string
    condition?: StringWithAggregatesFilter<"InfrastructureAlert"> | string
    threshold?: FloatWithAggregatesFilter<"InfrastructureAlert"> | number
    duration?: StringWithAggregatesFilter<"InfrastructureAlert"> | string
    severity?: EnumAlertSeverityWithAggregatesFilter<"InfrastructureAlert"> | $Enums.AlertSeverity
    state?: EnumAlertStateWithAggregatesFilter<"InfrastructureAlert"> | $Enums.AlertState
    labels?: JsonNullableWithAggregatesFilter<"InfrastructureAlert">
    annotations?: JsonNullableWithAggregatesFilter<"InfrastructureAlert">
    createdAt?: DateTimeWithAggregatesFilter<"InfrastructureAlert"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InfrastructureAlert"> | Date | string
    firedAt?: DateTimeNullableWithAggregatesFilter<"InfrastructureAlert"> | Date | string | null
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"InfrastructureAlert"> | Date | string | null
  }

  export type AlertNotificationWhereInput = {
    AND?: AlertNotificationWhereInput | AlertNotificationWhereInput[]
    OR?: AlertNotificationWhereInput[]
    NOT?: AlertNotificationWhereInput | AlertNotificationWhereInput[]
    id?: StringFilter<"AlertNotification"> | string
    alertId?: StringFilter<"AlertNotification"> | string
    type?: EnumNotificationTypeFilter<"AlertNotification"> | $Enums.NotificationType
    recipient?: StringFilter<"AlertNotification"> | string
    message?: StringFilter<"AlertNotification"> | string
    sentAt?: DateTimeFilter<"AlertNotification"> | Date | string
    alert?: XOR<InfrastructureAlertScalarRelationFilter, InfrastructureAlertWhereInput>
  }

  export type AlertNotificationOrderByWithRelationInput = {
    id?: SortOrder
    alertId?: SortOrder
    type?: SortOrder
    recipient?: SortOrder
    message?: SortOrder
    sentAt?: SortOrder
    alert?: InfrastructureAlertOrderByWithRelationInput
    _relevance?: AlertNotificationOrderByRelevanceInput
  }

  export type AlertNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlertNotificationWhereInput | AlertNotificationWhereInput[]
    OR?: AlertNotificationWhereInput[]
    NOT?: AlertNotificationWhereInput | AlertNotificationWhereInput[]
    alertId?: StringFilter<"AlertNotification"> | string
    type?: EnumNotificationTypeFilter<"AlertNotification"> | $Enums.NotificationType
    recipient?: StringFilter<"AlertNotification"> | string
    message?: StringFilter<"AlertNotification"> | string
    sentAt?: DateTimeFilter<"AlertNotification"> | Date | string
    alert?: XOR<InfrastructureAlertScalarRelationFilter, InfrastructureAlertWhereInput>
  }, "id">

  export type AlertNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    alertId?: SortOrder
    type?: SortOrder
    recipient?: SortOrder
    message?: SortOrder
    sentAt?: SortOrder
    _count?: AlertNotificationCountOrderByAggregateInput
    _max?: AlertNotificationMaxOrderByAggregateInput
    _min?: AlertNotificationMinOrderByAggregateInput
  }

  export type AlertNotificationScalarWhereWithAggregatesInput = {
    AND?: AlertNotificationScalarWhereWithAggregatesInput | AlertNotificationScalarWhereWithAggregatesInput[]
    OR?: AlertNotificationScalarWhereWithAggregatesInput[]
    NOT?: AlertNotificationScalarWhereWithAggregatesInput | AlertNotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AlertNotification"> | string
    alertId?: StringWithAggregatesFilter<"AlertNotification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"AlertNotification"> | $Enums.NotificationType
    recipient?: StringWithAggregatesFilter<"AlertNotification"> | string
    message?: StringWithAggregatesFilter<"AlertNotification"> | string
    sentAt?: DateTimeWithAggregatesFilter<"AlertNotification"> | Date | string
  }

  export type WorkspaceFileWhereInput = {
    AND?: WorkspaceFileWhereInput | WorkspaceFileWhereInput[]
    OR?: WorkspaceFileWhereInput[]
    NOT?: WorkspaceFileWhereInput | WorkspaceFileWhereInput[]
    id?: StringFilter<"WorkspaceFile"> | string
    workspaceId?: StringFilter<"WorkspaceFile"> | string
    path?: StringFilter<"WorkspaceFile"> | string
    name?: StringFilter<"WorkspaceFile"> | string
    type?: StringFilter<"WorkspaceFile"> | string
    size?: BigIntFilter<"WorkspaceFile"> | bigint | number
    mimeType?: StringFilter<"WorkspaceFile"> | string
    encoding?: StringFilter<"WorkspaceFile"> | string
    content?: StringNullableFilter<"WorkspaceFile"> | string | null
    hash?: StringFilter<"WorkspaceFile"> | string
    parentId?: StringNullableFilter<"WorkspaceFile"> | string | null
    isDirectory?: BoolFilter<"WorkspaceFile"> | boolean
    permissions?: JsonFilter<"WorkspaceFile">
    metadata?: JsonFilter<"WorkspaceFile">
    version?: IntFilter<"WorkspaceFile"> | number
    createdAt?: DateTimeFilter<"WorkspaceFile"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceFile"> | Date | string
    lastAccessedAt?: DateTimeFilter<"WorkspaceFile"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    parent?: XOR<WorkspaceFileNullableScalarRelationFilter, WorkspaceFileWhereInput> | null
    children?: WorkspaceFileListRelationFilter
    indexes?: FileIndexListRelationFilter
  }

  export type WorkspaceFileOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    path?: SortOrder
    name?: SortOrder
    type?: SortOrder
    size?: SortOrder
    mimeType?: SortOrder
    encoding?: SortOrder
    content?: SortOrderInput | SortOrder
    hash?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isDirectory?: SortOrder
    permissions?: SortOrder
    metadata?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastAccessedAt?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    parent?: WorkspaceFileOrderByWithRelationInput
    children?: WorkspaceFileOrderByRelationAggregateInput
    indexes?: FileIndexOrderByRelationAggregateInput
    _relevance?: WorkspaceFileOrderByRelevanceInput
  }

  export type WorkspaceFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    workspaceId_path?: WorkspaceFileWorkspaceIdPathCompoundUniqueInput
    AND?: WorkspaceFileWhereInput | WorkspaceFileWhereInput[]
    OR?: WorkspaceFileWhereInput[]
    NOT?: WorkspaceFileWhereInput | WorkspaceFileWhereInput[]
    workspaceId?: StringFilter<"WorkspaceFile"> | string
    path?: StringFilter<"WorkspaceFile"> | string
    name?: StringFilter<"WorkspaceFile"> | string
    type?: StringFilter<"WorkspaceFile"> | string
    size?: BigIntFilter<"WorkspaceFile"> | bigint | number
    mimeType?: StringFilter<"WorkspaceFile"> | string
    encoding?: StringFilter<"WorkspaceFile"> | string
    content?: StringNullableFilter<"WorkspaceFile"> | string | null
    hash?: StringFilter<"WorkspaceFile"> | string
    parentId?: StringNullableFilter<"WorkspaceFile"> | string | null
    isDirectory?: BoolFilter<"WorkspaceFile"> | boolean
    permissions?: JsonFilter<"WorkspaceFile">
    metadata?: JsonFilter<"WorkspaceFile">
    version?: IntFilter<"WorkspaceFile"> | number
    createdAt?: DateTimeFilter<"WorkspaceFile"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceFile"> | Date | string
    lastAccessedAt?: DateTimeFilter<"WorkspaceFile"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    parent?: XOR<WorkspaceFileNullableScalarRelationFilter, WorkspaceFileWhereInput> | null
    children?: WorkspaceFileListRelationFilter
    indexes?: FileIndexListRelationFilter
  }, "id" | "workspaceId_path">

  export type WorkspaceFileOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    path?: SortOrder
    name?: SortOrder
    type?: SortOrder
    size?: SortOrder
    mimeType?: SortOrder
    encoding?: SortOrder
    content?: SortOrderInput | SortOrder
    hash?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isDirectory?: SortOrder
    permissions?: SortOrder
    metadata?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastAccessedAt?: SortOrder
    _count?: WorkspaceFileCountOrderByAggregateInput
    _avg?: WorkspaceFileAvgOrderByAggregateInput
    _max?: WorkspaceFileMaxOrderByAggregateInput
    _min?: WorkspaceFileMinOrderByAggregateInput
    _sum?: WorkspaceFileSumOrderByAggregateInput
  }

  export type WorkspaceFileScalarWhereWithAggregatesInput = {
    AND?: WorkspaceFileScalarWhereWithAggregatesInput | WorkspaceFileScalarWhereWithAggregatesInput[]
    OR?: WorkspaceFileScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceFileScalarWhereWithAggregatesInput | WorkspaceFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkspaceFile"> | string
    workspaceId?: StringWithAggregatesFilter<"WorkspaceFile"> | string
    path?: StringWithAggregatesFilter<"WorkspaceFile"> | string
    name?: StringWithAggregatesFilter<"WorkspaceFile"> | string
    type?: StringWithAggregatesFilter<"WorkspaceFile"> | string
    size?: BigIntWithAggregatesFilter<"WorkspaceFile"> | bigint | number
    mimeType?: StringWithAggregatesFilter<"WorkspaceFile"> | string
    encoding?: StringWithAggregatesFilter<"WorkspaceFile"> | string
    content?: StringNullableWithAggregatesFilter<"WorkspaceFile"> | string | null
    hash?: StringWithAggregatesFilter<"WorkspaceFile"> | string
    parentId?: StringNullableWithAggregatesFilter<"WorkspaceFile"> | string | null
    isDirectory?: BoolWithAggregatesFilter<"WorkspaceFile"> | boolean
    permissions?: JsonWithAggregatesFilter<"WorkspaceFile">
    metadata?: JsonWithAggregatesFilter<"WorkspaceFile">
    version?: IntWithAggregatesFilter<"WorkspaceFile"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkspaceFile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkspaceFile"> | Date | string
    lastAccessedAt?: DateTimeWithAggregatesFilter<"WorkspaceFile"> | Date | string
  }

  export type FileIndexWhereInput = {
    AND?: FileIndexWhereInput | FileIndexWhereInput[]
    OR?: FileIndexWhereInput[]
    NOT?: FileIndexWhereInput | FileIndexWhereInput[]
    id?: StringFilter<"FileIndex"> | string
    workspaceId?: StringFilter<"FileIndex"> | string
    path?: StringFilter<"FileIndex"> | string
    content?: StringFilter<"FileIndex"> | string
    tokens?: JsonFilter<"FileIndex">
    language?: StringFilter<"FileIndex"> | string
    symbols?: JsonFilter<"FileIndex">
    imports?: JsonFilter<"FileIndex">
    exports?: JsonFilter<"FileIndex">
    dependencies?: JsonFilter<"FileIndex">
    complexity?: JsonFilter<"FileIndex">
    lastIndexed?: DateTimeFilter<"FileIndex"> | Date | string
    indexVersion?: StringFilter<"FileIndex"> | string
    workspaceFile?: XOR<WorkspaceFileScalarRelationFilter, WorkspaceFileWhereInput>
  }

  export type FileIndexOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    path?: SortOrder
    content?: SortOrder
    tokens?: SortOrder
    language?: SortOrder
    symbols?: SortOrder
    imports?: SortOrder
    exports?: SortOrder
    dependencies?: SortOrder
    complexity?: SortOrder
    lastIndexed?: SortOrder
    indexVersion?: SortOrder
    workspaceFile?: WorkspaceFileOrderByWithRelationInput
    _relevance?: FileIndexOrderByRelevanceInput
  }

  export type FileIndexWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    workspaceId_path?: FileIndexWorkspaceIdPathCompoundUniqueInput
    AND?: FileIndexWhereInput | FileIndexWhereInput[]
    OR?: FileIndexWhereInput[]
    NOT?: FileIndexWhereInput | FileIndexWhereInput[]
    workspaceId?: StringFilter<"FileIndex"> | string
    path?: StringFilter<"FileIndex"> | string
    content?: StringFilter<"FileIndex"> | string
    tokens?: JsonFilter<"FileIndex">
    language?: StringFilter<"FileIndex"> | string
    symbols?: JsonFilter<"FileIndex">
    imports?: JsonFilter<"FileIndex">
    exports?: JsonFilter<"FileIndex">
    dependencies?: JsonFilter<"FileIndex">
    complexity?: JsonFilter<"FileIndex">
    lastIndexed?: DateTimeFilter<"FileIndex"> | Date | string
    indexVersion?: StringFilter<"FileIndex"> | string
    workspaceFile?: XOR<WorkspaceFileScalarRelationFilter, WorkspaceFileWhereInput>
  }, "id" | "workspaceId_path">

  export type FileIndexOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    path?: SortOrder
    content?: SortOrder
    tokens?: SortOrder
    language?: SortOrder
    symbols?: SortOrder
    imports?: SortOrder
    exports?: SortOrder
    dependencies?: SortOrder
    complexity?: SortOrder
    lastIndexed?: SortOrder
    indexVersion?: SortOrder
    _count?: FileIndexCountOrderByAggregateInput
    _max?: FileIndexMaxOrderByAggregateInput
    _min?: FileIndexMinOrderByAggregateInput
  }

  export type FileIndexScalarWhereWithAggregatesInput = {
    AND?: FileIndexScalarWhereWithAggregatesInput | FileIndexScalarWhereWithAggregatesInput[]
    OR?: FileIndexScalarWhereWithAggregatesInput[]
    NOT?: FileIndexScalarWhereWithAggregatesInput | FileIndexScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FileIndex"> | string
    workspaceId?: StringWithAggregatesFilter<"FileIndex"> | string
    path?: StringWithAggregatesFilter<"FileIndex"> | string
    content?: StringWithAggregatesFilter<"FileIndex"> | string
    tokens?: JsonWithAggregatesFilter<"FileIndex">
    language?: StringWithAggregatesFilter<"FileIndex"> | string
    symbols?: JsonWithAggregatesFilter<"FileIndex">
    imports?: JsonWithAggregatesFilter<"FileIndex">
    exports?: JsonWithAggregatesFilter<"FileIndex">
    dependencies?: JsonWithAggregatesFilter<"FileIndex">
    complexity?: JsonWithAggregatesFilter<"FileIndex">
    lastIndexed?: DateTimeWithAggregatesFilter<"FileIndex"> | Date | string
    indexVersion?: StringWithAggregatesFilter<"FileIndex"> | string
  }

  export type WorkspaceStateWhereInput = {
    AND?: WorkspaceStateWhereInput | WorkspaceStateWhereInput[]
    OR?: WorkspaceStateWhereInput[]
    NOT?: WorkspaceStateWhereInput | WorkspaceStateWhereInput[]
    id?: StringFilter<"WorkspaceState"> | string
    workspaceId?: StringFilter<"WorkspaceState"> | string
    sessionId?: StringFilter<"WorkspaceState"> | string
    environment?: JsonFilter<"WorkspaceState">
    processes?: JsonFilter<"WorkspaceState">
    openFiles?: JsonFilter<"WorkspaceState">
    terminalSessions?: JsonFilter<"WorkspaceState">
    editorState?: JsonFilter<"WorkspaceState">
    gitState?: JsonFilter<"WorkspaceState">
    installedPackages?: JsonFilter<"WorkspaceState">
    customSettings?: JsonFilter<"WorkspaceState">
    createdAt?: DateTimeFilter<"WorkspaceState"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceState"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
  }

  export type WorkspaceStateOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    sessionId?: SortOrder
    environment?: SortOrder
    processes?: SortOrder
    openFiles?: SortOrder
    terminalSessions?: SortOrder
    editorState?: SortOrder
    gitState?: SortOrder
    installedPackages?: SortOrder
    customSettings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    _relevance?: WorkspaceStateOrderByRelevanceInput
  }

  export type WorkspaceStateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    workspaceId_sessionId?: WorkspaceStateWorkspaceIdSessionIdCompoundUniqueInput
    AND?: WorkspaceStateWhereInput | WorkspaceStateWhereInput[]
    OR?: WorkspaceStateWhereInput[]
    NOT?: WorkspaceStateWhereInput | WorkspaceStateWhereInput[]
    workspaceId?: StringFilter<"WorkspaceState"> | string
    sessionId?: StringFilter<"WorkspaceState"> | string
    environment?: JsonFilter<"WorkspaceState">
    processes?: JsonFilter<"WorkspaceState">
    openFiles?: JsonFilter<"WorkspaceState">
    terminalSessions?: JsonFilter<"WorkspaceState">
    editorState?: JsonFilter<"WorkspaceState">
    gitState?: JsonFilter<"WorkspaceState">
    installedPackages?: JsonFilter<"WorkspaceState">
    customSettings?: JsonFilter<"WorkspaceState">
    createdAt?: DateTimeFilter<"WorkspaceState"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceState"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
  }, "id" | "workspaceId_sessionId">

  export type WorkspaceStateOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    sessionId?: SortOrder
    environment?: SortOrder
    processes?: SortOrder
    openFiles?: SortOrder
    terminalSessions?: SortOrder
    editorState?: SortOrder
    gitState?: SortOrder
    installedPackages?: SortOrder
    customSettings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkspaceStateCountOrderByAggregateInput
    _max?: WorkspaceStateMaxOrderByAggregateInput
    _min?: WorkspaceStateMinOrderByAggregateInput
  }

  export type WorkspaceStateScalarWhereWithAggregatesInput = {
    AND?: WorkspaceStateScalarWhereWithAggregatesInput | WorkspaceStateScalarWhereWithAggregatesInput[]
    OR?: WorkspaceStateScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceStateScalarWhereWithAggregatesInput | WorkspaceStateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkspaceState"> | string
    workspaceId?: StringWithAggregatesFilter<"WorkspaceState"> | string
    sessionId?: StringWithAggregatesFilter<"WorkspaceState"> | string
    environment?: JsonWithAggregatesFilter<"WorkspaceState">
    processes?: JsonWithAggregatesFilter<"WorkspaceState">
    openFiles?: JsonWithAggregatesFilter<"WorkspaceState">
    terminalSessions?: JsonWithAggregatesFilter<"WorkspaceState">
    editorState?: JsonWithAggregatesFilter<"WorkspaceState">
    gitState?: JsonWithAggregatesFilter<"WorkspaceState">
    installedPackages?: JsonWithAggregatesFilter<"WorkspaceState">
    customSettings?: JsonWithAggregatesFilter<"WorkspaceState">
    createdAt?: DateTimeWithAggregatesFilter<"WorkspaceState"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkspaceState"> | Date | string
  }

  export type WorkspaceSyncWhereInput = {
    AND?: WorkspaceSyncWhereInput | WorkspaceSyncWhereInput[]
    OR?: WorkspaceSyncWhereInput[]
    NOT?: WorkspaceSyncWhereInput | WorkspaceSyncWhereInput[]
    id?: StringFilter<"WorkspaceSync"> | string
    workspaceId?: StringFilter<"WorkspaceSync"> | string
    type?: EnumSyncTypeFilter<"WorkspaceSync"> | $Enums.SyncType
    status?: EnumSyncStatusFilter<"WorkspaceSync"> | $Enums.SyncStatus
    direction?: StringFilter<"WorkspaceSync"> | string
    source?: JsonFilter<"WorkspaceSync">
    target?: JsonFilter<"WorkspaceSync">
    progress?: JsonFilter<"WorkspaceSync">
    conflicts?: JsonFilter<"WorkspaceSync">
    lastSync?: DateTimeNullableFilter<"WorkspaceSync"> | Date | string | null
    nextSync?: DateTimeNullableFilter<"WorkspaceSync"> | Date | string | null
    settings?: JsonFilter<"WorkspaceSync">
    createdAt?: DateTimeFilter<"WorkspaceSync"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceSync"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
  }

  export type WorkspaceSyncOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    direction?: SortOrder
    source?: SortOrder
    target?: SortOrder
    progress?: SortOrder
    conflicts?: SortOrder
    lastSync?: SortOrderInput | SortOrder
    nextSync?: SortOrderInput | SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workspace?: WorkspaceOrderByWithRelationInput
    _relevance?: WorkspaceSyncOrderByRelevanceInput
  }

  export type WorkspaceSyncWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkspaceSyncWhereInput | WorkspaceSyncWhereInput[]
    OR?: WorkspaceSyncWhereInput[]
    NOT?: WorkspaceSyncWhereInput | WorkspaceSyncWhereInput[]
    workspaceId?: StringFilter<"WorkspaceSync"> | string
    type?: EnumSyncTypeFilter<"WorkspaceSync"> | $Enums.SyncType
    status?: EnumSyncStatusFilter<"WorkspaceSync"> | $Enums.SyncStatus
    direction?: StringFilter<"WorkspaceSync"> | string
    source?: JsonFilter<"WorkspaceSync">
    target?: JsonFilter<"WorkspaceSync">
    progress?: JsonFilter<"WorkspaceSync">
    conflicts?: JsonFilter<"WorkspaceSync">
    lastSync?: DateTimeNullableFilter<"WorkspaceSync"> | Date | string | null
    nextSync?: DateTimeNullableFilter<"WorkspaceSync"> | Date | string | null
    settings?: JsonFilter<"WorkspaceSync">
    createdAt?: DateTimeFilter<"WorkspaceSync"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceSync"> | Date | string
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
  }, "id">

  export type WorkspaceSyncOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    direction?: SortOrder
    source?: SortOrder
    target?: SortOrder
    progress?: SortOrder
    conflicts?: SortOrder
    lastSync?: SortOrderInput | SortOrder
    nextSync?: SortOrderInput | SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkspaceSyncCountOrderByAggregateInput
    _max?: WorkspaceSyncMaxOrderByAggregateInput
    _min?: WorkspaceSyncMinOrderByAggregateInput
  }

  export type WorkspaceSyncScalarWhereWithAggregatesInput = {
    AND?: WorkspaceSyncScalarWhereWithAggregatesInput | WorkspaceSyncScalarWhereWithAggregatesInput[]
    OR?: WorkspaceSyncScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceSyncScalarWhereWithAggregatesInput | WorkspaceSyncScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkspaceSync"> | string
    workspaceId?: StringWithAggregatesFilter<"WorkspaceSync"> | string
    type?: EnumSyncTypeWithAggregatesFilter<"WorkspaceSync"> | $Enums.SyncType
    status?: EnumSyncStatusWithAggregatesFilter<"WorkspaceSync"> | $Enums.SyncStatus
    direction?: StringWithAggregatesFilter<"WorkspaceSync"> | string
    source?: JsonWithAggregatesFilter<"WorkspaceSync">
    target?: JsonWithAggregatesFilter<"WorkspaceSync">
    progress?: JsonWithAggregatesFilter<"WorkspaceSync">
    conflicts?: JsonWithAggregatesFilter<"WorkspaceSync">
    lastSync?: DateTimeNullableWithAggregatesFilter<"WorkspaceSync"> | Date | string | null
    nextSync?: DateTimeNullableWithAggregatesFilter<"WorkspaceSync"> | Date | string | null
    settings?: JsonWithAggregatesFilter<"WorkspaceSync">
    createdAt?: DateTimeWithAggregatesFilter<"WorkspaceSync"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkspaceSync"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberCreateNestedManyWithoutUserInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberUncheckedCreateNestedManyWithoutUserInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUncheckedUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceCreateInput = {
    id?: string
    theme?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPreferencesInput
  }

  export type UserPreferenceUncheckedCreateInput = {
    id?: string
    userId: string
    theme?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type UserPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceCreateManyInput = {
    id?: string
    userId: string
    theme?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    slug: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: OrganizationMemberCreateNestedManyWithoutOrganizationInput
    projects?: ProjectCreateNestedManyWithoutOrganizationInput
    invitations?: OrganizationInvitationCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: OrganizationMemberUncheckedCreateNestedManyWithoutOrganizationInput
    projects?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: OrganizationInvitationUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: OrganizationMemberUpdateManyWithoutOrganizationNestedInput
    projects?: ProjectUpdateManyWithoutOrganizationNestedInput
    invitations?: OrganizationInvitationUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: OrganizationMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: OrganizationInvitationUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    slug: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationMemberCreateInput = {
    id?: string
    role?: $Enums.MemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutOrganizationsInput
  }

  export type OrganizationMemberUncheckedCreateInput = {
    id?: string
    organizationId: string
    userId: string
    role?: $Enums.MemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutOrganizationsNestedInput
  }

  export type OrganizationMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationMemberCreateManyInput = {
    id?: string
    organizationId: string
    userId: string
    role?: $Enums.MemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationInvitationCreateInput = {
    id?: string
    email: string
    role?: $Enums.MemberRole
    token: string
    expires: Date | string
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutInvitationsInput
  }

  export type OrganizationInvitationUncheckedCreateInput = {
    id?: string
    email: string
    organizationId: string
    role?: $Enums.MemberRole
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type OrganizationInvitationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type OrganizationInvitationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationInvitationCreateManyInput = {
    id?: string
    email: string
    organizationId: string
    role?: $Enums.MemberRole
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type OrganizationInvitationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationInvitationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    workspaces?: WorkspaceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    workspaces?: WorkspaceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    projectId: string
    assigneeId?: string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    projectId: string
    assigneeId?: string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutWorkspacesInput
    instances?: WebVMInstanceCreateNestedManyWithoutWorkspaceInput
    persistence?: WorkspacePersistenceCreateNestedOneWithoutWorkspaceInput
    files?: WorkspaceFileCreateNestedManyWithoutWorkspaceInput
    states?: WorkspaceStateCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    projectId: string
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WebVMInstanceUncheckedCreateNestedManyWithoutWorkspaceInput
    persistence?: WorkspacePersistenceUncheckedCreateNestedOneWithoutWorkspaceInput
    files?: WorkspaceFileUncheckedCreateNestedManyWithoutWorkspaceInput
    states?: WorkspaceStateUncheckedCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutWorkspacesNestedInput
    instances?: WebVMInstanceUpdateManyWithoutWorkspaceNestedInput
    persistence?: WorkspacePersistenceUpdateOneWithoutWorkspaceNestedInput
    files?: WorkspaceFileUpdateManyWithoutWorkspaceNestedInput
    states?: WorkspaceStateUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WebVMInstanceUncheckedUpdateManyWithoutWorkspaceNestedInput
    persistence?: WorkspacePersistenceUncheckedUpdateOneWithoutWorkspaceNestedInput
    files?: WorkspaceFileUncheckedUpdateManyWithoutWorkspaceNestedInput
    states?: WorkspaceStateUncheckedUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    projectId: string
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMInstanceCreateInput = {
    id?: string
    name: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    workspace: WorkspaceCreateNestedOneWithoutInstancesInput
    metrics?: WebVMMetricCreateNestedManyWithoutInstanceInput
    snapshots?: WebVMSnapshotCreateNestedManyWithoutInstanceInput
    template?: WebVMTemplateCreateNestedOneWithoutInstancesInput
  }

  export type WebVMInstanceUncheckedCreateInput = {
    id?: string
    name: string
    workspaceId: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    templateId?: string | null
    metrics?: WebVMMetricUncheckedCreateNestedManyWithoutInstanceInput
    snapshots?: WebVMSnapshotUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type WebVMInstanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workspace?: WorkspaceUpdateOneRequiredWithoutInstancesNestedInput
    metrics?: WebVMMetricUpdateManyWithoutInstanceNestedInput
    snapshots?: WebVMSnapshotUpdateManyWithoutInstanceNestedInput
    template?: WebVMTemplateUpdateOneWithoutInstancesNestedInput
  }

  export type WebVMInstanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    metrics?: WebVMMetricUncheckedUpdateManyWithoutInstanceNestedInput
    snapshots?: WebVMSnapshotUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type WebVMInstanceCreateManyInput = {
    id?: string
    name: string
    workspaceId: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    templateId?: string | null
  }

  export type WebVMInstanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WebVMInstanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebVMMetricCreateInput = {
    id?: string
    metricType: $Enums.MetricType
    value: number
    unit: string
    timestamp?: Date | string
    instance: WebVMInstanceCreateNestedOneWithoutMetricsInput
  }

  export type WebVMMetricUncheckedCreateInput = {
    id?: string
    instanceId: string
    metricType: $Enums.MetricType
    value: number
    unit: string
    timestamp?: Date | string
  }

  export type WebVMMetricUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    instance?: WebVMInstanceUpdateOneRequiredWithoutMetricsNestedInput
  }

  export type WebVMMetricUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instanceId?: StringFieldUpdateOperationsInput | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMMetricCreateManyInput = {
    id?: string
    instanceId: string
    metricType: $Enums.MetricType
    value: number
    unit: string
    timestamp?: Date | string
  }

  export type WebVMMetricUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMMetricUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instanceId?: StringFieldUpdateOperationsInput | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageBucketCreateInput = {
    id?: string
    name: string
    region?: string
    versioning?: boolean
    encryption?: boolean
    size?: bigint | number
    objectCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    objects?: StorageObjectCreateNestedManyWithoutBucketInput
    usage?: StorageUsageCreateNestedManyWithoutBucketInput
  }

  export type StorageBucketUncheckedCreateInput = {
    id?: string
    name: string
    region?: string
    versioning?: boolean
    encryption?: boolean
    size?: bigint | number
    objectCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    objects?: StorageObjectUncheckedCreateNestedManyWithoutBucketInput
    usage?: StorageUsageUncheckedCreateNestedManyWithoutBucketInput
  }

  export type StorageBucketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    versioning?: BoolFieldUpdateOperationsInput | boolean
    encryption?: BoolFieldUpdateOperationsInput | boolean
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    objects?: StorageObjectUpdateManyWithoutBucketNestedInput
    usage?: StorageUsageUpdateManyWithoutBucketNestedInput
  }

  export type StorageBucketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    versioning?: BoolFieldUpdateOperationsInput | boolean
    encryption?: BoolFieldUpdateOperationsInput | boolean
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    objects?: StorageObjectUncheckedUpdateManyWithoutBucketNestedInput
    usage?: StorageUsageUncheckedUpdateManyWithoutBucketNestedInput
  }

  export type StorageBucketCreateManyInput = {
    id?: string
    name: string
    region?: string
    versioning?: boolean
    encryption?: boolean
    size?: bigint | number
    objectCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageBucketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    versioning?: BoolFieldUpdateOperationsInput | boolean
    encryption?: BoolFieldUpdateOperationsInput | boolean
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageBucketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    versioning?: BoolFieldUpdateOperationsInput | boolean
    encryption?: BoolFieldUpdateOperationsInput | boolean
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageObjectCreateInput = {
    id?: string
    key: string
    size: bigint | number
    contentType: string
    etag: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    bucket: StorageBucketCreateNestedOneWithoutObjectsInput
  }

  export type StorageObjectUncheckedCreateInput = {
    id?: string
    key: string
    bucketId: string
    size: bigint | number
    contentType: string
    etag: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageObjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    contentType?: StringFieldUpdateOperationsInput | string
    etag?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bucket?: StorageBucketUpdateOneRequiredWithoutObjectsNestedInput
  }

  export type StorageObjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    bucketId?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    contentType?: StringFieldUpdateOperationsInput | string
    etag?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageObjectCreateManyInput = {
    id?: string
    key: string
    bucketId: string
    size: bigint | number
    contentType: string
    etag: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageObjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    contentType?: StringFieldUpdateOperationsInput | string
    etag?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageObjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    bucketId?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    contentType?: StringFieldUpdateOperationsInput | string
    etag?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageUsageCreateInput = {
    id?: string
    totalSize: bigint | number
    objectCount: number
    quota?: bigint | number
    timestamp?: Date | string
    bucket: StorageBucketCreateNestedOneWithoutUsageInput
  }

  export type StorageUsageUncheckedCreateInput = {
    id?: string
    bucketId: string
    totalSize: bigint | number
    objectCount: number
    quota?: bigint | number
    timestamp?: Date | string
  }

  export type StorageUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalSize?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    quota?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    bucket?: StorageBucketUpdateOneRequiredWithoutUsageNestedInput
  }

  export type StorageUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucketId?: StringFieldUpdateOperationsInput | string
    totalSize?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    quota?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageUsageCreateManyInput = {
    id?: string
    bucketId: string
    totalSize: bigint | number
    objectCount: number
    quota?: bigint | number
    timestamp?: Date | string
  }

  export type StorageUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalSize?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    quota?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bucketId?: StringFieldUpdateOperationsInput | string
    totalSize?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    quota?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerCreateInput = {
    id?: string
    name: string
    image: string
    status?: $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: string
    networkMode?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    stats?: ContainerStatsCreateNestedManyWithoutContainerInput
    logs?: ContainerLogCreateNestedManyWithoutContainerInput
  }

  export type ContainerUncheckedCreateInput = {
    id?: string
    name: string
    image: string
    status?: $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: string
    networkMode?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    stats?: ContainerStatsUncheckedCreateNestedManyWithoutContainerInput
    logs?: ContainerLogUncheckedCreateNestedManyWithoutContainerInput
  }

  export type ContainerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumContainerStatusFieldUpdateOperationsInput | $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: StringFieldUpdateOperationsInput | string
    networkMode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stats?: ContainerStatsUpdateManyWithoutContainerNestedInput
    logs?: ContainerLogUpdateManyWithoutContainerNestedInput
  }

  export type ContainerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumContainerStatusFieldUpdateOperationsInput | $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: StringFieldUpdateOperationsInput | string
    networkMode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stats?: ContainerStatsUncheckedUpdateManyWithoutContainerNestedInput
    logs?: ContainerLogUncheckedUpdateManyWithoutContainerNestedInput
  }

  export type ContainerCreateManyInput = {
    id?: string
    name: string
    image: string
    status?: $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: string
    networkMode?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
  }

  export type ContainerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumContainerStatusFieldUpdateOperationsInput | $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: StringFieldUpdateOperationsInput | string
    networkMode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContainerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumContainerStatusFieldUpdateOperationsInput | $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: StringFieldUpdateOperationsInput | string
    networkMode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContainerStatsCreateInput = {
    id?: string
    cpuPercent: number
    memoryUsage: bigint | number
    memoryLimit: bigint | number
    networkRx: bigint | number
    networkTx: bigint | number
    blockRead: bigint | number
    blockWrite: bigint | number
    timestamp?: Date | string
    container: ContainerCreateNestedOneWithoutStatsInput
  }

  export type ContainerStatsUncheckedCreateInput = {
    id?: string
    containerId: string
    cpuPercent: number
    memoryUsage: bigint | number
    memoryLimit: bigint | number
    networkRx: bigint | number
    networkTx: bigint | number
    blockRead: bigint | number
    blockWrite: bigint | number
    timestamp?: Date | string
  }

  export type ContainerStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuPercent?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: BigIntFieldUpdateOperationsInput | bigint | number
    memoryLimit?: BigIntFieldUpdateOperationsInput | bigint | number
    networkRx?: BigIntFieldUpdateOperationsInput | bigint | number
    networkTx?: BigIntFieldUpdateOperationsInput | bigint | number
    blockRead?: BigIntFieldUpdateOperationsInput | bigint | number
    blockWrite?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    container?: ContainerUpdateOneRequiredWithoutStatsNestedInput
  }

  export type ContainerStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    containerId?: StringFieldUpdateOperationsInput | string
    cpuPercent?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: BigIntFieldUpdateOperationsInput | bigint | number
    memoryLimit?: BigIntFieldUpdateOperationsInput | bigint | number
    networkRx?: BigIntFieldUpdateOperationsInput | bigint | number
    networkTx?: BigIntFieldUpdateOperationsInput | bigint | number
    blockRead?: BigIntFieldUpdateOperationsInput | bigint | number
    blockWrite?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerStatsCreateManyInput = {
    id?: string
    containerId: string
    cpuPercent: number
    memoryUsage: bigint | number
    memoryLimit: bigint | number
    networkRx: bigint | number
    networkTx: bigint | number
    blockRead: bigint | number
    blockWrite: bigint | number
    timestamp?: Date | string
  }

  export type ContainerStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuPercent?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: BigIntFieldUpdateOperationsInput | bigint | number
    memoryLimit?: BigIntFieldUpdateOperationsInput | bigint | number
    networkRx?: BigIntFieldUpdateOperationsInput | bigint | number
    networkTx?: BigIntFieldUpdateOperationsInput | bigint | number
    blockRead?: BigIntFieldUpdateOperationsInput | bigint | number
    blockWrite?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    containerId?: StringFieldUpdateOperationsInput | string
    cpuPercent?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: BigIntFieldUpdateOperationsInput | bigint | number
    memoryLimit?: BigIntFieldUpdateOperationsInput | bigint | number
    networkRx?: BigIntFieldUpdateOperationsInput | bigint | number
    networkTx?: BigIntFieldUpdateOperationsInput | bigint | number
    blockRead?: BigIntFieldUpdateOperationsInput | bigint | number
    blockWrite?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerLogCreateInput = {
    id?: string
    message: string
    level?: $Enums.LogLevel
    timestamp?: Date | string
    container: ContainerCreateNestedOneWithoutLogsInput
  }

  export type ContainerLogUncheckedCreateInput = {
    id?: string
    containerId: string
    message: string
    level?: $Enums.LogLevel
    timestamp?: Date | string
  }

  export type ContainerLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    container?: ContainerUpdateOneRequiredWithoutLogsNestedInput
  }

  export type ContainerLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    containerId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerLogCreateManyInput = {
    id?: string
    containerId: string
    message: string
    level?: $Enums.LogLevel
    timestamp?: Date | string
  }

  export type ContainerLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    containerId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceHealthCreateInput = {
    id?: string
    serviceName: string
    status?: $Enums.HealthStatus
    responseTime: number
    error?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    lastCheck?: Date | string
    createdAt?: Date | string
  }

  export type ServiceHealthUncheckedCreateInput = {
    id?: string
    serviceName: string
    status?: $Enums.HealthStatus
    responseTime: number
    error?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    lastCheck?: Date | string
    createdAt?: Date | string
  }

  export type ServiceHealthUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    status?: EnumHealthStatusFieldUpdateOperationsInput | $Enums.HealthStatus
    responseTime?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    lastCheck?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceHealthUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    status?: EnumHealthStatusFieldUpdateOperationsInput | $Enums.HealthStatus
    responseTime?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    lastCheck?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceHealthCreateManyInput = {
    id?: string
    serviceName: string
    status?: $Enums.HealthStatus
    responseTime: number
    error?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    lastCheck?: Date | string
    createdAt?: Date | string
  }

  export type ServiceHealthUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    status?: EnumHealthStatusFieldUpdateOperationsInput | $Enums.HealthStatus
    responseTime?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    lastCheck?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceHealthUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    status?: EnumHealthStatusFieldUpdateOperationsInput | $Enums.HealthStatus
    responseTime?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    lastCheck?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InfrastructureMetricCreateInput = {
    id?: string
    service: string
    metricName: string
    value: number
    unit: string
    labels?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type InfrastructureMetricUncheckedCreateInput = {
    id?: string
    service: string
    metricName: string
    value: number
    unit: string
    labels?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type InfrastructureMetricUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    service?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    labels?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InfrastructureMetricUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    service?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    labels?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InfrastructureMetricCreateManyInput = {
    id?: string
    service: string
    metricName: string
    value: number
    unit: string
    labels?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type InfrastructureMetricUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    service?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    labels?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InfrastructureMetricUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    service?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    labels?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    resource: string
    resourceId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress: string
    userAgent: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    resource: string
    resourceId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress: string
    userAgent: string
    timestamp?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId: string
    action: string
    resource: string
    resourceId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress: string
    userAgent: string
    timestamp?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    image: string
    memory?: string
    cpuCount?: number
    diskSize?: string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WebVMInstanceCreateNestedManyWithoutTemplateInput
  }

  export type WebVMTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    image: string
    memory?: string
    cpuCount?: number
    diskSize?: string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WebVMInstanceUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type WebVMTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    memory?: StringFieldUpdateOperationsInput | string
    cpuCount?: IntFieldUpdateOperationsInput | number
    diskSize?: StringFieldUpdateOperationsInput | string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WebVMInstanceUpdateManyWithoutTemplateNestedInput
  }

  export type WebVMTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    memory?: StringFieldUpdateOperationsInput | string
    cpuCount?: IntFieldUpdateOperationsInput | number
    diskSize?: StringFieldUpdateOperationsInput | string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WebVMInstanceUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type WebVMTemplateCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    image: string
    memory?: string
    cpuCount?: number
    diskSize?: string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebVMTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    memory?: StringFieldUpdateOperationsInput | string
    cpuCount?: IntFieldUpdateOperationsInput | number
    diskSize?: StringFieldUpdateOperationsInput | string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    memory?: StringFieldUpdateOperationsInput | string
    cpuCount?: IntFieldUpdateOperationsInput | number
    diskSize?: StringFieldUpdateOperationsInput | string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMSnapshotCreateInput = {
    id?: string
    name: string
    description?: string | null
    size: bigint | number
    createdAt?: Date | string
    instance: WebVMInstanceCreateNestedOneWithoutSnapshotsInput
  }

  export type WebVMSnapshotUncheckedCreateInput = {
    id?: string
    instanceId: string
    name: string
    description?: string | null
    size: bigint | number
    createdAt?: Date | string
  }

  export type WebVMSnapshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instance?: WebVMInstanceUpdateOneRequiredWithoutSnapshotsNestedInput
  }

  export type WebVMSnapshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instanceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMSnapshotCreateManyInput = {
    id?: string
    instanceId: string
    name: string
    description?: string | null
    size: bigint | number
    createdAt?: Date | string
  }

  export type WebVMSnapshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMSnapshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instanceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspacePersistenceCreateInput = {
    id?: string
    storageSize?: bigint | number
    backupCount?: number
    lastBackup?: Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutPersistenceInput
  }

  export type WorkspacePersistenceUncheckedCreateInput = {
    id?: string
    workspaceId: string
    storageSize?: bigint | number
    backupCount?: number
    lastBackup?: Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspacePersistenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    storageSize?: BigIntFieldUpdateOperationsInput | bigint | number
    backupCount?: IntFieldUpdateOperationsInput | number
    lastBackup?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutPersistenceNestedInput
  }

  export type WorkspacePersistenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    storageSize?: BigIntFieldUpdateOperationsInput | bigint | number
    backupCount?: IntFieldUpdateOperationsInput | number
    lastBackup?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspacePersistenceCreateManyInput = {
    id?: string
    workspaceId: string
    storageSize?: bigint | number
    backupCount?: number
    lastBackup?: Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspacePersistenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    storageSize?: BigIntFieldUpdateOperationsInput | bigint | number
    backupCount?: IntFieldUpdateOperationsInput | number
    lastBackup?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspacePersistenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    storageSize?: BigIntFieldUpdateOperationsInput | bigint | number
    backupCount?: IntFieldUpdateOperationsInput | number
    lastBackup?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InfrastructureAlertCreateInput = {
    id?: string
    name: string
    query: string
    condition: string
    threshold: number
    duration: string
    severity?: $Enums.AlertSeverity
    state?: $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    firedAt?: Date | string | null
    resolvedAt?: Date | string | null
    notifications?: AlertNotificationCreateNestedManyWithoutAlertInput
  }

  export type InfrastructureAlertUncheckedCreateInput = {
    id?: string
    name: string
    query: string
    condition: string
    threshold: number
    duration: string
    severity?: $Enums.AlertSeverity
    state?: $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    firedAt?: Date | string | null
    resolvedAt?: Date | string | null
    notifications?: AlertNotificationUncheckedCreateNestedManyWithoutAlertInput
  }

  export type InfrastructureAlertUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    threshold?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    state?: EnumAlertStateFieldUpdateOperationsInput | $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: AlertNotificationUpdateManyWithoutAlertNestedInput
  }

  export type InfrastructureAlertUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    threshold?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    state?: EnumAlertStateFieldUpdateOperationsInput | $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: AlertNotificationUncheckedUpdateManyWithoutAlertNestedInput
  }

  export type InfrastructureAlertCreateManyInput = {
    id?: string
    name: string
    query: string
    condition: string
    threshold: number
    duration: string
    severity?: $Enums.AlertSeverity
    state?: $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    firedAt?: Date | string | null
    resolvedAt?: Date | string | null
  }

  export type InfrastructureAlertUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    threshold?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    state?: EnumAlertStateFieldUpdateOperationsInput | $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InfrastructureAlertUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    threshold?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    state?: EnumAlertStateFieldUpdateOperationsInput | $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertNotificationCreateInput = {
    id?: string
    type?: $Enums.NotificationType
    recipient: string
    message: string
    sentAt?: Date | string
    alert: InfrastructureAlertCreateNestedOneWithoutNotificationsInput
  }

  export type AlertNotificationUncheckedCreateInput = {
    id?: string
    alertId: string
    type?: $Enums.NotificationType
    recipient: string
    message: string
    sentAt?: Date | string
  }

  export type AlertNotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    recipient?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alert?: InfrastructureAlertUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type AlertNotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    alertId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    recipient?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertNotificationCreateManyInput = {
    id?: string
    alertId: string
    type?: $Enums.NotificationType
    recipient: string
    message: string
    sentAt?: Date | string
  }

  export type AlertNotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    recipient?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertNotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    alertId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    recipient?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceFileCreateInput = {
    id?: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutFilesInput
    parent?: WorkspaceFileCreateNestedOneWithoutChildrenInput
    children?: WorkspaceFileCreateNestedManyWithoutParentInput
    indexes?: FileIndexCreateNestedManyWithoutWorkspaceFileInput
  }

  export type WorkspaceFileUncheckedCreateInput = {
    id?: string
    workspaceId: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    parentId?: string | null
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
    children?: WorkspaceFileUncheckedCreateNestedManyWithoutParentInput
    indexes?: FileIndexUncheckedCreateNestedManyWithoutWorkspaceFileInput
  }

  export type WorkspaceFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutFilesNestedInput
    parent?: WorkspaceFileUpdateOneWithoutChildrenNestedInput
    children?: WorkspaceFileUpdateManyWithoutParentNestedInput
    indexes?: FileIndexUpdateManyWithoutWorkspaceFileNestedInput
  }

  export type WorkspaceFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: WorkspaceFileUncheckedUpdateManyWithoutParentNestedInput
    indexes?: FileIndexUncheckedUpdateManyWithoutWorkspaceFileNestedInput
  }

  export type WorkspaceFileCreateManyInput = {
    id?: string
    workspaceId: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    parentId?: string | null
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
  }

  export type WorkspaceFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileIndexCreateInput = {
    id?: string
    content: string
    tokens: JsonNullValueInput | InputJsonValue
    language: string
    symbols: JsonNullValueInput | InputJsonValue
    imports: JsonNullValueInput | InputJsonValue
    exports: JsonNullValueInput | InputJsonValue
    dependencies: JsonNullValueInput | InputJsonValue
    complexity: JsonNullValueInput | InputJsonValue
    lastIndexed?: Date | string
    indexVersion?: string
    workspaceFile: WorkspaceFileCreateNestedOneWithoutIndexesInput
  }

  export type FileIndexUncheckedCreateInput = {
    id?: string
    workspaceId: string
    path: string
    content: string
    tokens: JsonNullValueInput | InputJsonValue
    language: string
    symbols: JsonNullValueInput | InputJsonValue
    imports: JsonNullValueInput | InputJsonValue
    exports: JsonNullValueInput | InputJsonValue
    dependencies: JsonNullValueInput | InputJsonValue
    complexity: JsonNullValueInput | InputJsonValue
    lastIndexed?: Date | string
    indexVersion?: string
  }

  export type FileIndexUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    symbols?: JsonNullValueInput | InputJsonValue
    imports?: JsonNullValueInput | InputJsonValue
    exports?: JsonNullValueInput | InputJsonValue
    dependencies?: JsonNullValueInput | InputJsonValue
    complexity?: JsonNullValueInput | InputJsonValue
    lastIndexed?: DateTimeFieldUpdateOperationsInput | Date | string
    indexVersion?: StringFieldUpdateOperationsInput | string
    workspaceFile?: WorkspaceFileUpdateOneRequiredWithoutIndexesNestedInput
  }

  export type FileIndexUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    symbols?: JsonNullValueInput | InputJsonValue
    imports?: JsonNullValueInput | InputJsonValue
    exports?: JsonNullValueInput | InputJsonValue
    dependencies?: JsonNullValueInput | InputJsonValue
    complexity?: JsonNullValueInput | InputJsonValue
    lastIndexed?: DateTimeFieldUpdateOperationsInput | Date | string
    indexVersion?: StringFieldUpdateOperationsInput | string
  }

  export type FileIndexCreateManyInput = {
    id?: string
    workspaceId: string
    path: string
    content: string
    tokens: JsonNullValueInput | InputJsonValue
    language: string
    symbols: JsonNullValueInput | InputJsonValue
    imports: JsonNullValueInput | InputJsonValue
    exports: JsonNullValueInput | InputJsonValue
    dependencies: JsonNullValueInput | InputJsonValue
    complexity: JsonNullValueInput | InputJsonValue
    lastIndexed?: Date | string
    indexVersion?: string
  }

  export type FileIndexUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    symbols?: JsonNullValueInput | InputJsonValue
    imports?: JsonNullValueInput | InputJsonValue
    exports?: JsonNullValueInput | InputJsonValue
    dependencies?: JsonNullValueInput | InputJsonValue
    complexity?: JsonNullValueInput | InputJsonValue
    lastIndexed?: DateTimeFieldUpdateOperationsInput | Date | string
    indexVersion?: StringFieldUpdateOperationsInput | string
  }

  export type FileIndexUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    symbols?: JsonNullValueInput | InputJsonValue
    imports?: JsonNullValueInput | InputJsonValue
    exports?: JsonNullValueInput | InputJsonValue
    dependencies?: JsonNullValueInput | InputJsonValue
    complexity?: JsonNullValueInput | InputJsonValue
    lastIndexed?: DateTimeFieldUpdateOperationsInput | Date | string
    indexVersion?: StringFieldUpdateOperationsInput | string
  }

  export type WorkspaceStateCreateInput = {
    id?: string
    sessionId: string
    environment: JsonNullValueInput | InputJsonValue
    processes: JsonNullValueInput | InputJsonValue
    openFiles: JsonNullValueInput | InputJsonValue
    terminalSessions: JsonNullValueInput | InputJsonValue
    editorState: JsonNullValueInput | InputJsonValue
    gitState: JsonNullValueInput | InputJsonValue
    installedPackages: JsonNullValueInput | InputJsonValue
    customSettings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutStatesInput
  }

  export type WorkspaceStateUncheckedCreateInput = {
    id?: string
    workspaceId: string
    sessionId: string
    environment: JsonNullValueInput | InputJsonValue
    processes: JsonNullValueInput | InputJsonValue
    openFiles: JsonNullValueInput | InputJsonValue
    terminalSessions: JsonNullValueInput | InputJsonValue
    editorState: JsonNullValueInput | InputJsonValue
    gitState: JsonNullValueInput | InputJsonValue
    installedPackages: JsonNullValueInput | InputJsonValue
    customSettings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceStateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    environment?: JsonNullValueInput | InputJsonValue
    processes?: JsonNullValueInput | InputJsonValue
    openFiles?: JsonNullValueInput | InputJsonValue
    terminalSessions?: JsonNullValueInput | InputJsonValue
    editorState?: JsonNullValueInput | InputJsonValue
    gitState?: JsonNullValueInput | InputJsonValue
    installedPackages?: JsonNullValueInput | InputJsonValue
    customSettings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutStatesNestedInput
  }

  export type WorkspaceStateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    environment?: JsonNullValueInput | InputJsonValue
    processes?: JsonNullValueInput | InputJsonValue
    openFiles?: JsonNullValueInput | InputJsonValue
    terminalSessions?: JsonNullValueInput | InputJsonValue
    editorState?: JsonNullValueInput | InputJsonValue
    gitState?: JsonNullValueInput | InputJsonValue
    installedPackages?: JsonNullValueInput | InputJsonValue
    customSettings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceStateCreateManyInput = {
    id?: string
    workspaceId: string
    sessionId: string
    environment: JsonNullValueInput | InputJsonValue
    processes: JsonNullValueInput | InputJsonValue
    openFiles: JsonNullValueInput | InputJsonValue
    terminalSessions: JsonNullValueInput | InputJsonValue
    editorState: JsonNullValueInput | InputJsonValue
    gitState: JsonNullValueInput | InputJsonValue
    installedPackages: JsonNullValueInput | InputJsonValue
    customSettings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceStateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    environment?: JsonNullValueInput | InputJsonValue
    processes?: JsonNullValueInput | InputJsonValue
    openFiles?: JsonNullValueInput | InputJsonValue
    terminalSessions?: JsonNullValueInput | InputJsonValue
    editorState?: JsonNullValueInput | InputJsonValue
    gitState?: JsonNullValueInput | InputJsonValue
    installedPackages?: JsonNullValueInput | InputJsonValue
    customSettings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceStateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    environment?: JsonNullValueInput | InputJsonValue
    processes?: JsonNullValueInput | InputJsonValue
    openFiles?: JsonNullValueInput | InputJsonValue
    terminalSessions?: JsonNullValueInput | InputJsonValue
    editorState?: JsonNullValueInput | InputJsonValue
    gitState?: JsonNullValueInput | InputJsonValue
    installedPackages?: JsonNullValueInput | InputJsonValue
    customSettings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceSyncCreateInput = {
    id?: string
    type?: $Enums.SyncType
    status?: $Enums.SyncStatus
    direction: string
    source: JsonNullValueInput | InputJsonValue
    target: JsonNullValueInput | InputJsonValue
    progress: JsonNullValueInput | InputJsonValue
    conflicts: JsonNullValueInput | InputJsonValue
    lastSync?: Date | string | null
    nextSync?: Date | string | null
    settings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutSyncsInput
  }

  export type WorkspaceSyncUncheckedCreateInput = {
    id?: string
    workspaceId: string
    type?: $Enums.SyncType
    status?: $Enums.SyncStatus
    direction: string
    source: JsonNullValueInput | InputJsonValue
    target: JsonNullValueInput | InputJsonValue
    progress: JsonNullValueInput | InputJsonValue
    conflicts: JsonNullValueInput | InputJsonValue
    lastSync?: Date | string | null
    nextSync?: Date | string | null
    settings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceSyncUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncTypeFieldUpdateOperationsInput | $Enums.SyncType
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    direction?: StringFieldUpdateOperationsInput | string
    source?: JsonNullValueInput | InputJsonValue
    target?: JsonNullValueInput | InputJsonValue
    progress?: JsonNullValueInput | InputJsonValue
    conflicts?: JsonNullValueInput | InputJsonValue
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutSyncsNestedInput
  }

  export type WorkspaceSyncUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncTypeFieldUpdateOperationsInput | $Enums.SyncType
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    direction?: StringFieldUpdateOperationsInput | string
    source?: JsonNullValueInput | InputJsonValue
    target?: JsonNullValueInput | InputJsonValue
    progress?: JsonNullValueInput | InputJsonValue
    conflicts?: JsonNullValueInput | InputJsonValue
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceSyncCreateManyInput = {
    id?: string
    workspaceId: string
    type?: $Enums.SyncType
    status?: $Enums.SyncStatus
    direction: string
    source: JsonNullValueInput | InputJsonValue
    target: JsonNullValueInput | InputJsonValue
    progress: JsonNullValueInput | InputJsonValue
    conflicts: JsonNullValueInput | InputJsonValue
    lastSync?: Date | string | null
    nextSync?: Date | string | null
    settings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceSyncUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncTypeFieldUpdateOperationsInput | $Enums.SyncType
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    direction?: StringFieldUpdateOperationsInput | string
    source?: JsonNullValueInput | InputJsonValue
    target?: JsonNullValueInput | InputJsonValue
    progress?: JsonNullValueInput | InputJsonValue
    conflicts?: JsonNullValueInput | InputJsonValue
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceSyncUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncTypeFieldUpdateOperationsInput | $Enums.SyncType
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    direction?: StringFieldUpdateOperationsInput | string
    source?: JsonNullValueInput | InputJsonValue
    target?: JsonNullValueInput | InputJsonValue
    progress?: JsonNullValueInput | InputJsonValue
    conflicts?: JsonNullValueInput | InputJsonValue
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type OrganizationMemberListRelationFilter = {
    every?: OrganizationMemberWhereInput
    some?: OrganizationMemberWhereInput
    none?: OrganizationMemberWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type UserPreferenceNullableScalarRelationFilter = {
    is?: UserPreferenceWhereInput | null
    isNot?: UserPreferenceWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountOrderByRelevanceInput = {
    fields: AccountOrderByRelevanceFieldEnum | AccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenOrderByRelevanceInput = {
    fields: VerificationTokenOrderByRelevanceFieldEnum | VerificationTokenOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type UserPreferenceOrderByRelevanceInput = {
    fields: UserPreferenceOrderByRelevanceFieldEnum | UserPreferenceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type OrganizationInvitationListRelationFilter = {
    every?: OrganizationInvitationWhereInput
    some?: OrganizationInvitationWhereInput
    none?: OrganizationInvitationWhereInput
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationInvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationOrderByRelevanceInput = {
    fields: OrganizationOrderByRelevanceFieldEnum | OrganizationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumMemberRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberRole | EnumMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MemberRole[] | ListEnumMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberRole[] | ListEnumMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberRoleFilter<$PrismaModel> | $Enums.MemberRole
  }

  export type OrganizationScalarRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type OrganizationMemberOrderByRelevanceInput = {
    fields: OrganizationMemberOrderByRelevanceFieldEnum | OrganizationMemberOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrganizationMemberOrganizationIdUserIdCompoundUniqueInput = {
    organizationId: string
    userId: string
  }

  export type OrganizationMemberCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMemberMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumMemberRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberRole | EnumMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MemberRole[] | ListEnumMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberRole[] | ListEnumMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberRoleWithAggregatesFilter<$PrismaModel> | $Enums.MemberRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMemberRoleFilter<$PrismaModel>
    _max?: NestedEnumMemberRoleFilter<$PrismaModel>
  }

  export type OrganizationInvitationOrderByRelevanceInput = {
    fields: OrganizationInvitationOrderByRelevanceFieldEnum | OrganizationInvitationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrganizationInvitationCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type OrganizationInvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type OrganizationInvitationMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkspaceListRelationFilter = {
    every?: WorkspaceWhereInput
    some?: WorkspaceWhereInput
    none?: WorkspaceWhereInput
  }

  export type WorkspaceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelevanceInput = {
    fields: ProjectOrderByRelevanceFieldEnum | ProjectOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type EnumTaskPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPriority | EnumTaskPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPriorityFilter<$PrismaModel> | $Enums.TaskPriority
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TaskOrderByRelevanceInput = {
    fields: TaskOrderByRelevanceFieldEnum | TaskOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    projectId?: SortOrder
    assigneeId?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    projectId?: SortOrder
    assigneeId?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    projectId?: SortOrder
    assigneeId?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type EnumTaskPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPriority | EnumTaskPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPriorityWithAggregatesFilter<$PrismaModel> | $Enums.TaskPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskPriorityFilter<$PrismaModel>
    _max?: NestedEnumTaskPriorityFilter<$PrismaModel>
  }

  export type EnumWorkspaceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceStatus | EnumWorkspaceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceStatus[] | ListEnumWorkspaceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceStatus[] | ListEnumWorkspaceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceStatusFilter<$PrismaModel> | $Enums.WorkspaceStatus
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type WebVMInstanceListRelationFilter = {
    every?: WebVMInstanceWhereInput
    some?: WebVMInstanceWhereInput
    none?: WebVMInstanceWhereInput
  }

  export type WorkspacePersistenceNullableScalarRelationFilter = {
    is?: WorkspacePersistenceWhereInput | null
    isNot?: WorkspacePersistenceWhereInput | null
  }

  export type WorkspaceFileListRelationFilter = {
    every?: WorkspaceFileWhereInput
    some?: WorkspaceFileWhereInput
    none?: WorkspaceFileWhereInput
  }

  export type WorkspaceStateListRelationFilter = {
    every?: WorkspaceStateWhereInput
    some?: WorkspaceStateWhereInput
    none?: WorkspaceStateWhereInput
  }

  export type WorkspaceSyncListRelationFilter = {
    every?: WorkspaceSyncWhereInput
    some?: WorkspaceSyncWhereInput
    none?: WorkspaceSyncWhereInput
  }

  export type WebVMInstanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceStateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceSyncOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceOrderByRelevanceInput = {
    fields: WorkspaceOrderByRelevanceFieldEnum | WorkspaceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WorkspaceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    projectId?: SortOrder
    status?: SortOrder
    config?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    projectId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    projectId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumWorkspaceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceStatus | EnumWorkspaceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceStatus[] | ListEnumWorkspaceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceStatus[] | ListEnumWorkspaceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkspaceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkspaceStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkspaceStatusFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumWebVMStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WebVMStatus | EnumWebVMStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WebVMStatus[] | ListEnumWebVMStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WebVMStatus[] | ListEnumWebVMStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWebVMStatusFilter<$PrismaModel> | $Enums.WebVMStatus
  }

  export type WorkspaceScalarRelationFilter = {
    is?: WorkspaceWhereInput
    isNot?: WorkspaceWhereInput
  }

  export type WebVMMetricListRelationFilter = {
    every?: WebVMMetricWhereInput
    some?: WebVMMetricWhereInput
    none?: WebVMMetricWhereInput
  }

  export type WebVMSnapshotListRelationFilter = {
    every?: WebVMSnapshotWhereInput
    some?: WebVMSnapshotWhereInput
    none?: WebVMSnapshotWhereInput
  }

  export type WebVMTemplateNullableScalarRelationFilter = {
    is?: WebVMTemplateWhereInput | null
    isNot?: WebVMTemplateWhereInput | null
  }

  export type WebVMMetricOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebVMSnapshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebVMInstanceOrderByRelevanceInput = {
    fields: WebVMInstanceOrderByRelevanceFieldEnum | WebVMInstanceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WebVMInstanceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    workspaceId?: SortOrder
    status?: SortOrder
    imageUrl?: SortOrder
    config?: SortOrder
    resources?: SortOrder
    networkConfig?: SortOrder
    connectionUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startedAt?: SortOrder
    stoppedAt?: SortOrder
    templateId?: SortOrder
  }

  export type WebVMInstanceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    workspaceId?: SortOrder
    status?: SortOrder
    imageUrl?: SortOrder
    connectionUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startedAt?: SortOrder
    stoppedAt?: SortOrder
    templateId?: SortOrder
  }

  export type WebVMInstanceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    workspaceId?: SortOrder
    status?: SortOrder
    imageUrl?: SortOrder
    connectionUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startedAt?: SortOrder
    stoppedAt?: SortOrder
    templateId?: SortOrder
  }

  export type EnumWebVMStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WebVMStatus | EnumWebVMStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WebVMStatus[] | ListEnumWebVMStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WebVMStatus[] | ListEnumWebVMStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWebVMStatusWithAggregatesFilter<$PrismaModel> | $Enums.WebVMStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWebVMStatusFilter<$PrismaModel>
    _max?: NestedEnumWebVMStatusFilter<$PrismaModel>
  }

  export type EnumMetricTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MetricType | EnumMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMetricTypeFilter<$PrismaModel> | $Enums.MetricType
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type WebVMInstanceScalarRelationFilter = {
    is?: WebVMInstanceWhereInput
    isNot?: WebVMInstanceWhereInput
  }

  export type WebVMMetricOrderByRelevanceInput = {
    fields: WebVMMetricOrderByRelevanceFieldEnum | WebVMMetricOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WebVMMetricCountOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    metricType?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    timestamp?: SortOrder
  }

  export type WebVMMetricAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type WebVMMetricMaxOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    metricType?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    timestamp?: SortOrder
  }

  export type WebVMMetricMinOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    metricType?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    timestamp?: SortOrder
  }

  export type WebVMMetricSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type EnumMetricTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetricType | EnumMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMetricTypeWithAggregatesFilter<$PrismaModel> | $Enums.MetricType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetricTypeFilter<$PrismaModel>
    _max?: NestedEnumMetricTypeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StorageObjectListRelationFilter = {
    every?: StorageObjectWhereInput
    some?: StorageObjectWhereInput
    none?: StorageObjectWhereInput
  }

  export type StorageUsageListRelationFilter = {
    every?: StorageUsageWhereInput
    some?: StorageUsageWhereInput
    none?: StorageUsageWhereInput
  }

  export type StorageObjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StorageUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StorageBucketOrderByRelevanceInput = {
    fields: StorageBucketOrderByRelevanceFieldEnum | StorageBucketOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StorageBucketCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrder
    versioning?: SortOrder
    encryption?: SortOrder
    size?: SortOrder
    objectCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageBucketAvgOrderByAggregateInput = {
    size?: SortOrder
    objectCount?: SortOrder
  }

  export type StorageBucketMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrder
    versioning?: SortOrder
    encryption?: SortOrder
    size?: SortOrder
    objectCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageBucketMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrder
    versioning?: SortOrder
    encryption?: SortOrder
    size?: SortOrder
    objectCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageBucketSumOrderByAggregateInput = {
    size?: SortOrder
    objectCount?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StorageBucketScalarRelationFilter = {
    is?: StorageBucketWhereInput
    isNot?: StorageBucketWhereInput
  }

  export type StorageObjectOrderByRelevanceInput = {
    fields: StorageObjectOrderByRelevanceFieldEnum | StorageObjectOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StorageObjectBucketIdKeyCompoundUniqueInput = {
    bucketId: string
    key: string
  }

  export type StorageObjectCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    bucketId?: SortOrder
    size?: SortOrder
    contentType?: SortOrder
    etag?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageObjectAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type StorageObjectMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    bucketId?: SortOrder
    size?: SortOrder
    contentType?: SortOrder
    etag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageObjectMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    bucketId?: SortOrder
    size?: SortOrder
    contentType?: SortOrder
    etag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StorageObjectSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type StorageUsageOrderByRelevanceInput = {
    fields: StorageUsageOrderByRelevanceFieldEnum | StorageUsageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StorageUsageCountOrderByAggregateInput = {
    id?: SortOrder
    bucketId?: SortOrder
    totalSize?: SortOrder
    objectCount?: SortOrder
    quota?: SortOrder
    timestamp?: SortOrder
  }

  export type StorageUsageAvgOrderByAggregateInput = {
    totalSize?: SortOrder
    objectCount?: SortOrder
    quota?: SortOrder
  }

  export type StorageUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    bucketId?: SortOrder
    totalSize?: SortOrder
    objectCount?: SortOrder
    quota?: SortOrder
    timestamp?: SortOrder
  }

  export type StorageUsageMinOrderByAggregateInput = {
    id?: SortOrder
    bucketId?: SortOrder
    totalSize?: SortOrder
    objectCount?: SortOrder
    quota?: SortOrder
    timestamp?: SortOrder
  }

  export type StorageUsageSumOrderByAggregateInput = {
    totalSize?: SortOrder
    objectCount?: SortOrder
    quota?: SortOrder
  }

  export type EnumContainerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContainerStatus | EnumContainerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContainerStatus[] | ListEnumContainerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContainerStatus[] | ListEnumContainerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContainerStatusFilter<$PrismaModel> | $Enums.ContainerStatus
  }

  export type ContainerStatsListRelationFilter = {
    every?: ContainerStatsWhereInput
    some?: ContainerStatsWhereInput
    none?: ContainerStatsWhereInput
  }

  export type ContainerLogListRelationFilter = {
    every?: ContainerLogWhereInput
    some?: ContainerLogWhereInput
    none?: ContainerLogWhereInput
  }

  export type ContainerStatsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContainerLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContainerOrderByRelevanceInput = {
    fields: ContainerOrderByRelevanceFieldEnum | ContainerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ContainerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    status?: SortOrder
    command?: SortOrder
    environment?: SortOrder
    ports?: SortOrder
    volumes?: SortOrder
    labels?: SortOrder
    restartPolicy?: SortOrder
    networkMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startedAt?: SortOrder
    stoppedAt?: SortOrder
  }

  export type ContainerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    status?: SortOrder
    restartPolicy?: SortOrder
    networkMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startedAt?: SortOrder
    stoppedAt?: SortOrder
  }

  export type ContainerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    status?: SortOrder
    restartPolicy?: SortOrder
    networkMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startedAt?: SortOrder
    stoppedAt?: SortOrder
  }

  export type EnumContainerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContainerStatus | EnumContainerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContainerStatus[] | ListEnumContainerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContainerStatus[] | ListEnumContainerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContainerStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContainerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContainerStatusFilter<$PrismaModel>
    _max?: NestedEnumContainerStatusFilter<$PrismaModel>
  }

  export type ContainerScalarRelationFilter = {
    is?: ContainerWhereInput
    isNot?: ContainerWhereInput
  }

  export type ContainerStatsOrderByRelevanceInput = {
    fields: ContainerStatsOrderByRelevanceFieldEnum | ContainerStatsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ContainerStatsCountOrderByAggregateInput = {
    id?: SortOrder
    containerId?: SortOrder
    cpuPercent?: SortOrder
    memoryUsage?: SortOrder
    memoryLimit?: SortOrder
    networkRx?: SortOrder
    networkTx?: SortOrder
    blockRead?: SortOrder
    blockWrite?: SortOrder
    timestamp?: SortOrder
  }

  export type ContainerStatsAvgOrderByAggregateInput = {
    cpuPercent?: SortOrder
    memoryUsage?: SortOrder
    memoryLimit?: SortOrder
    networkRx?: SortOrder
    networkTx?: SortOrder
    blockRead?: SortOrder
    blockWrite?: SortOrder
  }

  export type ContainerStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    containerId?: SortOrder
    cpuPercent?: SortOrder
    memoryUsage?: SortOrder
    memoryLimit?: SortOrder
    networkRx?: SortOrder
    networkTx?: SortOrder
    blockRead?: SortOrder
    blockWrite?: SortOrder
    timestamp?: SortOrder
  }

  export type ContainerStatsMinOrderByAggregateInput = {
    id?: SortOrder
    containerId?: SortOrder
    cpuPercent?: SortOrder
    memoryUsage?: SortOrder
    memoryLimit?: SortOrder
    networkRx?: SortOrder
    networkTx?: SortOrder
    blockRead?: SortOrder
    blockWrite?: SortOrder
    timestamp?: SortOrder
  }

  export type ContainerStatsSumOrderByAggregateInput = {
    cpuPercent?: SortOrder
    memoryUsage?: SortOrder
    memoryLimit?: SortOrder
    networkRx?: SortOrder
    networkTx?: SortOrder
    blockRead?: SortOrder
    blockWrite?: SortOrder
  }

  export type EnumLogLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLogLevelFilter<$PrismaModel> | $Enums.LogLevel
  }

  export type ContainerLogOrderByRelevanceInput = {
    fields: ContainerLogOrderByRelevanceFieldEnum | ContainerLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ContainerLogCountOrderByAggregateInput = {
    id?: SortOrder
    containerId?: SortOrder
    message?: SortOrder
    level?: SortOrder
    timestamp?: SortOrder
  }

  export type ContainerLogMaxOrderByAggregateInput = {
    id?: SortOrder
    containerId?: SortOrder
    message?: SortOrder
    level?: SortOrder
    timestamp?: SortOrder
  }

  export type ContainerLogMinOrderByAggregateInput = {
    id?: SortOrder
    containerId?: SortOrder
    message?: SortOrder
    level?: SortOrder
    timestamp?: SortOrder
  }

  export type EnumLogLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLogLevelWithAggregatesFilter<$PrismaModel> | $Enums.LogLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogLevelFilter<$PrismaModel>
    _max?: NestedEnumLogLevelFilter<$PrismaModel>
  }

  export type EnumHealthStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HealthStatus | EnumHealthStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HealthStatus[] | ListEnumHealthStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HealthStatus[] | ListEnumHealthStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHealthStatusFilter<$PrismaModel> | $Enums.HealthStatus
  }

  export type ServiceHealthOrderByRelevanceInput = {
    fields: ServiceHealthOrderByRelevanceFieldEnum | ServiceHealthOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ServiceHealthCountOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    status?: SortOrder
    responseTime?: SortOrder
    error?: SortOrder
    details?: SortOrder
    lastCheck?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceHealthAvgOrderByAggregateInput = {
    responseTime?: SortOrder
  }

  export type ServiceHealthMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    status?: SortOrder
    responseTime?: SortOrder
    error?: SortOrder
    lastCheck?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceHealthMinOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    status?: SortOrder
    responseTime?: SortOrder
    error?: SortOrder
    lastCheck?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceHealthSumOrderByAggregateInput = {
    responseTime?: SortOrder
  }

  export type EnumHealthStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HealthStatus | EnumHealthStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HealthStatus[] | ListEnumHealthStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HealthStatus[] | ListEnumHealthStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHealthStatusWithAggregatesFilter<$PrismaModel> | $Enums.HealthStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHealthStatusFilter<$PrismaModel>
    _max?: NestedEnumHealthStatusFilter<$PrismaModel>
  }

  export type InfrastructureMetricOrderByRelevanceInput = {
    fields: InfrastructureMetricOrderByRelevanceFieldEnum | InfrastructureMetricOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InfrastructureMetricCountOrderByAggregateInput = {
    id?: SortOrder
    service?: SortOrder
    metricName?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    labels?: SortOrder
    timestamp?: SortOrder
  }

  export type InfrastructureMetricAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type InfrastructureMetricMaxOrderByAggregateInput = {
    id?: SortOrder
    service?: SortOrder
    metricName?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    timestamp?: SortOrder
  }

  export type InfrastructureMetricMinOrderByAggregateInput = {
    id?: SortOrder
    service?: SortOrder
    metricName?: SortOrder
    value?: SortOrder
    unit?: SortOrder
    timestamp?: SortOrder
  }

  export type InfrastructureMetricSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type AuditLogOrderByRelevanceInput = {
    fields: AuditLogOrderByRelevanceFieldEnum | AuditLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type WebVMTemplateOrderByRelevanceInput = {
    fields: WebVMTemplateOrderByRelevanceFieldEnum | WebVMTemplateOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WebVMTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    memory?: SortOrder
    cpuCount?: SortOrder
    diskSize?: SortOrder
    preInstalledSoftware?: SortOrder
    category?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebVMTemplateAvgOrderByAggregateInput = {
    cpuCount?: SortOrder
  }

  export type WebVMTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    memory?: SortOrder
    cpuCount?: SortOrder
    diskSize?: SortOrder
    category?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebVMTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    memory?: SortOrder
    cpuCount?: SortOrder
    diskSize?: SortOrder
    category?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebVMTemplateSumOrderByAggregateInput = {
    cpuCount?: SortOrder
  }

  export type WebVMSnapshotOrderByRelevanceInput = {
    fields: WebVMSnapshotOrderByRelevanceFieldEnum | WebVMSnapshotOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WebVMSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
  }

  export type WebVMSnapshotAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type WebVMSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
  }

  export type WebVMSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    instanceId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
  }

  export type WebVMSnapshotSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type WorkspacePersistenceOrderByRelevanceInput = {
    fields: WorkspacePersistenceOrderByRelevanceFieldEnum | WorkspacePersistenceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WorkspacePersistenceCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    storageSize?: SortOrder
    backupCount?: SortOrder
    lastBackup?: SortOrder
    config?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspacePersistenceAvgOrderByAggregateInput = {
    storageSize?: SortOrder
    backupCount?: SortOrder
  }

  export type WorkspacePersistenceMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    storageSize?: SortOrder
    backupCount?: SortOrder
    lastBackup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspacePersistenceMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    storageSize?: SortOrder
    backupCount?: SortOrder
    lastBackup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspacePersistenceSumOrderByAggregateInput = {
    storageSize?: SortOrder
    backupCount?: SortOrder
  }

  export type EnumAlertSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityFilter<$PrismaModel> | $Enums.AlertSeverity
  }

  export type EnumAlertStateFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertState | EnumAlertStateFieldRefInput<$PrismaModel>
    in?: $Enums.AlertState[] | ListEnumAlertStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertState[] | ListEnumAlertStateFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStateFilter<$PrismaModel> | $Enums.AlertState
  }

  export type AlertNotificationListRelationFilter = {
    every?: AlertNotificationWhereInput
    some?: AlertNotificationWhereInput
    none?: AlertNotificationWhereInput
  }

  export type AlertNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InfrastructureAlertOrderByRelevanceInput = {
    fields: InfrastructureAlertOrderByRelevanceFieldEnum | InfrastructureAlertOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InfrastructureAlertCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    query?: SortOrder
    condition?: SortOrder
    threshold?: SortOrder
    duration?: SortOrder
    severity?: SortOrder
    state?: SortOrder
    labels?: SortOrder
    annotations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firedAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type InfrastructureAlertAvgOrderByAggregateInput = {
    threshold?: SortOrder
  }

  export type InfrastructureAlertMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    query?: SortOrder
    condition?: SortOrder
    threshold?: SortOrder
    duration?: SortOrder
    severity?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firedAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type InfrastructureAlertMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    query?: SortOrder
    condition?: SortOrder
    threshold?: SortOrder
    duration?: SortOrder
    severity?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firedAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type InfrastructureAlertSumOrderByAggregateInput = {
    threshold?: SortOrder
  }

  export type EnumAlertSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel> | $Enums.AlertSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertSeverityFilter<$PrismaModel>
    _max?: NestedEnumAlertSeverityFilter<$PrismaModel>
  }

  export type EnumAlertStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertState | EnumAlertStateFieldRefInput<$PrismaModel>
    in?: $Enums.AlertState[] | ListEnumAlertStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertState[] | ListEnumAlertStateFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStateWithAggregatesFilter<$PrismaModel> | $Enums.AlertState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertStateFilter<$PrismaModel>
    _max?: NestedEnumAlertStateFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type InfrastructureAlertScalarRelationFilter = {
    is?: InfrastructureAlertWhereInput
    isNot?: InfrastructureAlertWhereInput
  }

  export type AlertNotificationOrderByRelevanceInput = {
    fields: AlertNotificationOrderByRelevanceFieldEnum | AlertNotificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AlertNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    alertId?: SortOrder
    type?: SortOrder
    recipient?: SortOrder
    message?: SortOrder
    sentAt?: SortOrder
  }

  export type AlertNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    alertId?: SortOrder
    type?: SortOrder
    recipient?: SortOrder
    message?: SortOrder
    sentAt?: SortOrder
  }

  export type AlertNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    alertId?: SortOrder
    type?: SortOrder
    recipient?: SortOrder
    message?: SortOrder
    sentAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type WorkspaceFileNullableScalarRelationFilter = {
    is?: WorkspaceFileWhereInput | null
    isNot?: WorkspaceFileWhereInput | null
  }

  export type FileIndexListRelationFilter = {
    every?: FileIndexWhereInput
    some?: FileIndexWhereInput
    none?: FileIndexWhereInput
  }

  export type FileIndexOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceFileOrderByRelevanceInput = {
    fields: WorkspaceFileOrderByRelevanceFieldEnum | WorkspaceFileOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WorkspaceFileWorkspaceIdPathCompoundUniqueInput = {
    workspaceId: string
    path: string
  }

  export type WorkspaceFileCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    path?: SortOrder
    name?: SortOrder
    type?: SortOrder
    size?: SortOrder
    mimeType?: SortOrder
    encoding?: SortOrder
    content?: SortOrder
    hash?: SortOrder
    parentId?: SortOrder
    isDirectory?: SortOrder
    permissions?: SortOrder
    metadata?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastAccessedAt?: SortOrder
  }

  export type WorkspaceFileAvgOrderByAggregateInput = {
    size?: SortOrder
    version?: SortOrder
  }

  export type WorkspaceFileMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    path?: SortOrder
    name?: SortOrder
    type?: SortOrder
    size?: SortOrder
    mimeType?: SortOrder
    encoding?: SortOrder
    content?: SortOrder
    hash?: SortOrder
    parentId?: SortOrder
    isDirectory?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastAccessedAt?: SortOrder
  }

  export type WorkspaceFileMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    path?: SortOrder
    name?: SortOrder
    type?: SortOrder
    size?: SortOrder
    mimeType?: SortOrder
    encoding?: SortOrder
    content?: SortOrder
    hash?: SortOrder
    parentId?: SortOrder
    isDirectory?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastAccessedAt?: SortOrder
  }

  export type WorkspaceFileSumOrderByAggregateInput = {
    size?: SortOrder
    version?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type WorkspaceFileScalarRelationFilter = {
    is?: WorkspaceFileWhereInput
    isNot?: WorkspaceFileWhereInput
  }

  export type FileIndexOrderByRelevanceInput = {
    fields: FileIndexOrderByRelevanceFieldEnum | FileIndexOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FileIndexWorkspaceIdPathCompoundUniqueInput = {
    workspaceId: string
    path: string
  }

  export type FileIndexCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    path?: SortOrder
    content?: SortOrder
    tokens?: SortOrder
    language?: SortOrder
    symbols?: SortOrder
    imports?: SortOrder
    exports?: SortOrder
    dependencies?: SortOrder
    complexity?: SortOrder
    lastIndexed?: SortOrder
    indexVersion?: SortOrder
  }

  export type FileIndexMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    path?: SortOrder
    content?: SortOrder
    language?: SortOrder
    lastIndexed?: SortOrder
    indexVersion?: SortOrder
  }

  export type FileIndexMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    path?: SortOrder
    content?: SortOrder
    language?: SortOrder
    lastIndexed?: SortOrder
    indexVersion?: SortOrder
  }

  export type WorkspaceStateOrderByRelevanceInput = {
    fields: WorkspaceStateOrderByRelevanceFieldEnum | WorkspaceStateOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WorkspaceStateWorkspaceIdSessionIdCompoundUniqueInput = {
    workspaceId: string
    sessionId: string
  }

  export type WorkspaceStateCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    sessionId?: SortOrder
    environment?: SortOrder
    processes?: SortOrder
    openFiles?: SortOrder
    terminalSessions?: SortOrder
    editorState?: SortOrder
    gitState?: SortOrder
    installedPackages?: SortOrder
    customSettings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceStateMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceStateMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSyncTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncType | EnumSyncTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SyncType[] | ListEnumSyncTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncType[] | ListEnumSyncTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncTypeFilter<$PrismaModel> | $Enums.SyncType
  }

  export type EnumSyncStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncStatusFilter<$PrismaModel> | $Enums.SyncStatus
  }

  export type WorkspaceSyncOrderByRelevanceInput = {
    fields: WorkspaceSyncOrderByRelevanceFieldEnum | WorkspaceSyncOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WorkspaceSyncCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    direction?: SortOrder
    source?: SortOrder
    target?: SortOrder
    progress?: SortOrder
    conflicts?: SortOrder
    lastSync?: SortOrder
    nextSync?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceSyncMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    direction?: SortOrder
    lastSync?: SortOrder
    nextSync?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceSyncMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    direction?: SortOrder
    lastSync?: SortOrder
    nextSync?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSyncTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncType | EnumSyncTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SyncType[] | ListEnumSyncTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncType[] | ListEnumSyncTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncTypeWithAggregatesFilter<$PrismaModel> | $Enums.SyncType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncTypeFilter<$PrismaModel>
    _max?: NestedEnumSyncTypeFilter<$PrismaModel>
  }

  export type EnumSyncStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncStatusWithAggregatesFilter<$PrismaModel> | $Enums.SyncStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncStatusFilter<$PrismaModel>
    _max?: NestedEnumSyncStatusFilter<$PrismaModel>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type OrganizationMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<OrganizationMemberCreateWithoutUserInput, OrganizationMemberUncheckedCreateWithoutUserInput> | OrganizationMemberCreateWithoutUserInput[] | OrganizationMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrganizationMemberCreateOrConnectWithoutUserInput | OrganizationMemberCreateOrConnectWithoutUserInput[]
    createMany?: OrganizationMemberCreateManyUserInputEnvelope
    connect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type UserPreferenceCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput
    connect?: UserPreferenceWhereUniqueInput
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type OrganizationMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrganizationMemberCreateWithoutUserInput, OrganizationMemberUncheckedCreateWithoutUserInput> | OrganizationMemberCreateWithoutUserInput[] | OrganizationMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrganizationMemberCreateOrConnectWithoutUserInput | OrganizationMemberCreateOrConnectWithoutUserInput[]
    createMany?: OrganizationMemberCreateManyUserInputEnvelope
    connect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type UserPreferenceUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput
    connect?: UserPreferenceWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type OrganizationMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrganizationMemberCreateWithoutUserInput, OrganizationMemberUncheckedCreateWithoutUserInput> | OrganizationMemberCreateWithoutUserInput[] | OrganizationMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrganizationMemberCreateOrConnectWithoutUserInput | OrganizationMemberCreateOrConnectWithoutUserInput[]
    upsert?: OrganizationMemberUpsertWithWhereUniqueWithoutUserInput | OrganizationMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrganizationMemberCreateManyUserInputEnvelope
    set?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    disconnect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    delete?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    connect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    update?: OrganizationMemberUpdateWithWhereUniqueWithoutUserInput | OrganizationMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrganizationMemberUpdateManyWithWhereWithoutUserInput | OrganizationMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrganizationMemberScalarWhereInput | OrganizationMemberScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssigneeInput | TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssigneeInput | TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssigneeInput | TaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserPreferenceUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput
    upsert?: UserPreferenceUpsertWithoutUserInput
    disconnect?: UserPreferenceWhereInput | boolean
    delete?: UserPreferenceWhereInput | boolean
    connect?: UserPreferenceWhereUniqueInput
    update?: XOR<XOR<UserPreferenceUpdateToOneWithWhereWithoutUserInput, UserPreferenceUpdateWithoutUserInput>, UserPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type OrganizationMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrganizationMemberCreateWithoutUserInput, OrganizationMemberUncheckedCreateWithoutUserInput> | OrganizationMemberCreateWithoutUserInput[] | OrganizationMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrganizationMemberCreateOrConnectWithoutUserInput | OrganizationMemberCreateOrConnectWithoutUserInput[]
    upsert?: OrganizationMemberUpsertWithWhereUniqueWithoutUserInput | OrganizationMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrganizationMemberCreateManyUserInputEnvelope
    set?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    disconnect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    delete?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    connect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    update?: OrganizationMemberUpdateWithWhereUniqueWithoutUserInput | OrganizationMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrganizationMemberUpdateManyWithWhereWithoutUserInput | OrganizationMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrganizationMemberScalarWhereInput | OrganizationMemberScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssigneeInput | TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssigneeInput | TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssigneeInput | TaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserPreferenceUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput
    upsert?: UserPreferenceUpsertWithoutUserInput
    disconnect?: UserPreferenceWhereInput | boolean
    delete?: UserPreferenceWhereInput | boolean
    connect?: UserPreferenceWhereUniqueInput
    update?: XOR<XOR<UserPreferenceUpdateToOneWithWhereWithoutUserInput, UserPreferenceUpdateWithoutUserInput>, UserPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    upsert?: UserUpsertWithoutPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPreferencesInput, UserUpdateWithoutPreferencesInput>, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type OrganizationMemberCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<OrganizationMemberCreateWithoutOrganizationInput, OrganizationMemberUncheckedCreateWithoutOrganizationInput> | OrganizationMemberCreateWithoutOrganizationInput[] | OrganizationMemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationMemberCreateOrConnectWithoutOrganizationInput | OrganizationMemberCreateOrConnectWithoutOrganizationInput[]
    createMany?: OrganizationMemberCreateManyOrganizationInputEnvelope
    connect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type OrganizationInvitationCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<OrganizationInvitationCreateWithoutOrganizationInput, OrganizationInvitationUncheckedCreateWithoutOrganizationInput> | OrganizationInvitationCreateWithoutOrganizationInput[] | OrganizationInvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationInvitationCreateOrConnectWithoutOrganizationInput | OrganizationInvitationCreateOrConnectWithoutOrganizationInput[]
    createMany?: OrganizationInvitationCreateManyOrganizationInputEnvelope
    connect?: OrganizationInvitationWhereUniqueInput | OrganizationInvitationWhereUniqueInput[]
  }

  export type OrganizationMemberUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<OrganizationMemberCreateWithoutOrganizationInput, OrganizationMemberUncheckedCreateWithoutOrganizationInput> | OrganizationMemberCreateWithoutOrganizationInput[] | OrganizationMemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationMemberCreateOrConnectWithoutOrganizationInput | OrganizationMemberCreateOrConnectWithoutOrganizationInput[]
    createMany?: OrganizationMemberCreateManyOrganizationInputEnvelope
    connect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type OrganizationInvitationUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<OrganizationInvitationCreateWithoutOrganizationInput, OrganizationInvitationUncheckedCreateWithoutOrganizationInput> | OrganizationInvitationCreateWithoutOrganizationInput[] | OrganizationInvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationInvitationCreateOrConnectWithoutOrganizationInput | OrganizationInvitationCreateOrConnectWithoutOrganizationInput[]
    createMany?: OrganizationInvitationCreateManyOrganizationInputEnvelope
    connect?: OrganizationInvitationWhereUniqueInput | OrganizationInvitationWhereUniqueInput[]
  }

  export type OrganizationMemberUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<OrganizationMemberCreateWithoutOrganizationInput, OrganizationMemberUncheckedCreateWithoutOrganizationInput> | OrganizationMemberCreateWithoutOrganizationInput[] | OrganizationMemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationMemberCreateOrConnectWithoutOrganizationInput | OrganizationMemberCreateOrConnectWithoutOrganizationInput[]
    upsert?: OrganizationMemberUpsertWithWhereUniqueWithoutOrganizationInput | OrganizationMemberUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: OrganizationMemberCreateManyOrganizationInputEnvelope
    set?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    disconnect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    delete?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    connect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    update?: OrganizationMemberUpdateWithWhereUniqueWithoutOrganizationInput | OrganizationMemberUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: OrganizationMemberUpdateManyWithWhereWithoutOrganizationInput | OrganizationMemberUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: OrganizationMemberScalarWhereInput | OrganizationMemberScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutOrganizationInput | ProjectUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutOrganizationInput | ProjectUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutOrganizationInput | ProjectUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type OrganizationInvitationUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<OrganizationInvitationCreateWithoutOrganizationInput, OrganizationInvitationUncheckedCreateWithoutOrganizationInput> | OrganizationInvitationCreateWithoutOrganizationInput[] | OrganizationInvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationInvitationCreateOrConnectWithoutOrganizationInput | OrganizationInvitationCreateOrConnectWithoutOrganizationInput[]
    upsert?: OrganizationInvitationUpsertWithWhereUniqueWithoutOrganizationInput | OrganizationInvitationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: OrganizationInvitationCreateManyOrganizationInputEnvelope
    set?: OrganizationInvitationWhereUniqueInput | OrganizationInvitationWhereUniqueInput[]
    disconnect?: OrganizationInvitationWhereUniqueInput | OrganizationInvitationWhereUniqueInput[]
    delete?: OrganizationInvitationWhereUniqueInput | OrganizationInvitationWhereUniqueInput[]
    connect?: OrganizationInvitationWhereUniqueInput | OrganizationInvitationWhereUniqueInput[]
    update?: OrganizationInvitationUpdateWithWhereUniqueWithoutOrganizationInput | OrganizationInvitationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: OrganizationInvitationUpdateManyWithWhereWithoutOrganizationInput | OrganizationInvitationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: OrganizationInvitationScalarWhereInput | OrganizationInvitationScalarWhereInput[]
  }

  export type OrganizationMemberUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<OrganizationMemberCreateWithoutOrganizationInput, OrganizationMemberUncheckedCreateWithoutOrganizationInput> | OrganizationMemberCreateWithoutOrganizationInput[] | OrganizationMemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationMemberCreateOrConnectWithoutOrganizationInput | OrganizationMemberCreateOrConnectWithoutOrganizationInput[]
    upsert?: OrganizationMemberUpsertWithWhereUniqueWithoutOrganizationInput | OrganizationMemberUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: OrganizationMemberCreateManyOrganizationInputEnvelope
    set?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    disconnect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    delete?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    connect?: OrganizationMemberWhereUniqueInput | OrganizationMemberWhereUniqueInput[]
    update?: OrganizationMemberUpdateWithWhereUniqueWithoutOrganizationInput | OrganizationMemberUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: OrganizationMemberUpdateManyWithWhereWithoutOrganizationInput | OrganizationMemberUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: OrganizationMemberScalarWhereInput | OrganizationMemberScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutOrganizationInput | ProjectUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutOrganizationInput | ProjectUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutOrganizationInput | ProjectUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type OrganizationInvitationUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<OrganizationInvitationCreateWithoutOrganizationInput, OrganizationInvitationUncheckedCreateWithoutOrganizationInput> | OrganizationInvitationCreateWithoutOrganizationInput[] | OrganizationInvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrganizationInvitationCreateOrConnectWithoutOrganizationInput | OrganizationInvitationCreateOrConnectWithoutOrganizationInput[]
    upsert?: OrganizationInvitationUpsertWithWhereUniqueWithoutOrganizationInput | OrganizationInvitationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: OrganizationInvitationCreateManyOrganizationInputEnvelope
    set?: OrganizationInvitationWhereUniqueInput | OrganizationInvitationWhereUniqueInput[]
    disconnect?: OrganizationInvitationWhereUniqueInput | OrganizationInvitationWhereUniqueInput[]
    delete?: OrganizationInvitationWhereUniqueInput | OrganizationInvitationWhereUniqueInput[]
    connect?: OrganizationInvitationWhereUniqueInput | OrganizationInvitationWhereUniqueInput[]
    update?: OrganizationInvitationUpdateWithWhereUniqueWithoutOrganizationInput | OrganizationInvitationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: OrganizationInvitationUpdateManyWithWhereWithoutOrganizationInput | OrganizationInvitationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: OrganizationInvitationScalarWhereInput | OrganizationInvitationScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutMembersInput = {
    create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrganizationsInput = {
    create?: XOR<UserCreateWithoutOrganizationsInput, UserUncheckedCreateWithoutOrganizationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumMemberRoleFieldUpdateOperationsInput = {
    set?: $Enums.MemberRole
  }

  export type OrganizationUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
    upsert?: OrganizationUpsertWithoutMembersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutMembersInput, OrganizationUpdateWithoutMembersInput>, OrganizationUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutOrganizationsNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationsInput, UserUncheckedCreateWithoutOrganizationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationsInput
    upsert?: UserUpsertWithoutOrganizationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrganizationsInput, UserUpdateWithoutOrganizationsInput>, UserUncheckedUpdateWithoutOrganizationsInput>
  }

  export type OrganizationCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvitationsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvitationsInput
    upsert?: OrganizationUpsertWithoutInvitationsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutInvitationsInput, OrganizationUpdateWithoutInvitationsInput>, OrganizationUncheckedUpdateWithoutInvitationsInput>
  }

  export type OrganizationCreateNestedOneWithoutProjectsInput = {
    create?: XOR<OrganizationCreateWithoutProjectsInput, OrganizationUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutProjectsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type WorkspaceCreateNestedManyWithoutProjectInput = {
    create?: XOR<WorkspaceCreateWithoutProjectInput, WorkspaceUncheckedCreateWithoutProjectInput> | WorkspaceCreateWithoutProjectInput[] | WorkspaceUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: WorkspaceCreateOrConnectWithoutProjectInput | WorkspaceCreateOrConnectWithoutProjectInput[]
    createMany?: WorkspaceCreateManyProjectInputEnvelope
    connect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type WorkspaceUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<WorkspaceCreateWithoutProjectInput, WorkspaceUncheckedCreateWithoutProjectInput> | WorkspaceCreateWithoutProjectInput[] | WorkspaceUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: WorkspaceCreateOrConnectWithoutProjectInput | WorkspaceCreateOrConnectWithoutProjectInput[]
    createMany?: WorkspaceCreateManyProjectInputEnvelope
    connect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<OrganizationCreateWithoutProjectsInput, OrganizationUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutProjectsInput
    upsert?: OrganizationUpsertWithoutProjectsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutProjectsInput, OrganizationUpdateWithoutProjectsInput>, OrganizationUncheckedUpdateWithoutProjectsInput>
  }

  export type TaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type WorkspaceUpdateManyWithoutProjectNestedInput = {
    create?: XOR<WorkspaceCreateWithoutProjectInput, WorkspaceUncheckedCreateWithoutProjectInput> | WorkspaceCreateWithoutProjectInput[] | WorkspaceUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: WorkspaceCreateOrConnectWithoutProjectInput | WorkspaceCreateOrConnectWithoutProjectInput[]
    upsert?: WorkspaceUpsertWithWhereUniqueWithoutProjectInput | WorkspaceUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: WorkspaceCreateManyProjectInputEnvelope
    set?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    disconnect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    delete?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    connect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    update?: WorkspaceUpdateWithWhereUniqueWithoutProjectInput | WorkspaceUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: WorkspaceUpdateManyWithWhereWithoutProjectInput | WorkspaceUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: WorkspaceScalarWhereInput | WorkspaceScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type WorkspaceUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<WorkspaceCreateWithoutProjectInput, WorkspaceUncheckedCreateWithoutProjectInput> | WorkspaceCreateWithoutProjectInput[] | WorkspaceUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: WorkspaceCreateOrConnectWithoutProjectInput | WorkspaceCreateOrConnectWithoutProjectInput[]
    upsert?: WorkspaceUpsertWithWhereUniqueWithoutProjectInput | WorkspaceUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: WorkspaceCreateManyProjectInputEnvelope
    set?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    disconnect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    delete?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    connect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    update?: WorkspaceUpdateWithWhereUniqueWithoutProjectInput | WorkspaceUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: WorkspaceUpdateManyWithWhereWithoutProjectInput | WorkspaceUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: WorkspaceScalarWhereInput | WorkspaceScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutTasksInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedTasksInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type EnumTaskPriorityFieldUpdateOperationsInput = {
    set?: $Enums.TaskPriority
  }

  export type ProjectUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    upsert?: ProjectUpsertWithoutTasksInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTasksInput, ProjectUpdateWithoutTasksInput>, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type UserUpdateOneWithoutAssignedTasksNestedInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    upsert?: UserUpsertWithoutAssignedTasksInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedTasksInput, UserUpdateWithoutAssignedTasksInput>, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type ProjectCreateNestedOneWithoutWorkspacesInput = {
    create?: XOR<ProjectCreateWithoutWorkspacesInput, ProjectUncheckedCreateWithoutWorkspacesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutWorkspacesInput
    connect?: ProjectWhereUniqueInput
  }

  export type WebVMInstanceCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WebVMInstanceCreateWithoutWorkspaceInput, WebVMInstanceUncheckedCreateWithoutWorkspaceInput> | WebVMInstanceCreateWithoutWorkspaceInput[] | WebVMInstanceUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutWorkspaceInput | WebVMInstanceCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WebVMInstanceCreateManyWorkspaceInputEnvelope
    connect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
  }

  export type WorkspacePersistenceCreateNestedOneWithoutWorkspaceInput = {
    create?: XOR<WorkspacePersistenceCreateWithoutWorkspaceInput, WorkspacePersistenceUncheckedCreateWithoutWorkspaceInput>
    connectOrCreate?: WorkspacePersistenceCreateOrConnectWithoutWorkspaceInput
    connect?: WorkspacePersistenceWhereUniqueInput
  }

  export type WorkspaceFileCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceFileCreateWithoutWorkspaceInput, WorkspaceFileUncheckedCreateWithoutWorkspaceInput> | WorkspaceFileCreateWithoutWorkspaceInput[] | WorkspaceFileUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutWorkspaceInput | WorkspaceFileCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceFileCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
  }

  export type WorkspaceStateCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceStateCreateWithoutWorkspaceInput, WorkspaceStateUncheckedCreateWithoutWorkspaceInput> | WorkspaceStateCreateWithoutWorkspaceInput[] | WorkspaceStateUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceStateCreateOrConnectWithoutWorkspaceInput | WorkspaceStateCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceStateCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceStateWhereUniqueInput | WorkspaceStateWhereUniqueInput[]
  }

  export type WorkspaceSyncCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceSyncCreateWithoutWorkspaceInput, WorkspaceSyncUncheckedCreateWithoutWorkspaceInput> | WorkspaceSyncCreateWithoutWorkspaceInput[] | WorkspaceSyncUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceSyncCreateOrConnectWithoutWorkspaceInput | WorkspaceSyncCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceSyncCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceSyncWhereUniqueInput | WorkspaceSyncWhereUniqueInput[]
  }

  export type WebVMInstanceUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WebVMInstanceCreateWithoutWorkspaceInput, WebVMInstanceUncheckedCreateWithoutWorkspaceInput> | WebVMInstanceCreateWithoutWorkspaceInput[] | WebVMInstanceUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutWorkspaceInput | WebVMInstanceCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WebVMInstanceCreateManyWorkspaceInputEnvelope
    connect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
  }

  export type WorkspacePersistenceUncheckedCreateNestedOneWithoutWorkspaceInput = {
    create?: XOR<WorkspacePersistenceCreateWithoutWorkspaceInput, WorkspacePersistenceUncheckedCreateWithoutWorkspaceInput>
    connectOrCreate?: WorkspacePersistenceCreateOrConnectWithoutWorkspaceInput
    connect?: WorkspacePersistenceWhereUniqueInput
  }

  export type WorkspaceFileUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceFileCreateWithoutWorkspaceInput, WorkspaceFileUncheckedCreateWithoutWorkspaceInput> | WorkspaceFileCreateWithoutWorkspaceInput[] | WorkspaceFileUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutWorkspaceInput | WorkspaceFileCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceFileCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
  }

  export type WorkspaceStateUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceStateCreateWithoutWorkspaceInput, WorkspaceStateUncheckedCreateWithoutWorkspaceInput> | WorkspaceStateCreateWithoutWorkspaceInput[] | WorkspaceStateUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceStateCreateOrConnectWithoutWorkspaceInput | WorkspaceStateCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceStateCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceStateWhereUniqueInput | WorkspaceStateWhereUniqueInput[]
  }

  export type WorkspaceSyncUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceSyncCreateWithoutWorkspaceInput, WorkspaceSyncUncheckedCreateWithoutWorkspaceInput> | WorkspaceSyncCreateWithoutWorkspaceInput[] | WorkspaceSyncUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceSyncCreateOrConnectWithoutWorkspaceInput | WorkspaceSyncCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceSyncCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceSyncWhereUniqueInput | WorkspaceSyncWhereUniqueInput[]
  }

  export type EnumWorkspaceStatusFieldUpdateOperationsInput = {
    set?: $Enums.WorkspaceStatus
  }

  export type ProjectUpdateOneRequiredWithoutWorkspacesNestedInput = {
    create?: XOR<ProjectCreateWithoutWorkspacesInput, ProjectUncheckedCreateWithoutWorkspacesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutWorkspacesInput
    upsert?: ProjectUpsertWithoutWorkspacesInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutWorkspacesInput, ProjectUpdateWithoutWorkspacesInput>, ProjectUncheckedUpdateWithoutWorkspacesInput>
  }

  export type WebVMInstanceUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WebVMInstanceCreateWithoutWorkspaceInput, WebVMInstanceUncheckedCreateWithoutWorkspaceInput> | WebVMInstanceCreateWithoutWorkspaceInput[] | WebVMInstanceUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutWorkspaceInput | WebVMInstanceCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WebVMInstanceUpsertWithWhereUniqueWithoutWorkspaceInput | WebVMInstanceUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WebVMInstanceCreateManyWorkspaceInputEnvelope
    set?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    disconnect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    delete?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    connect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    update?: WebVMInstanceUpdateWithWhereUniqueWithoutWorkspaceInput | WebVMInstanceUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WebVMInstanceUpdateManyWithWhereWithoutWorkspaceInput | WebVMInstanceUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WebVMInstanceScalarWhereInput | WebVMInstanceScalarWhereInput[]
  }

  export type WorkspacePersistenceUpdateOneWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspacePersistenceCreateWithoutWorkspaceInput, WorkspacePersistenceUncheckedCreateWithoutWorkspaceInput>
    connectOrCreate?: WorkspacePersistenceCreateOrConnectWithoutWorkspaceInput
    upsert?: WorkspacePersistenceUpsertWithoutWorkspaceInput
    disconnect?: WorkspacePersistenceWhereInput | boolean
    delete?: WorkspacePersistenceWhereInput | boolean
    connect?: WorkspacePersistenceWhereUniqueInput
    update?: XOR<XOR<WorkspacePersistenceUpdateToOneWithWhereWithoutWorkspaceInput, WorkspacePersistenceUpdateWithoutWorkspaceInput>, WorkspacePersistenceUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WorkspaceFileUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceFileCreateWithoutWorkspaceInput, WorkspaceFileUncheckedCreateWithoutWorkspaceInput> | WorkspaceFileCreateWithoutWorkspaceInput[] | WorkspaceFileUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutWorkspaceInput | WorkspaceFileCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceFileUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceFileUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceFileCreateManyWorkspaceInputEnvelope
    set?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    disconnect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    delete?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    connect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    update?: WorkspaceFileUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceFileUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceFileUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceFileUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceFileScalarWhereInput | WorkspaceFileScalarWhereInput[]
  }

  export type WorkspaceStateUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceStateCreateWithoutWorkspaceInput, WorkspaceStateUncheckedCreateWithoutWorkspaceInput> | WorkspaceStateCreateWithoutWorkspaceInput[] | WorkspaceStateUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceStateCreateOrConnectWithoutWorkspaceInput | WorkspaceStateCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceStateUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceStateUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceStateCreateManyWorkspaceInputEnvelope
    set?: WorkspaceStateWhereUniqueInput | WorkspaceStateWhereUniqueInput[]
    disconnect?: WorkspaceStateWhereUniqueInput | WorkspaceStateWhereUniqueInput[]
    delete?: WorkspaceStateWhereUniqueInput | WorkspaceStateWhereUniqueInput[]
    connect?: WorkspaceStateWhereUniqueInput | WorkspaceStateWhereUniqueInput[]
    update?: WorkspaceStateUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceStateUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceStateUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceStateUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceStateScalarWhereInput | WorkspaceStateScalarWhereInput[]
  }

  export type WorkspaceSyncUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceSyncCreateWithoutWorkspaceInput, WorkspaceSyncUncheckedCreateWithoutWorkspaceInput> | WorkspaceSyncCreateWithoutWorkspaceInput[] | WorkspaceSyncUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceSyncCreateOrConnectWithoutWorkspaceInput | WorkspaceSyncCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceSyncUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceSyncUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceSyncCreateManyWorkspaceInputEnvelope
    set?: WorkspaceSyncWhereUniqueInput | WorkspaceSyncWhereUniqueInput[]
    disconnect?: WorkspaceSyncWhereUniqueInput | WorkspaceSyncWhereUniqueInput[]
    delete?: WorkspaceSyncWhereUniqueInput | WorkspaceSyncWhereUniqueInput[]
    connect?: WorkspaceSyncWhereUniqueInput | WorkspaceSyncWhereUniqueInput[]
    update?: WorkspaceSyncUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceSyncUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceSyncUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceSyncUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceSyncScalarWhereInput | WorkspaceSyncScalarWhereInput[]
  }

  export type WebVMInstanceUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WebVMInstanceCreateWithoutWorkspaceInput, WebVMInstanceUncheckedCreateWithoutWorkspaceInput> | WebVMInstanceCreateWithoutWorkspaceInput[] | WebVMInstanceUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutWorkspaceInput | WebVMInstanceCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WebVMInstanceUpsertWithWhereUniqueWithoutWorkspaceInput | WebVMInstanceUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WebVMInstanceCreateManyWorkspaceInputEnvelope
    set?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    disconnect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    delete?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    connect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    update?: WebVMInstanceUpdateWithWhereUniqueWithoutWorkspaceInput | WebVMInstanceUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WebVMInstanceUpdateManyWithWhereWithoutWorkspaceInput | WebVMInstanceUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WebVMInstanceScalarWhereInput | WebVMInstanceScalarWhereInput[]
  }

  export type WorkspacePersistenceUncheckedUpdateOneWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspacePersistenceCreateWithoutWorkspaceInput, WorkspacePersistenceUncheckedCreateWithoutWorkspaceInput>
    connectOrCreate?: WorkspacePersistenceCreateOrConnectWithoutWorkspaceInput
    upsert?: WorkspacePersistenceUpsertWithoutWorkspaceInput
    disconnect?: WorkspacePersistenceWhereInput | boolean
    delete?: WorkspacePersistenceWhereInput | boolean
    connect?: WorkspacePersistenceWhereUniqueInput
    update?: XOR<XOR<WorkspacePersistenceUpdateToOneWithWhereWithoutWorkspaceInput, WorkspacePersistenceUpdateWithoutWorkspaceInput>, WorkspacePersistenceUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WorkspaceFileUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceFileCreateWithoutWorkspaceInput, WorkspaceFileUncheckedCreateWithoutWorkspaceInput> | WorkspaceFileCreateWithoutWorkspaceInput[] | WorkspaceFileUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutWorkspaceInput | WorkspaceFileCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceFileUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceFileUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceFileCreateManyWorkspaceInputEnvelope
    set?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    disconnect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    delete?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    connect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    update?: WorkspaceFileUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceFileUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceFileUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceFileUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceFileScalarWhereInput | WorkspaceFileScalarWhereInput[]
  }

  export type WorkspaceStateUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceStateCreateWithoutWorkspaceInput, WorkspaceStateUncheckedCreateWithoutWorkspaceInput> | WorkspaceStateCreateWithoutWorkspaceInput[] | WorkspaceStateUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceStateCreateOrConnectWithoutWorkspaceInput | WorkspaceStateCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceStateUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceStateUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceStateCreateManyWorkspaceInputEnvelope
    set?: WorkspaceStateWhereUniqueInput | WorkspaceStateWhereUniqueInput[]
    disconnect?: WorkspaceStateWhereUniqueInput | WorkspaceStateWhereUniqueInput[]
    delete?: WorkspaceStateWhereUniqueInput | WorkspaceStateWhereUniqueInput[]
    connect?: WorkspaceStateWhereUniqueInput | WorkspaceStateWhereUniqueInput[]
    update?: WorkspaceStateUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceStateUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceStateUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceStateUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceStateScalarWhereInput | WorkspaceStateScalarWhereInput[]
  }

  export type WorkspaceSyncUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceSyncCreateWithoutWorkspaceInput, WorkspaceSyncUncheckedCreateWithoutWorkspaceInput> | WorkspaceSyncCreateWithoutWorkspaceInput[] | WorkspaceSyncUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceSyncCreateOrConnectWithoutWorkspaceInput | WorkspaceSyncCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceSyncUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceSyncUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceSyncCreateManyWorkspaceInputEnvelope
    set?: WorkspaceSyncWhereUniqueInput | WorkspaceSyncWhereUniqueInput[]
    disconnect?: WorkspaceSyncWhereUniqueInput | WorkspaceSyncWhereUniqueInput[]
    delete?: WorkspaceSyncWhereUniqueInput | WorkspaceSyncWhereUniqueInput[]
    connect?: WorkspaceSyncWhereUniqueInput | WorkspaceSyncWhereUniqueInput[]
    update?: WorkspaceSyncUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceSyncUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceSyncUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceSyncUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceSyncScalarWhereInput | WorkspaceSyncScalarWhereInput[]
  }

  export type WorkspaceCreateNestedOneWithoutInstancesInput = {
    create?: XOR<WorkspaceCreateWithoutInstancesInput, WorkspaceUncheckedCreateWithoutInstancesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutInstancesInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type WebVMMetricCreateNestedManyWithoutInstanceInput = {
    create?: XOR<WebVMMetricCreateWithoutInstanceInput, WebVMMetricUncheckedCreateWithoutInstanceInput> | WebVMMetricCreateWithoutInstanceInput[] | WebVMMetricUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WebVMMetricCreateOrConnectWithoutInstanceInput | WebVMMetricCreateOrConnectWithoutInstanceInput[]
    createMany?: WebVMMetricCreateManyInstanceInputEnvelope
    connect?: WebVMMetricWhereUniqueInput | WebVMMetricWhereUniqueInput[]
  }

  export type WebVMSnapshotCreateNestedManyWithoutInstanceInput = {
    create?: XOR<WebVMSnapshotCreateWithoutInstanceInput, WebVMSnapshotUncheckedCreateWithoutInstanceInput> | WebVMSnapshotCreateWithoutInstanceInput[] | WebVMSnapshotUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WebVMSnapshotCreateOrConnectWithoutInstanceInput | WebVMSnapshotCreateOrConnectWithoutInstanceInput[]
    createMany?: WebVMSnapshotCreateManyInstanceInputEnvelope
    connect?: WebVMSnapshotWhereUniqueInput | WebVMSnapshotWhereUniqueInput[]
  }

  export type WebVMTemplateCreateNestedOneWithoutInstancesInput = {
    create?: XOR<WebVMTemplateCreateWithoutInstancesInput, WebVMTemplateUncheckedCreateWithoutInstancesInput>
    connectOrCreate?: WebVMTemplateCreateOrConnectWithoutInstancesInput
    connect?: WebVMTemplateWhereUniqueInput
  }

  export type WebVMMetricUncheckedCreateNestedManyWithoutInstanceInput = {
    create?: XOR<WebVMMetricCreateWithoutInstanceInput, WebVMMetricUncheckedCreateWithoutInstanceInput> | WebVMMetricCreateWithoutInstanceInput[] | WebVMMetricUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WebVMMetricCreateOrConnectWithoutInstanceInput | WebVMMetricCreateOrConnectWithoutInstanceInput[]
    createMany?: WebVMMetricCreateManyInstanceInputEnvelope
    connect?: WebVMMetricWhereUniqueInput | WebVMMetricWhereUniqueInput[]
  }

  export type WebVMSnapshotUncheckedCreateNestedManyWithoutInstanceInput = {
    create?: XOR<WebVMSnapshotCreateWithoutInstanceInput, WebVMSnapshotUncheckedCreateWithoutInstanceInput> | WebVMSnapshotCreateWithoutInstanceInput[] | WebVMSnapshotUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WebVMSnapshotCreateOrConnectWithoutInstanceInput | WebVMSnapshotCreateOrConnectWithoutInstanceInput[]
    createMany?: WebVMSnapshotCreateManyInstanceInputEnvelope
    connect?: WebVMSnapshotWhereUniqueInput | WebVMSnapshotWhereUniqueInput[]
  }

  export type EnumWebVMStatusFieldUpdateOperationsInput = {
    set?: $Enums.WebVMStatus
  }

  export type WorkspaceUpdateOneRequiredWithoutInstancesNestedInput = {
    create?: XOR<WorkspaceCreateWithoutInstancesInput, WorkspaceUncheckedCreateWithoutInstancesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutInstancesInput
    upsert?: WorkspaceUpsertWithoutInstancesInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutInstancesInput, WorkspaceUpdateWithoutInstancesInput>, WorkspaceUncheckedUpdateWithoutInstancesInput>
  }

  export type WebVMMetricUpdateManyWithoutInstanceNestedInput = {
    create?: XOR<WebVMMetricCreateWithoutInstanceInput, WebVMMetricUncheckedCreateWithoutInstanceInput> | WebVMMetricCreateWithoutInstanceInput[] | WebVMMetricUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WebVMMetricCreateOrConnectWithoutInstanceInput | WebVMMetricCreateOrConnectWithoutInstanceInput[]
    upsert?: WebVMMetricUpsertWithWhereUniqueWithoutInstanceInput | WebVMMetricUpsertWithWhereUniqueWithoutInstanceInput[]
    createMany?: WebVMMetricCreateManyInstanceInputEnvelope
    set?: WebVMMetricWhereUniqueInput | WebVMMetricWhereUniqueInput[]
    disconnect?: WebVMMetricWhereUniqueInput | WebVMMetricWhereUniqueInput[]
    delete?: WebVMMetricWhereUniqueInput | WebVMMetricWhereUniqueInput[]
    connect?: WebVMMetricWhereUniqueInput | WebVMMetricWhereUniqueInput[]
    update?: WebVMMetricUpdateWithWhereUniqueWithoutInstanceInput | WebVMMetricUpdateWithWhereUniqueWithoutInstanceInput[]
    updateMany?: WebVMMetricUpdateManyWithWhereWithoutInstanceInput | WebVMMetricUpdateManyWithWhereWithoutInstanceInput[]
    deleteMany?: WebVMMetricScalarWhereInput | WebVMMetricScalarWhereInput[]
  }

  export type WebVMSnapshotUpdateManyWithoutInstanceNestedInput = {
    create?: XOR<WebVMSnapshotCreateWithoutInstanceInput, WebVMSnapshotUncheckedCreateWithoutInstanceInput> | WebVMSnapshotCreateWithoutInstanceInput[] | WebVMSnapshotUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WebVMSnapshotCreateOrConnectWithoutInstanceInput | WebVMSnapshotCreateOrConnectWithoutInstanceInput[]
    upsert?: WebVMSnapshotUpsertWithWhereUniqueWithoutInstanceInput | WebVMSnapshotUpsertWithWhereUniqueWithoutInstanceInput[]
    createMany?: WebVMSnapshotCreateManyInstanceInputEnvelope
    set?: WebVMSnapshotWhereUniqueInput | WebVMSnapshotWhereUniqueInput[]
    disconnect?: WebVMSnapshotWhereUniqueInput | WebVMSnapshotWhereUniqueInput[]
    delete?: WebVMSnapshotWhereUniqueInput | WebVMSnapshotWhereUniqueInput[]
    connect?: WebVMSnapshotWhereUniqueInput | WebVMSnapshotWhereUniqueInput[]
    update?: WebVMSnapshotUpdateWithWhereUniqueWithoutInstanceInput | WebVMSnapshotUpdateWithWhereUniqueWithoutInstanceInput[]
    updateMany?: WebVMSnapshotUpdateManyWithWhereWithoutInstanceInput | WebVMSnapshotUpdateManyWithWhereWithoutInstanceInput[]
    deleteMany?: WebVMSnapshotScalarWhereInput | WebVMSnapshotScalarWhereInput[]
  }

  export type WebVMTemplateUpdateOneWithoutInstancesNestedInput = {
    create?: XOR<WebVMTemplateCreateWithoutInstancesInput, WebVMTemplateUncheckedCreateWithoutInstancesInput>
    connectOrCreate?: WebVMTemplateCreateOrConnectWithoutInstancesInput
    upsert?: WebVMTemplateUpsertWithoutInstancesInput
    disconnect?: WebVMTemplateWhereInput | boolean
    delete?: WebVMTemplateWhereInput | boolean
    connect?: WebVMTemplateWhereUniqueInput
    update?: XOR<XOR<WebVMTemplateUpdateToOneWithWhereWithoutInstancesInput, WebVMTemplateUpdateWithoutInstancesInput>, WebVMTemplateUncheckedUpdateWithoutInstancesInput>
  }

  export type WebVMMetricUncheckedUpdateManyWithoutInstanceNestedInput = {
    create?: XOR<WebVMMetricCreateWithoutInstanceInput, WebVMMetricUncheckedCreateWithoutInstanceInput> | WebVMMetricCreateWithoutInstanceInput[] | WebVMMetricUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WebVMMetricCreateOrConnectWithoutInstanceInput | WebVMMetricCreateOrConnectWithoutInstanceInput[]
    upsert?: WebVMMetricUpsertWithWhereUniqueWithoutInstanceInput | WebVMMetricUpsertWithWhereUniqueWithoutInstanceInput[]
    createMany?: WebVMMetricCreateManyInstanceInputEnvelope
    set?: WebVMMetricWhereUniqueInput | WebVMMetricWhereUniqueInput[]
    disconnect?: WebVMMetricWhereUniqueInput | WebVMMetricWhereUniqueInput[]
    delete?: WebVMMetricWhereUniqueInput | WebVMMetricWhereUniqueInput[]
    connect?: WebVMMetricWhereUniqueInput | WebVMMetricWhereUniqueInput[]
    update?: WebVMMetricUpdateWithWhereUniqueWithoutInstanceInput | WebVMMetricUpdateWithWhereUniqueWithoutInstanceInput[]
    updateMany?: WebVMMetricUpdateManyWithWhereWithoutInstanceInput | WebVMMetricUpdateManyWithWhereWithoutInstanceInput[]
    deleteMany?: WebVMMetricScalarWhereInput | WebVMMetricScalarWhereInput[]
  }

  export type WebVMSnapshotUncheckedUpdateManyWithoutInstanceNestedInput = {
    create?: XOR<WebVMSnapshotCreateWithoutInstanceInput, WebVMSnapshotUncheckedCreateWithoutInstanceInput> | WebVMSnapshotCreateWithoutInstanceInput[] | WebVMSnapshotUncheckedCreateWithoutInstanceInput[]
    connectOrCreate?: WebVMSnapshotCreateOrConnectWithoutInstanceInput | WebVMSnapshotCreateOrConnectWithoutInstanceInput[]
    upsert?: WebVMSnapshotUpsertWithWhereUniqueWithoutInstanceInput | WebVMSnapshotUpsertWithWhereUniqueWithoutInstanceInput[]
    createMany?: WebVMSnapshotCreateManyInstanceInputEnvelope
    set?: WebVMSnapshotWhereUniqueInput | WebVMSnapshotWhereUniqueInput[]
    disconnect?: WebVMSnapshotWhereUniqueInput | WebVMSnapshotWhereUniqueInput[]
    delete?: WebVMSnapshotWhereUniqueInput | WebVMSnapshotWhereUniqueInput[]
    connect?: WebVMSnapshotWhereUniqueInput | WebVMSnapshotWhereUniqueInput[]
    update?: WebVMSnapshotUpdateWithWhereUniqueWithoutInstanceInput | WebVMSnapshotUpdateWithWhereUniqueWithoutInstanceInput[]
    updateMany?: WebVMSnapshotUpdateManyWithWhereWithoutInstanceInput | WebVMSnapshotUpdateManyWithWhereWithoutInstanceInput[]
    deleteMany?: WebVMSnapshotScalarWhereInput | WebVMSnapshotScalarWhereInput[]
  }

  export type WebVMInstanceCreateNestedOneWithoutMetricsInput = {
    create?: XOR<WebVMInstanceCreateWithoutMetricsInput, WebVMInstanceUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutMetricsInput
    connect?: WebVMInstanceWhereUniqueInput
  }

  export type EnumMetricTypeFieldUpdateOperationsInput = {
    set?: $Enums.MetricType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WebVMInstanceUpdateOneRequiredWithoutMetricsNestedInput = {
    create?: XOR<WebVMInstanceCreateWithoutMetricsInput, WebVMInstanceUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutMetricsInput
    upsert?: WebVMInstanceUpsertWithoutMetricsInput
    connect?: WebVMInstanceWhereUniqueInput
    update?: XOR<XOR<WebVMInstanceUpdateToOneWithWhereWithoutMetricsInput, WebVMInstanceUpdateWithoutMetricsInput>, WebVMInstanceUncheckedUpdateWithoutMetricsInput>
  }

  export type StorageObjectCreateNestedManyWithoutBucketInput = {
    create?: XOR<StorageObjectCreateWithoutBucketInput, StorageObjectUncheckedCreateWithoutBucketInput> | StorageObjectCreateWithoutBucketInput[] | StorageObjectUncheckedCreateWithoutBucketInput[]
    connectOrCreate?: StorageObjectCreateOrConnectWithoutBucketInput | StorageObjectCreateOrConnectWithoutBucketInput[]
    createMany?: StorageObjectCreateManyBucketInputEnvelope
    connect?: StorageObjectWhereUniqueInput | StorageObjectWhereUniqueInput[]
  }

  export type StorageUsageCreateNestedManyWithoutBucketInput = {
    create?: XOR<StorageUsageCreateWithoutBucketInput, StorageUsageUncheckedCreateWithoutBucketInput> | StorageUsageCreateWithoutBucketInput[] | StorageUsageUncheckedCreateWithoutBucketInput[]
    connectOrCreate?: StorageUsageCreateOrConnectWithoutBucketInput | StorageUsageCreateOrConnectWithoutBucketInput[]
    createMany?: StorageUsageCreateManyBucketInputEnvelope
    connect?: StorageUsageWhereUniqueInput | StorageUsageWhereUniqueInput[]
  }

  export type StorageObjectUncheckedCreateNestedManyWithoutBucketInput = {
    create?: XOR<StorageObjectCreateWithoutBucketInput, StorageObjectUncheckedCreateWithoutBucketInput> | StorageObjectCreateWithoutBucketInput[] | StorageObjectUncheckedCreateWithoutBucketInput[]
    connectOrCreate?: StorageObjectCreateOrConnectWithoutBucketInput | StorageObjectCreateOrConnectWithoutBucketInput[]
    createMany?: StorageObjectCreateManyBucketInputEnvelope
    connect?: StorageObjectWhereUniqueInput | StorageObjectWhereUniqueInput[]
  }

  export type StorageUsageUncheckedCreateNestedManyWithoutBucketInput = {
    create?: XOR<StorageUsageCreateWithoutBucketInput, StorageUsageUncheckedCreateWithoutBucketInput> | StorageUsageCreateWithoutBucketInput[] | StorageUsageUncheckedCreateWithoutBucketInput[]
    connectOrCreate?: StorageUsageCreateOrConnectWithoutBucketInput | StorageUsageCreateOrConnectWithoutBucketInput[]
    createMany?: StorageUsageCreateManyBucketInputEnvelope
    connect?: StorageUsageWhereUniqueInput | StorageUsageWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StorageObjectUpdateManyWithoutBucketNestedInput = {
    create?: XOR<StorageObjectCreateWithoutBucketInput, StorageObjectUncheckedCreateWithoutBucketInput> | StorageObjectCreateWithoutBucketInput[] | StorageObjectUncheckedCreateWithoutBucketInput[]
    connectOrCreate?: StorageObjectCreateOrConnectWithoutBucketInput | StorageObjectCreateOrConnectWithoutBucketInput[]
    upsert?: StorageObjectUpsertWithWhereUniqueWithoutBucketInput | StorageObjectUpsertWithWhereUniqueWithoutBucketInput[]
    createMany?: StorageObjectCreateManyBucketInputEnvelope
    set?: StorageObjectWhereUniqueInput | StorageObjectWhereUniqueInput[]
    disconnect?: StorageObjectWhereUniqueInput | StorageObjectWhereUniqueInput[]
    delete?: StorageObjectWhereUniqueInput | StorageObjectWhereUniqueInput[]
    connect?: StorageObjectWhereUniqueInput | StorageObjectWhereUniqueInput[]
    update?: StorageObjectUpdateWithWhereUniqueWithoutBucketInput | StorageObjectUpdateWithWhereUniqueWithoutBucketInput[]
    updateMany?: StorageObjectUpdateManyWithWhereWithoutBucketInput | StorageObjectUpdateManyWithWhereWithoutBucketInput[]
    deleteMany?: StorageObjectScalarWhereInput | StorageObjectScalarWhereInput[]
  }

  export type StorageUsageUpdateManyWithoutBucketNestedInput = {
    create?: XOR<StorageUsageCreateWithoutBucketInput, StorageUsageUncheckedCreateWithoutBucketInput> | StorageUsageCreateWithoutBucketInput[] | StorageUsageUncheckedCreateWithoutBucketInput[]
    connectOrCreate?: StorageUsageCreateOrConnectWithoutBucketInput | StorageUsageCreateOrConnectWithoutBucketInput[]
    upsert?: StorageUsageUpsertWithWhereUniqueWithoutBucketInput | StorageUsageUpsertWithWhereUniqueWithoutBucketInput[]
    createMany?: StorageUsageCreateManyBucketInputEnvelope
    set?: StorageUsageWhereUniqueInput | StorageUsageWhereUniqueInput[]
    disconnect?: StorageUsageWhereUniqueInput | StorageUsageWhereUniqueInput[]
    delete?: StorageUsageWhereUniqueInput | StorageUsageWhereUniqueInput[]
    connect?: StorageUsageWhereUniqueInput | StorageUsageWhereUniqueInput[]
    update?: StorageUsageUpdateWithWhereUniqueWithoutBucketInput | StorageUsageUpdateWithWhereUniqueWithoutBucketInput[]
    updateMany?: StorageUsageUpdateManyWithWhereWithoutBucketInput | StorageUsageUpdateManyWithWhereWithoutBucketInput[]
    deleteMany?: StorageUsageScalarWhereInput | StorageUsageScalarWhereInput[]
  }

  export type StorageObjectUncheckedUpdateManyWithoutBucketNestedInput = {
    create?: XOR<StorageObjectCreateWithoutBucketInput, StorageObjectUncheckedCreateWithoutBucketInput> | StorageObjectCreateWithoutBucketInput[] | StorageObjectUncheckedCreateWithoutBucketInput[]
    connectOrCreate?: StorageObjectCreateOrConnectWithoutBucketInput | StorageObjectCreateOrConnectWithoutBucketInput[]
    upsert?: StorageObjectUpsertWithWhereUniqueWithoutBucketInput | StorageObjectUpsertWithWhereUniqueWithoutBucketInput[]
    createMany?: StorageObjectCreateManyBucketInputEnvelope
    set?: StorageObjectWhereUniqueInput | StorageObjectWhereUniqueInput[]
    disconnect?: StorageObjectWhereUniqueInput | StorageObjectWhereUniqueInput[]
    delete?: StorageObjectWhereUniqueInput | StorageObjectWhereUniqueInput[]
    connect?: StorageObjectWhereUniqueInput | StorageObjectWhereUniqueInput[]
    update?: StorageObjectUpdateWithWhereUniqueWithoutBucketInput | StorageObjectUpdateWithWhereUniqueWithoutBucketInput[]
    updateMany?: StorageObjectUpdateManyWithWhereWithoutBucketInput | StorageObjectUpdateManyWithWhereWithoutBucketInput[]
    deleteMany?: StorageObjectScalarWhereInput | StorageObjectScalarWhereInput[]
  }

  export type StorageUsageUncheckedUpdateManyWithoutBucketNestedInput = {
    create?: XOR<StorageUsageCreateWithoutBucketInput, StorageUsageUncheckedCreateWithoutBucketInput> | StorageUsageCreateWithoutBucketInput[] | StorageUsageUncheckedCreateWithoutBucketInput[]
    connectOrCreate?: StorageUsageCreateOrConnectWithoutBucketInput | StorageUsageCreateOrConnectWithoutBucketInput[]
    upsert?: StorageUsageUpsertWithWhereUniqueWithoutBucketInput | StorageUsageUpsertWithWhereUniqueWithoutBucketInput[]
    createMany?: StorageUsageCreateManyBucketInputEnvelope
    set?: StorageUsageWhereUniqueInput | StorageUsageWhereUniqueInput[]
    disconnect?: StorageUsageWhereUniqueInput | StorageUsageWhereUniqueInput[]
    delete?: StorageUsageWhereUniqueInput | StorageUsageWhereUniqueInput[]
    connect?: StorageUsageWhereUniqueInput | StorageUsageWhereUniqueInput[]
    update?: StorageUsageUpdateWithWhereUniqueWithoutBucketInput | StorageUsageUpdateWithWhereUniqueWithoutBucketInput[]
    updateMany?: StorageUsageUpdateManyWithWhereWithoutBucketInput | StorageUsageUpdateManyWithWhereWithoutBucketInput[]
    deleteMany?: StorageUsageScalarWhereInput | StorageUsageScalarWhereInput[]
  }

  export type StorageBucketCreateNestedOneWithoutObjectsInput = {
    create?: XOR<StorageBucketCreateWithoutObjectsInput, StorageBucketUncheckedCreateWithoutObjectsInput>
    connectOrCreate?: StorageBucketCreateOrConnectWithoutObjectsInput
    connect?: StorageBucketWhereUniqueInput
  }

  export type StorageBucketUpdateOneRequiredWithoutObjectsNestedInput = {
    create?: XOR<StorageBucketCreateWithoutObjectsInput, StorageBucketUncheckedCreateWithoutObjectsInput>
    connectOrCreate?: StorageBucketCreateOrConnectWithoutObjectsInput
    upsert?: StorageBucketUpsertWithoutObjectsInput
    connect?: StorageBucketWhereUniqueInput
    update?: XOR<XOR<StorageBucketUpdateToOneWithWhereWithoutObjectsInput, StorageBucketUpdateWithoutObjectsInput>, StorageBucketUncheckedUpdateWithoutObjectsInput>
  }

  export type StorageBucketCreateNestedOneWithoutUsageInput = {
    create?: XOR<StorageBucketCreateWithoutUsageInput, StorageBucketUncheckedCreateWithoutUsageInput>
    connectOrCreate?: StorageBucketCreateOrConnectWithoutUsageInput
    connect?: StorageBucketWhereUniqueInput
  }

  export type StorageBucketUpdateOneRequiredWithoutUsageNestedInput = {
    create?: XOR<StorageBucketCreateWithoutUsageInput, StorageBucketUncheckedCreateWithoutUsageInput>
    connectOrCreate?: StorageBucketCreateOrConnectWithoutUsageInput
    upsert?: StorageBucketUpsertWithoutUsageInput
    connect?: StorageBucketWhereUniqueInput
    update?: XOR<XOR<StorageBucketUpdateToOneWithWhereWithoutUsageInput, StorageBucketUpdateWithoutUsageInput>, StorageBucketUncheckedUpdateWithoutUsageInput>
  }

  export type ContainerStatsCreateNestedManyWithoutContainerInput = {
    create?: XOR<ContainerStatsCreateWithoutContainerInput, ContainerStatsUncheckedCreateWithoutContainerInput> | ContainerStatsCreateWithoutContainerInput[] | ContainerStatsUncheckedCreateWithoutContainerInput[]
    connectOrCreate?: ContainerStatsCreateOrConnectWithoutContainerInput | ContainerStatsCreateOrConnectWithoutContainerInput[]
    createMany?: ContainerStatsCreateManyContainerInputEnvelope
    connect?: ContainerStatsWhereUniqueInput | ContainerStatsWhereUniqueInput[]
  }

  export type ContainerLogCreateNestedManyWithoutContainerInput = {
    create?: XOR<ContainerLogCreateWithoutContainerInput, ContainerLogUncheckedCreateWithoutContainerInput> | ContainerLogCreateWithoutContainerInput[] | ContainerLogUncheckedCreateWithoutContainerInput[]
    connectOrCreate?: ContainerLogCreateOrConnectWithoutContainerInput | ContainerLogCreateOrConnectWithoutContainerInput[]
    createMany?: ContainerLogCreateManyContainerInputEnvelope
    connect?: ContainerLogWhereUniqueInput | ContainerLogWhereUniqueInput[]
  }

  export type ContainerStatsUncheckedCreateNestedManyWithoutContainerInput = {
    create?: XOR<ContainerStatsCreateWithoutContainerInput, ContainerStatsUncheckedCreateWithoutContainerInput> | ContainerStatsCreateWithoutContainerInput[] | ContainerStatsUncheckedCreateWithoutContainerInput[]
    connectOrCreate?: ContainerStatsCreateOrConnectWithoutContainerInput | ContainerStatsCreateOrConnectWithoutContainerInput[]
    createMany?: ContainerStatsCreateManyContainerInputEnvelope
    connect?: ContainerStatsWhereUniqueInput | ContainerStatsWhereUniqueInput[]
  }

  export type ContainerLogUncheckedCreateNestedManyWithoutContainerInput = {
    create?: XOR<ContainerLogCreateWithoutContainerInput, ContainerLogUncheckedCreateWithoutContainerInput> | ContainerLogCreateWithoutContainerInput[] | ContainerLogUncheckedCreateWithoutContainerInput[]
    connectOrCreate?: ContainerLogCreateOrConnectWithoutContainerInput | ContainerLogCreateOrConnectWithoutContainerInput[]
    createMany?: ContainerLogCreateManyContainerInputEnvelope
    connect?: ContainerLogWhereUniqueInput | ContainerLogWhereUniqueInput[]
  }

  export type EnumContainerStatusFieldUpdateOperationsInput = {
    set?: $Enums.ContainerStatus
  }

  export type ContainerStatsUpdateManyWithoutContainerNestedInput = {
    create?: XOR<ContainerStatsCreateWithoutContainerInput, ContainerStatsUncheckedCreateWithoutContainerInput> | ContainerStatsCreateWithoutContainerInput[] | ContainerStatsUncheckedCreateWithoutContainerInput[]
    connectOrCreate?: ContainerStatsCreateOrConnectWithoutContainerInput | ContainerStatsCreateOrConnectWithoutContainerInput[]
    upsert?: ContainerStatsUpsertWithWhereUniqueWithoutContainerInput | ContainerStatsUpsertWithWhereUniqueWithoutContainerInput[]
    createMany?: ContainerStatsCreateManyContainerInputEnvelope
    set?: ContainerStatsWhereUniqueInput | ContainerStatsWhereUniqueInput[]
    disconnect?: ContainerStatsWhereUniqueInput | ContainerStatsWhereUniqueInput[]
    delete?: ContainerStatsWhereUniqueInput | ContainerStatsWhereUniqueInput[]
    connect?: ContainerStatsWhereUniqueInput | ContainerStatsWhereUniqueInput[]
    update?: ContainerStatsUpdateWithWhereUniqueWithoutContainerInput | ContainerStatsUpdateWithWhereUniqueWithoutContainerInput[]
    updateMany?: ContainerStatsUpdateManyWithWhereWithoutContainerInput | ContainerStatsUpdateManyWithWhereWithoutContainerInput[]
    deleteMany?: ContainerStatsScalarWhereInput | ContainerStatsScalarWhereInput[]
  }

  export type ContainerLogUpdateManyWithoutContainerNestedInput = {
    create?: XOR<ContainerLogCreateWithoutContainerInput, ContainerLogUncheckedCreateWithoutContainerInput> | ContainerLogCreateWithoutContainerInput[] | ContainerLogUncheckedCreateWithoutContainerInput[]
    connectOrCreate?: ContainerLogCreateOrConnectWithoutContainerInput | ContainerLogCreateOrConnectWithoutContainerInput[]
    upsert?: ContainerLogUpsertWithWhereUniqueWithoutContainerInput | ContainerLogUpsertWithWhereUniqueWithoutContainerInput[]
    createMany?: ContainerLogCreateManyContainerInputEnvelope
    set?: ContainerLogWhereUniqueInput | ContainerLogWhereUniqueInput[]
    disconnect?: ContainerLogWhereUniqueInput | ContainerLogWhereUniqueInput[]
    delete?: ContainerLogWhereUniqueInput | ContainerLogWhereUniqueInput[]
    connect?: ContainerLogWhereUniqueInput | ContainerLogWhereUniqueInput[]
    update?: ContainerLogUpdateWithWhereUniqueWithoutContainerInput | ContainerLogUpdateWithWhereUniqueWithoutContainerInput[]
    updateMany?: ContainerLogUpdateManyWithWhereWithoutContainerInput | ContainerLogUpdateManyWithWhereWithoutContainerInput[]
    deleteMany?: ContainerLogScalarWhereInput | ContainerLogScalarWhereInput[]
  }

  export type ContainerStatsUncheckedUpdateManyWithoutContainerNestedInput = {
    create?: XOR<ContainerStatsCreateWithoutContainerInput, ContainerStatsUncheckedCreateWithoutContainerInput> | ContainerStatsCreateWithoutContainerInput[] | ContainerStatsUncheckedCreateWithoutContainerInput[]
    connectOrCreate?: ContainerStatsCreateOrConnectWithoutContainerInput | ContainerStatsCreateOrConnectWithoutContainerInput[]
    upsert?: ContainerStatsUpsertWithWhereUniqueWithoutContainerInput | ContainerStatsUpsertWithWhereUniqueWithoutContainerInput[]
    createMany?: ContainerStatsCreateManyContainerInputEnvelope
    set?: ContainerStatsWhereUniqueInput | ContainerStatsWhereUniqueInput[]
    disconnect?: ContainerStatsWhereUniqueInput | ContainerStatsWhereUniqueInput[]
    delete?: ContainerStatsWhereUniqueInput | ContainerStatsWhereUniqueInput[]
    connect?: ContainerStatsWhereUniqueInput | ContainerStatsWhereUniqueInput[]
    update?: ContainerStatsUpdateWithWhereUniqueWithoutContainerInput | ContainerStatsUpdateWithWhereUniqueWithoutContainerInput[]
    updateMany?: ContainerStatsUpdateManyWithWhereWithoutContainerInput | ContainerStatsUpdateManyWithWhereWithoutContainerInput[]
    deleteMany?: ContainerStatsScalarWhereInput | ContainerStatsScalarWhereInput[]
  }

  export type ContainerLogUncheckedUpdateManyWithoutContainerNestedInput = {
    create?: XOR<ContainerLogCreateWithoutContainerInput, ContainerLogUncheckedCreateWithoutContainerInput> | ContainerLogCreateWithoutContainerInput[] | ContainerLogUncheckedCreateWithoutContainerInput[]
    connectOrCreate?: ContainerLogCreateOrConnectWithoutContainerInput | ContainerLogCreateOrConnectWithoutContainerInput[]
    upsert?: ContainerLogUpsertWithWhereUniqueWithoutContainerInput | ContainerLogUpsertWithWhereUniqueWithoutContainerInput[]
    createMany?: ContainerLogCreateManyContainerInputEnvelope
    set?: ContainerLogWhereUniqueInput | ContainerLogWhereUniqueInput[]
    disconnect?: ContainerLogWhereUniqueInput | ContainerLogWhereUniqueInput[]
    delete?: ContainerLogWhereUniqueInput | ContainerLogWhereUniqueInput[]
    connect?: ContainerLogWhereUniqueInput | ContainerLogWhereUniqueInput[]
    update?: ContainerLogUpdateWithWhereUniqueWithoutContainerInput | ContainerLogUpdateWithWhereUniqueWithoutContainerInput[]
    updateMany?: ContainerLogUpdateManyWithWhereWithoutContainerInput | ContainerLogUpdateManyWithWhereWithoutContainerInput[]
    deleteMany?: ContainerLogScalarWhereInput | ContainerLogScalarWhereInput[]
  }

  export type ContainerCreateNestedOneWithoutStatsInput = {
    create?: XOR<ContainerCreateWithoutStatsInput, ContainerUncheckedCreateWithoutStatsInput>
    connectOrCreate?: ContainerCreateOrConnectWithoutStatsInput
    connect?: ContainerWhereUniqueInput
  }

  export type ContainerUpdateOneRequiredWithoutStatsNestedInput = {
    create?: XOR<ContainerCreateWithoutStatsInput, ContainerUncheckedCreateWithoutStatsInput>
    connectOrCreate?: ContainerCreateOrConnectWithoutStatsInput
    upsert?: ContainerUpsertWithoutStatsInput
    connect?: ContainerWhereUniqueInput
    update?: XOR<XOR<ContainerUpdateToOneWithWhereWithoutStatsInput, ContainerUpdateWithoutStatsInput>, ContainerUncheckedUpdateWithoutStatsInput>
  }

  export type ContainerCreateNestedOneWithoutLogsInput = {
    create?: XOR<ContainerCreateWithoutLogsInput, ContainerUncheckedCreateWithoutLogsInput>
    connectOrCreate?: ContainerCreateOrConnectWithoutLogsInput
    connect?: ContainerWhereUniqueInput
  }

  export type EnumLogLevelFieldUpdateOperationsInput = {
    set?: $Enums.LogLevel
  }

  export type ContainerUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<ContainerCreateWithoutLogsInput, ContainerUncheckedCreateWithoutLogsInput>
    connectOrCreate?: ContainerCreateOrConnectWithoutLogsInput
    upsert?: ContainerUpsertWithoutLogsInput
    connect?: ContainerWhereUniqueInput
    update?: XOR<XOR<ContainerUpdateToOneWithWhereWithoutLogsInput, ContainerUpdateWithoutLogsInput>, ContainerUncheckedUpdateWithoutLogsInput>
  }

  export type EnumHealthStatusFieldUpdateOperationsInput = {
    set?: $Enums.HealthStatus
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type WebVMInstanceCreateNestedManyWithoutTemplateInput = {
    create?: XOR<WebVMInstanceCreateWithoutTemplateInput, WebVMInstanceUncheckedCreateWithoutTemplateInput> | WebVMInstanceCreateWithoutTemplateInput[] | WebVMInstanceUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutTemplateInput | WebVMInstanceCreateOrConnectWithoutTemplateInput[]
    createMany?: WebVMInstanceCreateManyTemplateInputEnvelope
    connect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
  }

  export type WebVMInstanceUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<WebVMInstanceCreateWithoutTemplateInput, WebVMInstanceUncheckedCreateWithoutTemplateInput> | WebVMInstanceCreateWithoutTemplateInput[] | WebVMInstanceUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutTemplateInput | WebVMInstanceCreateOrConnectWithoutTemplateInput[]
    createMany?: WebVMInstanceCreateManyTemplateInputEnvelope
    connect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
  }

  export type WebVMInstanceUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<WebVMInstanceCreateWithoutTemplateInput, WebVMInstanceUncheckedCreateWithoutTemplateInput> | WebVMInstanceCreateWithoutTemplateInput[] | WebVMInstanceUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutTemplateInput | WebVMInstanceCreateOrConnectWithoutTemplateInput[]
    upsert?: WebVMInstanceUpsertWithWhereUniqueWithoutTemplateInput | WebVMInstanceUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: WebVMInstanceCreateManyTemplateInputEnvelope
    set?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    disconnect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    delete?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    connect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    update?: WebVMInstanceUpdateWithWhereUniqueWithoutTemplateInput | WebVMInstanceUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: WebVMInstanceUpdateManyWithWhereWithoutTemplateInput | WebVMInstanceUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: WebVMInstanceScalarWhereInput | WebVMInstanceScalarWhereInput[]
  }

  export type WebVMInstanceUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<WebVMInstanceCreateWithoutTemplateInput, WebVMInstanceUncheckedCreateWithoutTemplateInput> | WebVMInstanceCreateWithoutTemplateInput[] | WebVMInstanceUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutTemplateInput | WebVMInstanceCreateOrConnectWithoutTemplateInput[]
    upsert?: WebVMInstanceUpsertWithWhereUniqueWithoutTemplateInput | WebVMInstanceUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: WebVMInstanceCreateManyTemplateInputEnvelope
    set?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    disconnect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    delete?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    connect?: WebVMInstanceWhereUniqueInput | WebVMInstanceWhereUniqueInput[]
    update?: WebVMInstanceUpdateWithWhereUniqueWithoutTemplateInput | WebVMInstanceUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: WebVMInstanceUpdateManyWithWhereWithoutTemplateInput | WebVMInstanceUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: WebVMInstanceScalarWhereInput | WebVMInstanceScalarWhereInput[]
  }

  export type WebVMInstanceCreateNestedOneWithoutSnapshotsInput = {
    create?: XOR<WebVMInstanceCreateWithoutSnapshotsInput, WebVMInstanceUncheckedCreateWithoutSnapshotsInput>
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutSnapshotsInput
    connect?: WebVMInstanceWhereUniqueInput
  }

  export type WebVMInstanceUpdateOneRequiredWithoutSnapshotsNestedInput = {
    create?: XOR<WebVMInstanceCreateWithoutSnapshotsInput, WebVMInstanceUncheckedCreateWithoutSnapshotsInput>
    connectOrCreate?: WebVMInstanceCreateOrConnectWithoutSnapshotsInput
    upsert?: WebVMInstanceUpsertWithoutSnapshotsInput
    connect?: WebVMInstanceWhereUniqueInput
    update?: XOR<XOR<WebVMInstanceUpdateToOneWithWhereWithoutSnapshotsInput, WebVMInstanceUpdateWithoutSnapshotsInput>, WebVMInstanceUncheckedUpdateWithoutSnapshotsInput>
  }

  export type WorkspaceCreateNestedOneWithoutPersistenceInput = {
    create?: XOR<WorkspaceCreateWithoutPersistenceInput, WorkspaceUncheckedCreateWithoutPersistenceInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutPersistenceInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type WorkspaceUpdateOneRequiredWithoutPersistenceNestedInput = {
    create?: XOR<WorkspaceCreateWithoutPersistenceInput, WorkspaceUncheckedCreateWithoutPersistenceInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutPersistenceInput
    upsert?: WorkspaceUpsertWithoutPersistenceInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutPersistenceInput, WorkspaceUpdateWithoutPersistenceInput>, WorkspaceUncheckedUpdateWithoutPersistenceInput>
  }

  export type AlertNotificationCreateNestedManyWithoutAlertInput = {
    create?: XOR<AlertNotificationCreateWithoutAlertInput, AlertNotificationUncheckedCreateWithoutAlertInput> | AlertNotificationCreateWithoutAlertInput[] | AlertNotificationUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: AlertNotificationCreateOrConnectWithoutAlertInput | AlertNotificationCreateOrConnectWithoutAlertInput[]
    createMany?: AlertNotificationCreateManyAlertInputEnvelope
    connect?: AlertNotificationWhereUniqueInput | AlertNotificationWhereUniqueInput[]
  }

  export type AlertNotificationUncheckedCreateNestedManyWithoutAlertInput = {
    create?: XOR<AlertNotificationCreateWithoutAlertInput, AlertNotificationUncheckedCreateWithoutAlertInput> | AlertNotificationCreateWithoutAlertInput[] | AlertNotificationUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: AlertNotificationCreateOrConnectWithoutAlertInput | AlertNotificationCreateOrConnectWithoutAlertInput[]
    createMany?: AlertNotificationCreateManyAlertInputEnvelope
    connect?: AlertNotificationWhereUniqueInput | AlertNotificationWhereUniqueInput[]
  }

  export type EnumAlertSeverityFieldUpdateOperationsInput = {
    set?: $Enums.AlertSeverity
  }

  export type EnumAlertStateFieldUpdateOperationsInput = {
    set?: $Enums.AlertState
  }

  export type AlertNotificationUpdateManyWithoutAlertNestedInput = {
    create?: XOR<AlertNotificationCreateWithoutAlertInput, AlertNotificationUncheckedCreateWithoutAlertInput> | AlertNotificationCreateWithoutAlertInput[] | AlertNotificationUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: AlertNotificationCreateOrConnectWithoutAlertInput | AlertNotificationCreateOrConnectWithoutAlertInput[]
    upsert?: AlertNotificationUpsertWithWhereUniqueWithoutAlertInput | AlertNotificationUpsertWithWhereUniqueWithoutAlertInput[]
    createMany?: AlertNotificationCreateManyAlertInputEnvelope
    set?: AlertNotificationWhereUniqueInput | AlertNotificationWhereUniqueInput[]
    disconnect?: AlertNotificationWhereUniqueInput | AlertNotificationWhereUniqueInput[]
    delete?: AlertNotificationWhereUniqueInput | AlertNotificationWhereUniqueInput[]
    connect?: AlertNotificationWhereUniqueInput | AlertNotificationWhereUniqueInput[]
    update?: AlertNotificationUpdateWithWhereUniqueWithoutAlertInput | AlertNotificationUpdateWithWhereUniqueWithoutAlertInput[]
    updateMany?: AlertNotificationUpdateManyWithWhereWithoutAlertInput | AlertNotificationUpdateManyWithWhereWithoutAlertInput[]
    deleteMany?: AlertNotificationScalarWhereInput | AlertNotificationScalarWhereInput[]
  }

  export type AlertNotificationUncheckedUpdateManyWithoutAlertNestedInput = {
    create?: XOR<AlertNotificationCreateWithoutAlertInput, AlertNotificationUncheckedCreateWithoutAlertInput> | AlertNotificationCreateWithoutAlertInput[] | AlertNotificationUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: AlertNotificationCreateOrConnectWithoutAlertInput | AlertNotificationCreateOrConnectWithoutAlertInput[]
    upsert?: AlertNotificationUpsertWithWhereUniqueWithoutAlertInput | AlertNotificationUpsertWithWhereUniqueWithoutAlertInput[]
    createMany?: AlertNotificationCreateManyAlertInputEnvelope
    set?: AlertNotificationWhereUniqueInput | AlertNotificationWhereUniqueInput[]
    disconnect?: AlertNotificationWhereUniqueInput | AlertNotificationWhereUniqueInput[]
    delete?: AlertNotificationWhereUniqueInput | AlertNotificationWhereUniqueInput[]
    connect?: AlertNotificationWhereUniqueInput | AlertNotificationWhereUniqueInput[]
    update?: AlertNotificationUpdateWithWhereUniqueWithoutAlertInput | AlertNotificationUpdateWithWhereUniqueWithoutAlertInput[]
    updateMany?: AlertNotificationUpdateManyWithWhereWithoutAlertInput | AlertNotificationUpdateManyWithWhereWithoutAlertInput[]
    deleteMany?: AlertNotificationScalarWhereInput | AlertNotificationScalarWhereInput[]
  }

  export type InfrastructureAlertCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<InfrastructureAlertCreateWithoutNotificationsInput, InfrastructureAlertUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: InfrastructureAlertCreateOrConnectWithoutNotificationsInput
    connect?: InfrastructureAlertWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type InfrastructureAlertUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<InfrastructureAlertCreateWithoutNotificationsInput, InfrastructureAlertUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: InfrastructureAlertCreateOrConnectWithoutNotificationsInput
    upsert?: InfrastructureAlertUpsertWithoutNotificationsInput
    connect?: InfrastructureAlertWhereUniqueInput
    update?: XOR<XOR<InfrastructureAlertUpdateToOneWithWhereWithoutNotificationsInput, InfrastructureAlertUpdateWithoutNotificationsInput>, InfrastructureAlertUncheckedUpdateWithoutNotificationsInput>
  }

  export type WorkspaceCreateNestedOneWithoutFilesInput = {
    create?: XOR<WorkspaceCreateWithoutFilesInput, WorkspaceUncheckedCreateWithoutFilesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutFilesInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type WorkspaceFileCreateNestedOneWithoutChildrenInput = {
    create?: XOR<WorkspaceFileCreateWithoutChildrenInput, WorkspaceFileUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutChildrenInput
    connect?: WorkspaceFileWhereUniqueInput
  }

  export type WorkspaceFileCreateNestedManyWithoutParentInput = {
    create?: XOR<WorkspaceFileCreateWithoutParentInput, WorkspaceFileUncheckedCreateWithoutParentInput> | WorkspaceFileCreateWithoutParentInput[] | WorkspaceFileUncheckedCreateWithoutParentInput[]
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutParentInput | WorkspaceFileCreateOrConnectWithoutParentInput[]
    createMany?: WorkspaceFileCreateManyParentInputEnvelope
    connect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
  }

  export type FileIndexCreateNestedManyWithoutWorkspaceFileInput = {
    create?: XOR<FileIndexCreateWithoutWorkspaceFileInput, FileIndexUncheckedCreateWithoutWorkspaceFileInput> | FileIndexCreateWithoutWorkspaceFileInput[] | FileIndexUncheckedCreateWithoutWorkspaceFileInput[]
    connectOrCreate?: FileIndexCreateOrConnectWithoutWorkspaceFileInput | FileIndexCreateOrConnectWithoutWorkspaceFileInput[]
    createMany?: FileIndexCreateManyWorkspaceFileInputEnvelope
    connect?: FileIndexWhereUniqueInput | FileIndexWhereUniqueInput[]
  }

  export type WorkspaceFileUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<WorkspaceFileCreateWithoutParentInput, WorkspaceFileUncheckedCreateWithoutParentInput> | WorkspaceFileCreateWithoutParentInput[] | WorkspaceFileUncheckedCreateWithoutParentInput[]
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutParentInput | WorkspaceFileCreateOrConnectWithoutParentInput[]
    createMany?: WorkspaceFileCreateManyParentInputEnvelope
    connect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
  }

  export type FileIndexUncheckedCreateNestedManyWithoutWorkspaceFileInput = {
    create?: XOR<FileIndexCreateWithoutWorkspaceFileInput, FileIndexUncheckedCreateWithoutWorkspaceFileInput> | FileIndexCreateWithoutWorkspaceFileInput[] | FileIndexUncheckedCreateWithoutWorkspaceFileInput[]
    connectOrCreate?: FileIndexCreateOrConnectWithoutWorkspaceFileInput | FileIndexCreateOrConnectWithoutWorkspaceFileInput[]
    createMany?: FileIndexCreateManyWorkspaceFileInputEnvelope
    connect?: FileIndexWhereUniqueInput | FileIndexWhereUniqueInput[]
  }

  export type WorkspaceUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<WorkspaceCreateWithoutFilesInput, WorkspaceUncheckedCreateWithoutFilesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutFilesInput
    upsert?: WorkspaceUpsertWithoutFilesInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutFilesInput, WorkspaceUpdateWithoutFilesInput>, WorkspaceUncheckedUpdateWithoutFilesInput>
  }

  export type WorkspaceFileUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<WorkspaceFileCreateWithoutChildrenInput, WorkspaceFileUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutChildrenInput
    upsert?: WorkspaceFileUpsertWithoutChildrenInput
    disconnect?: WorkspaceFileWhereInput | boolean
    delete?: WorkspaceFileWhereInput | boolean
    connect?: WorkspaceFileWhereUniqueInput
    update?: XOR<XOR<WorkspaceFileUpdateToOneWithWhereWithoutChildrenInput, WorkspaceFileUpdateWithoutChildrenInput>, WorkspaceFileUncheckedUpdateWithoutChildrenInput>
  }

  export type WorkspaceFileUpdateManyWithoutParentNestedInput = {
    create?: XOR<WorkspaceFileCreateWithoutParentInput, WorkspaceFileUncheckedCreateWithoutParentInput> | WorkspaceFileCreateWithoutParentInput[] | WorkspaceFileUncheckedCreateWithoutParentInput[]
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutParentInput | WorkspaceFileCreateOrConnectWithoutParentInput[]
    upsert?: WorkspaceFileUpsertWithWhereUniqueWithoutParentInput | WorkspaceFileUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: WorkspaceFileCreateManyParentInputEnvelope
    set?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    disconnect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    delete?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    connect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    update?: WorkspaceFileUpdateWithWhereUniqueWithoutParentInput | WorkspaceFileUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: WorkspaceFileUpdateManyWithWhereWithoutParentInput | WorkspaceFileUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: WorkspaceFileScalarWhereInput | WorkspaceFileScalarWhereInput[]
  }

  export type FileIndexUpdateManyWithoutWorkspaceFileNestedInput = {
    create?: XOR<FileIndexCreateWithoutWorkspaceFileInput, FileIndexUncheckedCreateWithoutWorkspaceFileInput> | FileIndexCreateWithoutWorkspaceFileInput[] | FileIndexUncheckedCreateWithoutWorkspaceFileInput[]
    connectOrCreate?: FileIndexCreateOrConnectWithoutWorkspaceFileInput | FileIndexCreateOrConnectWithoutWorkspaceFileInput[]
    upsert?: FileIndexUpsertWithWhereUniqueWithoutWorkspaceFileInput | FileIndexUpsertWithWhereUniqueWithoutWorkspaceFileInput[]
    createMany?: FileIndexCreateManyWorkspaceFileInputEnvelope
    set?: FileIndexWhereUniqueInput | FileIndexWhereUniqueInput[]
    disconnect?: FileIndexWhereUniqueInput | FileIndexWhereUniqueInput[]
    delete?: FileIndexWhereUniqueInput | FileIndexWhereUniqueInput[]
    connect?: FileIndexWhereUniqueInput | FileIndexWhereUniqueInput[]
    update?: FileIndexUpdateWithWhereUniqueWithoutWorkspaceFileInput | FileIndexUpdateWithWhereUniqueWithoutWorkspaceFileInput[]
    updateMany?: FileIndexUpdateManyWithWhereWithoutWorkspaceFileInput | FileIndexUpdateManyWithWhereWithoutWorkspaceFileInput[]
    deleteMany?: FileIndexScalarWhereInput | FileIndexScalarWhereInput[]
  }

  export type WorkspaceFileUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<WorkspaceFileCreateWithoutParentInput, WorkspaceFileUncheckedCreateWithoutParentInput> | WorkspaceFileCreateWithoutParentInput[] | WorkspaceFileUncheckedCreateWithoutParentInput[]
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutParentInput | WorkspaceFileCreateOrConnectWithoutParentInput[]
    upsert?: WorkspaceFileUpsertWithWhereUniqueWithoutParentInput | WorkspaceFileUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: WorkspaceFileCreateManyParentInputEnvelope
    set?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    disconnect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    delete?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    connect?: WorkspaceFileWhereUniqueInput | WorkspaceFileWhereUniqueInput[]
    update?: WorkspaceFileUpdateWithWhereUniqueWithoutParentInput | WorkspaceFileUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: WorkspaceFileUpdateManyWithWhereWithoutParentInput | WorkspaceFileUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: WorkspaceFileScalarWhereInput | WorkspaceFileScalarWhereInput[]
  }

  export type FileIndexUncheckedUpdateManyWithoutWorkspaceFileNestedInput = {
    create?: XOR<FileIndexCreateWithoutWorkspaceFileInput, FileIndexUncheckedCreateWithoutWorkspaceFileInput> | FileIndexCreateWithoutWorkspaceFileInput[] | FileIndexUncheckedCreateWithoutWorkspaceFileInput[]
    connectOrCreate?: FileIndexCreateOrConnectWithoutWorkspaceFileInput | FileIndexCreateOrConnectWithoutWorkspaceFileInput[]
    upsert?: FileIndexUpsertWithWhereUniqueWithoutWorkspaceFileInput | FileIndexUpsertWithWhereUniqueWithoutWorkspaceFileInput[]
    createMany?: FileIndexCreateManyWorkspaceFileInputEnvelope
    set?: FileIndexWhereUniqueInput | FileIndexWhereUniqueInput[]
    disconnect?: FileIndexWhereUniqueInput | FileIndexWhereUniqueInput[]
    delete?: FileIndexWhereUniqueInput | FileIndexWhereUniqueInput[]
    connect?: FileIndexWhereUniqueInput | FileIndexWhereUniqueInput[]
    update?: FileIndexUpdateWithWhereUniqueWithoutWorkspaceFileInput | FileIndexUpdateWithWhereUniqueWithoutWorkspaceFileInput[]
    updateMany?: FileIndexUpdateManyWithWhereWithoutWorkspaceFileInput | FileIndexUpdateManyWithWhereWithoutWorkspaceFileInput[]
    deleteMany?: FileIndexScalarWhereInput | FileIndexScalarWhereInput[]
  }

  export type WorkspaceFileCreateNestedOneWithoutIndexesInput = {
    create?: XOR<WorkspaceFileCreateWithoutIndexesInput, WorkspaceFileUncheckedCreateWithoutIndexesInput>
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutIndexesInput
    connect?: WorkspaceFileWhereUniqueInput
  }

  export type WorkspaceFileUpdateOneRequiredWithoutIndexesNestedInput = {
    create?: XOR<WorkspaceFileCreateWithoutIndexesInput, WorkspaceFileUncheckedCreateWithoutIndexesInput>
    connectOrCreate?: WorkspaceFileCreateOrConnectWithoutIndexesInput
    upsert?: WorkspaceFileUpsertWithoutIndexesInput
    connect?: WorkspaceFileWhereUniqueInput
    update?: XOR<XOR<WorkspaceFileUpdateToOneWithWhereWithoutIndexesInput, WorkspaceFileUpdateWithoutIndexesInput>, WorkspaceFileUncheckedUpdateWithoutIndexesInput>
  }

  export type WorkspaceCreateNestedOneWithoutStatesInput = {
    create?: XOR<WorkspaceCreateWithoutStatesInput, WorkspaceUncheckedCreateWithoutStatesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutStatesInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type WorkspaceUpdateOneRequiredWithoutStatesNestedInput = {
    create?: XOR<WorkspaceCreateWithoutStatesInput, WorkspaceUncheckedCreateWithoutStatesInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutStatesInput
    upsert?: WorkspaceUpsertWithoutStatesInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutStatesInput, WorkspaceUpdateWithoutStatesInput>, WorkspaceUncheckedUpdateWithoutStatesInput>
  }

  export type WorkspaceCreateNestedOneWithoutSyncsInput = {
    create?: XOR<WorkspaceCreateWithoutSyncsInput, WorkspaceUncheckedCreateWithoutSyncsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutSyncsInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type EnumSyncTypeFieldUpdateOperationsInput = {
    set?: $Enums.SyncType
  }

  export type EnumSyncStatusFieldUpdateOperationsInput = {
    set?: $Enums.SyncStatus
  }

  export type WorkspaceUpdateOneRequiredWithoutSyncsNestedInput = {
    create?: XOR<WorkspaceCreateWithoutSyncsInput, WorkspaceUncheckedCreateWithoutSyncsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutSyncsInput
    upsert?: WorkspaceUpsertWithoutSyncsInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutSyncsInput, WorkspaceUpdateWithoutSyncsInput>, WorkspaceUncheckedUpdateWithoutSyncsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumMemberRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberRole | EnumMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MemberRole[] | ListEnumMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberRole[] | ListEnumMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberRoleFilter<$PrismaModel> | $Enums.MemberRole
  }

  export type NestedEnumMemberRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberRole | EnumMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MemberRole[] | ListEnumMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberRole[] | ListEnumMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberRoleWithAggregatesFilter<$PrismaModel> | $Enums.MemberRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMemberRoleFilter<$PrismaModel>
    _max?: NestedEnumMemberRoleFilter<$PrismaModel>
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedEnumTaskPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPriority | EnumTaskPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPriorityFilter<$PrismaModel> | $Enums.TaskPriority
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type NestedEnumTaskPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskPriority | EnumTaskPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskPriority[] | ListEnumTaskPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskPriorityWithAggregatesFilter<$PrismaModel> | $Enums.TaskPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskPriorityFilter<$PrismaModel>
    _max?: NestedEnumTaskPriorityFilter<$PrismaModel>
  }

  export type NestedEnumWorkspaceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceStatus | EnumWorkspaceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceStatus[] | ListEnumWorkspaceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceStatus[] | ListEnumWorkspaceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceStatusFilter<$PrismaModel> | $Enums.WorkspaceStatus
  }

  export type NestedEnumWorkspaceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceStatus | EnumWorkspaceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceStatus[] | ListEnumWorkspaceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceStatus[] | ListEnumWorkspaceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkspaceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkspaceStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkspaceStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumWebVMStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WebVMStatus | EnumWebVMStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WebVMStatus[] | ListEnumWebVMStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WebVMStatus[] | ListEnumWebVMStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWebVMStatusFilter<$PrismaModel> | $Enums.WebVMStatus
  }

  export type NestedEnumWebVMStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WebVMStatus | EnumWebVMStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WebVMStatus[] | ListEnumWebVMStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WebVMStatus[] | ListEnumWebVMStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWebVMStatusWithAggregatesFilter<$PrismaModel> | $Enums.WebVMStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWebVMStatusFilter<$PrismaModel>
    _max?: NestedEnumWebVMStatusFilter<$PrismaModel>
  }

  export type NestedEnumMetricTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MetricType | EnumMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMetricTypeFilter<$PrismaModel> | $Enums.MetricType
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumMetricTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetricType | EnumMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMetricTypeWithAggregatesFilter<$PrismaModel> | $Enums.MetricType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetricTypeFilter<$PrismaModel>
    _max?: NestedEnumMetricTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumContainerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContainerStatus | EnumContainerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContainerStatus[] | ListEnumContainerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContainerStatus[] | ListEnumContainerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContainerStatusFilter<$PrismaModel> | $Enums.ContainerStatus
  }

  export type NestedEnumContainerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContainerStatus | EnumContainerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContainerStatus[] | ListEnumContainerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContainerStatus[] | ListEnumContainerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContainerStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContainerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContainerStatusFilter<$PrismaModel>
    _max?: NestedEnumContainerStatusFilter<$PrismaModel>
  }

  export type NestedEnumLogLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLogLevelFilter<$PrismaModel> | $Enums.LogLevel
  }

  export type NestedEnumLogLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLogLevelWithAggregatesFilter<$PrismaModel> | $Enums.LogLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogLevelFilter<$PrismaModel>
    _max?: NestedEnumLogLevelFilter<$PrismaModel>
  }

  export type NestedEnumHealthStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HealthStatus | EnumHealthStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HealthStatus[] | ListEnumHealthStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HealthStatus[] | ListEnumHealthStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHealthStatusFilter<$PrismaModel> | $Enums.HealthStatus
  }

  export type NestedEnumHealthStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HealthStatus | EnumHealthStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HealthStatus[] | ListEnumHealthStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HealthStatus[] | ListEnumHealthStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHealthStatusWithAggregatesFilter<$PrismaModel> | $Enums.HealthStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHealthStatusFilter<$PrismaModel>
    _max?: NestedEnumHealthStatusFilter<$PrismaModel>
  }

  export type NestedEnumAlertSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityFilter<$PrismaModel> | $Enums.AlertSeverity
  }

  export type NestedEnumAlertStateFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertState | EnumAlertStateFieldRefInput<$PrismaModel>
    in?: $Enums.AlertState[] | ListEnumAlertStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertState[] | ListEnumAlertStateFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStateFilter<$PrismaModel> | $Enums.AlertState
  }

  export type NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel> | $Enums.AlertSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertSeverityFilter<$PrismaModel>
    _max?: NestedEnumAlertSeverityFilter<$PrismaModel>
  }

  export type NestedEnumAlertStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertState | EnumAlertStateFieldRefInput<$PrismaModel>
    in?: $Enums.AlertState[] | ListEnumAlertStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertState[] | ListEnumAlertStateFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStateWithAggregatesFilter<$PrismaModel> | $Enums.AlertState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertStateFilter<$PrismaModel>
    _max?: NestedEnumAlertStateFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumSyncTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncType | EnumSyncTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SyncType[] | ListEnumSyncTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncType[] | ListEnumSyncTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncTypeFilter<$PrismaModel> | $Enums.SyncType
  }

  export type NestedEnumSyncStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncStatusFilter<$PrismaModel> | $Enums.SyncStatus
  }

  export type NestedEnumSyncTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncType | EnumSyncTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SyncType[] | ListEnumSyncTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncType[] | ListEnumSyncTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncTypeWithAggregatesFilter<$PrismaModel> | $Enums.SyncType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncTypeFilter<$PrismaModel>
    _max?: NestedEnumSyncTypeFilter<$PrismaModel>
  }

  export type NestedEnumSyncStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncStatus[] | ListEnumSyncStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncStatusWithAggregatesFilter<$PrismaModel> | $Enums.SyncStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncStatusFilter<$PrismaModel>
    _max?: NestedEnumSyncStatusFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationMemberCreateWithoutUserInput = {
    id?: string
    role?: $Enums.MemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutMembersInput
  }

  export type OrganizationMemberUncheckedCreateWithoutUserInput = {
    id?: string
    organizationId: string
    role?: $Enums.MemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationMemberCreateOrConnectWithoutUserInput = {
    where: OrganizationMemberWhereUniqueInput
    create: XOR<OrganizationMemberCreateWithoutUserInput, OrganizationMemberUncheckedCreateWithoutUserInput>
  }

  export type OrganizationMemberCreateManyUserInputEnvelope = {
    data: OrganizationMemberCreateManyUserInput | OrganizationMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    projectId: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput>
  }

  export type TaskCreateManyAssigneeInputEnvelope = {
    data: TaskCreateManyAssigneeInput | TaskCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    resourceId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress: string
    userAgent: string
    timestamp?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    resourceId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress: string
    userAgent: string
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPreferenceCreateWithoutUserInput = {
    id?: string
    theme?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUncheckedCreateWithoutUserInput = {
    id?: string
    theme?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceCreateOrConnectWithoutUserInput = {
    where: UserPreferenceWhereUniqueInput
    create: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type OrganizationMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: OrganizationMemberWhereUniqueInput
    update: XOR<OrganizationMemberUpdateWithoutUserInput, OrganizationMemberUncheckedUpdateWithoutUserInput>
    create: XOR<OrganizationMemberCreateWithoutUserInput, OrganizationMemberUncheckedCreateWithoutUserInput>
  }

  export type OrganizationMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: OrganizationMemberWhereUniqueInput
    data: XOR<OrganizationMemberUpdateWithoutUserInput, OrganizationMemberUncheckedUpdateWithoutUserInput>
  }

  export type OrganizationMemberUpdateManyWithWhereWithoutUserInput = {
    where: OrganizationMemberScalarWhereInput
    data: XOR<OrganizationMemberUpdateManyMutationInput, OrganizationMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type OrganizationMemberScalarWhereInput = {
    AND?: OrganizationMemberScalarWhereInput | OrganizationMemberScalarWhereInput[]
    OR?: OrganizationMemberScalarWhereInput[]
    NOT?: OrganizationMemberScalarWhereInput | OrganizationMemberScalarWhereInput[]
    id?: StringFilter<"OrganizationMember"> | string
    organizationId?: StringFilter<"OrganizationMember"> | string
    userId?: StringFilter<"OrganizationMember"> | string
    role?: EnumMemberRoleFilter<"OrganizationMember"> | $Enums.MemberRole
    createdAt?: DateTimeFilter<"OrganizationMember"> | Date | string
    updatedAt?: DateTimeFilter<"OrganizationMember"> | Date | string
  }

  export type TaskUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutAssigneeInput, TaskUncheckedUpdateWithoutAssigneeInput>
    create: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutAssigneeInput, TaskUncheckedUpdateWithoutAssigneeInput>
  }

  export type TaskUpdateManyWithWhereWithoutAssigneeInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumTaskPriorityFilter<"Task"> | $Enums.TaskPriority
    projectId?: StringFilter<"Task"> | string
    assigneeId?: StringNullableFilter<"Task"> | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringFilter<"AuditLog"> | string
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringFilter<"AuditLog"> | string
    userAgent?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserPreferenceUpsertWithoutUserInput = {
    update: XOR<UserPreferenceUpdateWithoutUserInput, UserPreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
    where?: UserPreferenceWhereInput
  }

  export type UserPreferenceUpdateToOneWithWhereWithoutUserInput = {
    where?: UserPreferenceWhereInput
    data: XOR<UserPreferenceUpdateWithoutUserInput, UserPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type UserPreferenceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberCreateNestedManyWithoutUserInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberUncheckedCreateNestedManyWithoutUserInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUncheckedUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberCreateNestedManyWithoutUserInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberUncheckedCreateNestedManyWithoutUserInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUncheckedUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutPreferencesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberCreateNestedManyWithoutUserInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPreferencesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberUncheckedCreateNestedManyWithoutUserInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
  }

  export type UserUpsertWithoutPreferencesInput = {
    update: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type UserUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUncheckedUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationMemberCreateWithoutOrganizationInput = {
    id?: string
    role?: $Enums.MemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrganizationsInput
  }

  export type OrganizationMemberUncheckedCreateWithoutOrganizationInput = {
    id?: string
    userId: string
    role?: $Enums.MemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationMemberCreateOrConnectWithoutOrganizationInput = {
    where: OrganizationMemberWhereUniqueInput
    create: XOR<OrganizationMemberCreateWithoutOrganizationInput, OrganizationMemberUncheckedCreateWithoutOrganizationInput>
  }

  export type OrganizationMemberCreateManyOrganizationInputEnvelope = {
    data: OrganizationMemberCreateManyOrganizationInput | OrganizationMemberCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutProjectInput
    workspaces?: WorkspaceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutOrganizationInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput>
  }

  export type ProjectCreateManyOrganizationInputEnvelope = {
    data: ProjectCreateManyOrganizationInput | ProjectCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationInvitationCreateWithoutOrganizationInput = {
    id?: string
    email: string
    role?: $Enums.MemberRole
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type OrganizationInvitationUncheckedCreateWithoutOrganizationInput = {
    id?: string
    email: string
    role?: $Enums.MemberRole
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type OrganizationInvitationCreateOrConnectWithoutOrganizationInput = {
    where: OrganizationInvitationWhereUniqueInput
    create: XOR<OrganizationInvitationCreateWithoutOrganizationInput, OrganizationInvitationUncheckedCreateWithoutOrganizationInput>
  }

  export type OrganizationInvitationCreateManyOrganizationInputEnvelope = {
    data: OrganizationInvitationCreateManyOrganizationInput | OrganizationInvitationCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationMemberUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: OrganizationMemberWhereUniqueInput
    update: XOR<OrganizationMemberUpdateWithoutOrganizationInput, OrganizationMemberUncheckedUpdateWithoutOrganizationInput>
    create: XOR<OrganizationMemberCreateWithoutOrganizationInput, OrganizationMemberUncheckedCreateWithoutOrganizationInput>
  }

  export type OrganizationMemberUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: OrganizationMemberWhereUniqueInput
    data: XOR<OrganizationMemberUpdateWithoutOrganizationInput, OrganizationMemberUncheckedUpdateWithoutOrganizationInput>
  }

  export type OrganizationMemberUpdateManyWithWhereWithoutOrganizationInput = {
    where: OrganizationMemberScalarWhereInput
    data: XOR<OrganizationMemberUpdateManyMutationInput, OrganizationMemberUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutOrganizationInput, ProjectUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutOrganizationInput, ProjectUncheckedUpdateWithoutOrganizationInput>
  }

  export type ProjectUpdateManyWithWhereWithoutOrganizationInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    organizationId?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
  }

  export type OrganizationInvitationUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: OrganizationInvitationWhereUniqueInput
    update: XOR<OrganizationInvitationUpdateWithoutOrganizationInput, OrganizationInvitationUncheckedUpdateWithoutOrganizationInput>
    create: XOR<OrganizationInvitationCreateWithoutOrganizationInput, OrganizationInvitationUncheckedCreateWithoutOrganizationInput>
  }

  export type OrganizationInvitationUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: OrganizationInvitationWhereUniqueInput
    data: XOR<OrganizationInvitationUpdateWithoutOrganizationInput, OrganizationInvitationUncheckedUpdateWithoutOrganizationInput>
  }

  export type OrganizationInvitationUpdateManyWithWhereWithoutOrganizationInput = {
    where: OrganizationInvitationScalarWhereInput
    data: XOR<OrganizationInvitationUpdateManyMutationInput, OrganizationInvitationUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type OrganizationInvitationScalarWhereInput = {
    AND?: OrganizationInvitationScalarWhereInput | OrganizationInvitationScalarWhereInput[]
    OR?: OrganizationInvitationScalarWhereInput[]
    NOT?: OrganizationInvitationScalarWhereInput | OrganizationInvitationScalarWhereInput[]
    id?: StringFilter<"OrganizationInvitation"> | string
    email?: StringFilter<"OrganizationInvitation"> | string
    organizationId?: StringFilter<"OrganizationInvitation"> | string
    role?: EnumMemberRoleFilter<"OrganizationInvitation"> | $Enums.MemberRole
    token?: StringFilter<"OrganizationInvitation"> | string
    expires?: DateTimeFilter<"OrganizationInvitation"> | Date | string
    createdAt?: DateTimeFilter<"OrganizationInvitation"> | Date | string
  }

  export type OrganizationCreateWithoutMembersInput = {
    id?: string
    name: string
    slug: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutOrganizationInput
    invitations?: OrganizationInvitationCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    slug: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: OrganizationInvitationUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutMembersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutOrganizationsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationsInput, UserUncheckedCreateWithoutOrganizationsInput>
  }

  export type OrganizationUpsertWithoutMembersInput = {
    update: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
    create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutMembersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
  }

  export type OrganizationUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutOrganizationNestedInput
    invitations?: OrganizationInvitationUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: OrganizationInvitationUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutOrganizationsInput = {
    update: XOR<UserUpdateWithoutOrganizationsInput, UserUncheckedUpdateWithoutOrganizationsInput>
    create: XOR<UserCreateWithoutOrganizationsInput, UserUncheckedCreateWithoutOrganizationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrganizationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrganizationsInput, UserUncheckedUpdateWithoutOrganizationsInput>
  }

  export type UserUpdateWithoutOrganizationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateOneWithoutUserNestedInput
  }

  export type OrganizationCreateWithoutInvitationsInput = {
    id?: string
    name: string
    slug: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: OrganizationMemberCreateNestedManyWithoutOrganizationInput
    projects?: ProjectCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutInvitationsInput = {
    id?: string
    name: string
    slug: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: OrganizationMemberUncheckedCreateNestedManyWithoutOrganizationInput
    projects?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutInvitationsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
  }

  export type OrganizationUpsertWithoutInvitationsInput = {
    update: XOR<OrganizationUpdateWithoutInvitationsInput, OrganizationUncheckedUpdateWithoutInvitationsInput>
    create: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutInvitationsInput, OrganizationUncheckedUpdateWithoutInvitationsInput>
  }

  export type OrganizationUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: OrganizationMemberUpdateManyWithoutOrganizationNestedInput
    projects?: ProjectUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: OrganizationMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutProjectsInput = {
    id?: string
    name: string
    slug: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: OrganizationMemberCreateNestedManyWithoutOrganizationInput
    invitations?: OrganizationInvitationCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutProjectsInput = {
    id?: string
    name: string
    slug: string
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: OrganizationMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: OrganizationInvitationUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutProjectsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutProjectsInput, OrganizationUncheckedCreateWithoutProjectsInput>
  }

  export type TaskCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
  }

  export type TaskUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    assigneeId?: string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutProjectInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskCreateManyProjectInputEnvelope = {
    data: TaskCreateManyProjectInput | TaskCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WebVMInstanceCreateNestedManyWithoutWorkspaceInput
    persistence?: WorkspacePersistenceCreateNestedOneWithoutWorkspaceInput
    files?: WorkspaceFileCreateNestedManyWithoutWorkspaceInput
    states?: WorkspaceStateCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WebVMInstanceUncheckedCreateNestedManyWithoutWorkspaceInput
    persistence?: WorkspacePersistenceUncheckedCreateNestedOneWithoutWorkspaceInput
    files?: WorkspaceFileUncheckedCreateNestedManyWithoutWorkspaceInput
    states?: WorkspaceStateUncheckedCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutProjectInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutProjectInput, WorkspaceUncheckedCreateWithoutProjectInput>
  }

  export type WorkspaceCreateManyProjectInputEnvelope = {
    data: WorkspaceCreateManyProjectInput | WorkspaceCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutProjectsInput = {
    update: XOR<OrganizationUpdateWithoutProjectsInput, OrganizationUncheckedUpdateWithoutProjectsInput>
    create: XOR<OrganizationCreateWithoutProjectsInput, OrganizationUncheckedCreateWithoutProjectsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutProjectsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutProjectsInput, OrganizationUncheckedUpdateWithoutProjectsInput>
  }

  export type OrganizationUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: OrganizationMemberUpdateManyWithoutOrganizationNestedInput
    invitations?: OrganizationInvitationUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: OrganizationMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: OrganizationInvitationUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
  }

  export type TaskUpdateManyWithWhereWithoutProjectInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutProjectInput>
  }

  export type WorkspaceUpsertWithWhereUniqueWithoutProjectInput = {
    where: WorkspaceWhereUniqueInput
    update: XOR<WorkspaceUpdateWithoutProjectInput, WorkspaceUncheckedUpdateWithoutProjectInput>
    create: XOR<WorkspaceCreateWithoutProjectInput, WorkspaceUncheckedCreateWithoutProjectInput>
  }

  export type WorkspaceUpdateWithWhereUniqueWithoutProjectInput = {
    where: WorkspaceWhereUniqueInput
    data: XOR<WorkspaceUpdateWithoutProjectInput, WorkspaceUncheckedUpdateWithoutProjectInput>
  }

  export type WorkspaceUpdateManyWithWhereWithoutProjectInput = {
    where: WorkspaceScalarWhereInput
    data: XOR<WorkspaceUpdateManyMutationInput, WorkspaceUncheckedUpdateManyWithoutProjectInput>
  }

  export type WorkspaceScalarWhereInput = {
    AND?: WorkspaceScalarWhereInput | WorkspaceScalarWhereInput[]
    OR?: WorkspaceScalarWhereInput[]
    NOT?: WorkspaceScalarWhereInput | WorkspaceScalarWhereInput[]
    id?: StringFilter<"Workspace"> | string
    name?: StringFilter<"Workspace"> | string
    description?: StringNullableFilter<"Workspace"> | string | null
    projectId?: StringFilter<"Workspace"> | string
    status?: EnumWorkspaceStatusFilter<"Workspace"> | $Enums.WorkspaceStatus
    config?: JsonNullableFilter<"Workspace">
    createdAt?: DateTimeFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string
  }

  export type ProjectCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    workspaces?: WorkspaceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTasksInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
  }

  export type UserCreateWithoutAssignedTasksInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedTasksInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
  }

  export type ProjectUpsertWithoutTasksInput = {
    update: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    workspaces?: WorkspaceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspaces?: WorkspaceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutAssignedTasksInput = {
    update: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type UserUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ProjectCreateWithoutWorkspacesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutWorkspacesInput = {
    id?: string
    name: string
    description?: string | null
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutWorkspacesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutWorkspacesInput, ProjectUncheckedCreateWithoutWorkspacesInput>
  }

  export type WebVMInstanceCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    metrics?: WebVMMetricCreateNestedManyWithoutInstanceInput
    snapshots?: WebVMSnapshotCreateNestedManyWithoutInstanceInput
    template?: WebVMTemplateCreateNestedOneWithoutInstancesInput
  }

  export type WebVMInstanceUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    templateId?: string | null
    metrics?: WebVMMetricUncheckedCreateNestedManyWithoutInstanceInput
    snapshots?: WebVMSnapshotUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type WebVMInstanceCreateOrConnectWithoutWorkspaceInput = {
    where: WebVMInstanceWhereUniqueInput
    create: XOR<WebVMInstanceCreateWithoutWorkspaceInput, WebVMInstanceUncheckedCreateWithoutWorkspaceInput>
  }

  export type WebVMInstanceCreateManyWorkspaceInputEnvelope = {
    data: WebVMInstanceCreateManyWorkspaceInput | WebVMInstanceCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type WorkspacePersistenceCreateWithoutWorkspaceInput = {
    id?: string
    storageSize?: bigint | number
    backupCount?: number
    lastBackup?: Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspacePersistenceUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    storageSize?: bigint | number
    backupCount?: number
    lastBackup?: Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspacePersistenceCreateOrConnectWithoutWorkspaceInput = {
    where: WorkspacePersistenceWhereUniqueInput
    create: XOR<WorkspacePersistenceCreateWithoutWorkspaceInput, WorkspacePersistenceUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceFileCreateWithoutWorkspaceInput = {
    id?: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
    parent?: WorkspaceFileCreateNestedOneWithoutChildrenInput
    children?: WorkspaceFileCreateNestedManyWithoutParentInput
    indexes?: FileIndexCreateNestedManyWithoutWorkspaceFileInput
  }

  export type WorkspaceFileUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    parentId?: string | null
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
    children?: WorkspaceFileUncheckedCreateNestedManyWithoutParentInput
    indexes?: FileIndexUncheckedCreateNestedManyWithoutWorkspaceFileInput
  }

  export type WorkspaceFileCreateOrConnectWithoutWorkspaceInput = {
    where: WorkspaceFileWhereUniqueInput
    create: XOR<WorkspaceFileCreateWithoutWorkspaceInput, WorkspaceFileUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceFileCreateManyWorkspaceInputEnvelope = {
    data: WorkspaceFileCreateManyWorkspaceInput | WorkspaceFileCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceStateCreateWithoutWorkspaceInput = {
    id?: string
    sessionId: string
    environment: JsonNullValueInput | InputJsonValue
    processes: JsonNullValueInput | InputJsonValue
    openFiles: JsonNullValueInput | InputJsonValue
    terminalSessions: JsonNullValueInput | InputJsonValue
    editorState: JsonNullValueInput | InputJsonValue
    gitState: JsonNullValueInput | InputJsonValue
    installedPackages: JsonNullValueInput | InputJsonValue
    customSettings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceStateUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    sessionId: string
    environment: JsonNullValueInput | InputJsonValue
    processes: JsonNullValueInput | InputJsonValue
    openFiles: JsonNullValueInput | InputJsonValue
    terminalSessions: JsonNullValueInput | InputJsonValue
    editorState: JsonNullValueInput | InputJsonValue
    gitState: JsonNullValueInput | InputJsonValue
    installedPackages: JsonNullValueInput | InputJsonValue
    customSettings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceStateCreateOrConnectWithoutWorkspaceInput = {
    where: WorkspaceStateWhereUniqueInput
    create: XOR<WorkspaceStateCreateWithoutWorkspaceInput, WorkspaceStateUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceStateCreateManyWorkspaceInputEnvelope = {
    data: WorkspaceStateCreateManyWorkspaceInput | WorkspaceStateCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceSyncCreateWithoutWorkspaceInput = {
    id?: string
    type?: $Enums.SyncType
    status?: $Enums.SyncStatus
    direction: string
    source: JsonNullValueInput | InputJsonValue
    target: JsonNullValueInput | InputJsonValue
    progress: JsonNullValueInput | InputJsonValue
    conflicts: JsonNullValueInput | InputJsonValue
    lastSync?: Date | string | null
    nextSync?: Date | string | null
    settings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceSyncUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    type?: $Enums.SyncType
    status?: $Enums.SyncStatus
    direction: string
    source: JsonNullValueInput | InputJsonValue
    target: JsonNullValueInput | InputJsonValue
    progress: JsonNullValueInput | InputJsonValue
    conflicts: JsonNullValueInput | InputJsonValue
    lastSync?: Date | string | null
    nextSync?: Date | string | null
    settings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceSyncCreateOrConnectWithoutWorkspaceInput = {
    where: WorkspaceSyncWhereUniqueInput
    create: XOR<WorkspaceSyncCreateWithoutWorkspaceInput, WorkspaceSyncUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceSyncCreateManyWorkspaceInputEnvelope = {
    data: WorkspaceSyncCreateManyWorkspaceInput | WorkspaceSyncCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutWorkspacesInput = {
    update: XOR<ProjectUpdateWithoutWorkspacesInput, ProjectUncheckedUpdateWithoutWorkspacesInput>
    create: XOR<ProjectCreateWithoutWorkspacesInput, ProjectUncheckedCreateWithoutWorkspacesInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutWorkspacesInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutWorkspacesInput, ProjectUncheckedUpdateWithoutWorkspacesInput>
  }

  export type ProjectUpdateWithoutWorkspacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutWorkspacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type WebVMInstanceUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: WebVMInstanceWhereUniqueInput
    update: XOR<WebVMInstanceUpdateWithoutWorkspaceInput, WebVMInstanceUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<WebVMInstanceCreateWithoutWorkspaceInput, WebVMInstanceUncheckedCreateWithoutWorkspaceInput>
  }

  export type WebVMInstanceUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: WebVMInstanceWhereUniqueInput
    data: XOR<WebVMInstanceUpdateWithoutWorkspaceInput, WebVMInstanceUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WebVMInstanceUpdateManyWithWhereWithoutWorkspaceInput = {
    where: WebVMInstanceScalarWhereInput
    data: XOR<WebVMInstanceUpdateManyMutationInput, WebVMInstanceUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type WebVMInstanceScalarWhereInput = {
    AND?: WebVMInstanceScalarWhereInput | WebVMInstanceScalarWhereInput[]
    OR?: WebVMInstanceScalarWhereInput[]
    NOT?: WebVMInstanceScalarWhereInput | WebVMInstanceScalarWhereInput[]
    id?: StringFilter<"WebVMInstance"> | string
    name?: StringFilter<"WebVMInstance"> | string
    workspaceId?: StringFilter<"WebVMInstance"> | string
    status?: EnumWebVMStatusFilter<"WebVMInstance"> | $Enums.WebVMStatus
    imageUrl?: StringNullableFilter<"WebVMInstance"> | string | null
    config?: JsonNullableFilter<"WebVMInstance">
    resources?: JsonNullableFilter<"WebVMInstance">
    networkConfig?: JsonNullableFilter<"WebVMInstance">
    connectionUrl?: StringNullableFilter<"WebVMInstance"> | string | null
    createdAt?: DateTimeFilter<"WebVMInstance"> | Date | string
    updatedAt?: DateTimeFilter<"WebVMInstance"> | Date | string
    startedAt?: DateTimeNullableFilter<"WebVMInstance"> | Date | string | null
    stoppedAt?: DateTimeNullableFilter<"WebVMInstance"> | Date | string | null
    templateId?: StringNullableFilter<"WebVMInstance"> | string | null
  }

  export type WorkspacePersistenceUpsertWithoutWorkspaceInput = {
    update: XOR<WorkspacePersistenceUpdateWithoutWorkspaceInput, WorkspacePersistenceUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<WorkspacePersistenceCreateWithoutWorkspaceInput, WorkspacePersistenceUncheckedCreateWithoutWorkspaceInput>
    where?: WorkspacePersistenceWhereInput
  }

  export type WorkspacePersistenceUpdateToOneWithWhereWithoutWorkspaceInput = {
    where?: WorkspacePersistenceWhereInput
    data: XOR<WorkspacePersistenceUpdateWithoutWorkspaceInput, WorkspacePersistenceUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WorkspacePersistenceUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    storageSize?: BigIntFieldUpdateOperationsInput | bigint | number
    backupCount?: IntFieldUpdateOperationsInput | number
    lastBackup?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspacePersistenceUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    storageSize?: BigIntFieldUpdateOperationsInput | bigint | number
    backupCount?: IntFieldUpdateOperationsInput | number
    lastBackup?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceFileUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceFileWhereUniqueInput
    update: XOR<WorkspaceFileUpdateWithoutWorkspaceInput, WorkspaceFileUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<WorkspaceFileCreateWithoutWorkspaceInput, WorkspaceFileUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceFileUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceFileWhereUniqueInput
    data: XOR<WorkspaceFileUpdateWithoutWorkspaceInput, WorkspaceFileUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WorkspaceFileUpdateManyWithWhereWithoutWorkspaceInput = {
    where: WorkspaceFileScalarWhereInput
    data: XOR<WorkspaceFileUpdateManyMutationInput, WorkspaceFileUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type WorkspaceFileScalarWhereInput = {
    AND?: WorkspaceFileScalarWhereInput | WorkspaceFileScalarWhereInput[]
    OR?: WorkspaceFileScalarWhereInput[]
    NOT?: WorkspaceFileScalarWhereInput | WorkspaceFileScalarWhereInput[]
    id?: StringFilter<"WorkspaceFile"> | string
    workspaceId?: StringFilter<"WorkspaceFile"> | string
    path?: StringFilter<"WorkspaceFile"> | string
    name?: StringFilter<"WorkspaceFile"> | string
    type?: StringFilter<"WorkspaceFile"> | string
    size?: BigIntFilter<"WorkspaceFile"> | bigint | number
    mimeType?: StringFilter<"WorkspaceFile"> | string
    encoding?: StringFilter<"WorkspaceFile"> | string
    content?: StringNullableFilter<"WorkspaceFile"> | string | null
    hash?: StringFilter<"WorkspaceFile"> | string
    parentId?: StringNullableFilter<"WorkspaceFile"> | string | null
    isDirectory?: BoolFilter<"WorkspaceFile"> | boolean
    permissions?: JsonFilter<"WorkspaceFile">
    metadata?: JsonFilter<"WorkspaceFile">
    version?: IntFilter<"WorkspaceFile"> | number
    createdAt?: DateTimeFilter<"WorkspaceFile"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceFile"> | Date | string
    lastAccessedAt?: DateTimeFilter<"WorkspaceFile"> | Date | string
  }

  export type WorkspaceStateUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceStateWhereUniqueInput
    update: XOR<WorkspaceStateUpdateWithoutWorkspaceInput, WorkspaceStateUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<WorkspaceStateCreateWithoutWorkspaceInput, WorkspaceStateUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceStateUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceStateWhereUniqueInput
    data: XOR<WorkspaceStateUpdateWithoutWorkspaceInput, WorkspaceStateUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WorkspaceStateUpdateManyWithWhereWithoutWorkspaceInput = {
    where: WorkspaceStateScalarWhereInput
    data: XOR<WorkspaceStateUpdateManyMutationInput, WorkspaceStateUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type WorkspaceStateScalarWhereInput = {
    AND?: WorkspaceStateScalarWhereInput | WorkspaceStateScalarWhereInput[]
    OR?: WorkspaceStateScalarWhereInput[]
    NOT?: WorkspaceStateScalarWhereInput | WorkspaceStateScalarWhereInput[]
    id?: StringFilter<"WorkspaceState"> | string
    workspaceId?: StringFilter<"WorkspaceState"> | string
    sessionId?: StringFilter<"WorkspaceState"> | string
    environment?: JsonFilter<"WorkspaceState">
    processes?: JsonFilter<"WorkspaceState">
    openFiles?: JsonFilter<"WorkspaceState">
    terminalSessions?: JsonFilter<"WorkspaceState">
    editorState?: JsonFilter<"WorkspaceState">
    gitState?: JsonFilter<"WorkspaceState">
    installedPackages?: JsonFilter<"WorkspaceState">
    customSettings?: JsonFilter<"WorkspaceState">
    createdAt?: DateTimeFilter<"WorkspaceState"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceState"> | Date | string
  }

  export type WorkspaceSyncUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceSyncWhereUniqueInput
    update: XOR<WorkspaceSyncUpdateWithoutWorkspaceInput, WorkspaceSyncUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<WorkspaceSyncCreateWithoutWorkspaceInput, WorkspaceSyncUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceSyncUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceSyncWhereUniqueInput
    data: XOR<WorkspaceSyncUpdateWithoutWorkspaceInput, WorkspaceSyncUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WorkspaceSyncUpdateManyWithWhereWithoutWorkspaceInput = {
    where: WorkspaceSyncScalarWhereInput
    data: XOR<WorkspaceSyncUpdateManyMutationInput, WorkspaceSyncUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type WorkspaceSyncScalarWhereInput = {
    AND?: WorkspaceSyncScalarWhereInput | WorkspaceSyncScalarWhereInput[]
    OR?: WorkspaceSyncScalarWhereInput[]
    NOT?: WorkspaceSyncScalarWhereInput | WorkspaceSyncScalarWhereInput[]
    id?: StringFilter<"WorkspaceSync"> | string
    workspaceId?: StringFilter<"WorkspaceSync"> | string
    type?: EnumSyncTypeFilter<"WorkspaceSync"> | $Enums.SyncType
    status?: EnumSyncStatusFilter<"WorkspaceSync"> | $Enums.SyncStatus
    direction?: StringFilter<"WorkspaceSync"> | string
    source?: JsonFilter<"WorkspaceSync">
    target?: JsonFilter<"WorkspaceSync">
    progress?: JsonFilter<"WorkspaceSync">
    conflicts?: JsonFilter<"WorkspaceSync">
    lastSync?: DateTimeNullableFilter<"WorkspaceSync"> | Date | string | null
    nextSync?: DateTimeNullableFilter<"WorkspaceSync"> | Date | string | null
    settings?: JsonFilter<"WorkspaceSync">
    createdAt?: DateTimeFilter<"WorkspaceSync"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceSync"> | Date | string
  }

  export type WorkspaceCreateWithoutInstancesInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutWorkspacesInput
    persistence?: WorkspacePersistenceCreateNestedOneWithoutWorkspaceInput
    files?: WorkspaceFileCreateNestedManyWithoutWorkspaceInput
    states?: WorkspaceStateCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutInstancesInput = {
    id?: string
    name: string
    description?: string | null
    projectId: string
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    persistence?: WorkspacePersistenceUncheckedCreateNestedOneWithoutWorkspaceInput
    files?: WorkspaceFileUncheckedCreateNestedManyWithoutWorkspaceInput
    states?: WorkspaceStateUncheckedCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutInstancesInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutInstancesInput, WorkspaceUncheckedCreateWithoutInstancesInput>
  }

  export type WebVMMetricCreateWithoutInstanceInput = {
    id?: string
    metricType: $Enums.MetricType
    value: number
    unit: string
    timestamp?: Date | string
  }

  export type WebVMMetricUncheckedCreateWithoutInstanceInput = {
    id?: string
    metricType: $Enums.MetricType
    value: number
    unit: string
    timestamp?: Date | string
  }

  export type WebVMMetricCreateOrConnectWithoutInstanceInput = {
    where: WebVMMetricWhereUniqueInput
    create: XOR<WebVMMetricCreateWithoutInstanceInput, WebVMMetricUncheckedCreateWithoutInstanceInput>
  }

  export type WebVMMetricCreateManyInstanceInputEnvelope = {
    data: WebVMMetricCreateManyInstanceInput | WebVMMetricCreateManyInstanceInput[]
    skipDuplicates?: boolean
  }

  export type WebVMSnapshotCreateWithoutInstanceInput = {
    id?: string
    name: string
    description?: string | null
    size: bigint | number
    createdAt?: Date | string
  }

  export type WebVMSnapshotUncheckedCreateWithoutInstanceInput = {
    id?: string
    name: string
    description?: string | null
    size: bigint | number
    createdAt?: Date | string
  }

  export type WebVMSnapshotCreateOrConnectWithoutInstanceInput = {
    where: WebVMSnapshotWhereUniqueInput
    create: XOR<WebVMSnapshotCreateWithoutInstanceInput, WebVMSnapshotUncheckedCreateWithoutInstanceInput>
  }

  export type WebVMSnapshotCreateManyInstanceInputEnvelope = {
    data: WebVMSnapshotCreateManyInstanceInput | WebVMSnapshotCreateManyInstanceInput[]
    skipDuplicates?: boolean
  }

  export type WebVMTemplateCreateWithoutInstancesInput = {
    id?: string
    name: string
    description?: string | null
    image: string
    memory?: string
    cpuCount?: number
    diskSize?: string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebVMTemplateUncheckedCreateWithoutInstancesInput = {
    id?: string
    name: string
    description?: string | null
    image: string
    memory?: string
    cpuCount?: number
    diskSize?: string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebVMTemplateCreateOrConnectWithoutInstancesInput = {
    where: WebVMTemplateWhereUniqueInput
    create: XOR<WebVMTemplateCreateWithoutInstancesInput, WebVMTemplateUncheckedCreateWithoutInstancesInput>
  }

  export type WorkspaceUpsertWithoutInstancesInput = {
    update: XOR<WorkspaceUpdateWithoutInstancesInput, WorkspaceUncheckedUpdateWithoutInstancesInput>
    create: XOR<WorkspaceCreateWithoutInstancesInput, WorkspaceUncheckedCreateWithoutInstancesInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutInstancesInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutInstancesInput, WorkspaceUncheckedUpdateWithoutInstancesInput>
  }

  export type WorkspaceUpdateWithoutInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutWorkspacesNestedInput
    persistence?: WorkspacePersistenceUpdateOneWithoutWorkspaceNestedInput
    files?: WorkspaceFileUpdateManyWithoutWorkspaceNestedInput
    states?: WorkspaceStateUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    persistence?: WorkspacePersistenceUncheckedUpdateOneWithoutWorkspaceNestedInput
    files?: WorkspaceFileUncheckedUpdateManyWithoutWorkspaceNestedInput
    states?: WorkspaceStateUncheckedUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WebVMMetricUpsertWithWhereUniqueWithoutInstanceInput = {
    where: WebVMMetricWhereUniqueInput
    update: XOR<WebVMMetricUpdateWithoutInstanceInput, WebVMMetricUncheckedUpdateWithoutInstanceInput>
    create: XOR<WebVMMetricCreateWithoutInstanceInput, WebVMMetricUncheckedCreateWithoutInstanceInput>
  }

  export type WebVMMetricUpdateWithWhereUniqueWithoutInstanceInput = {
    where: WebVMMetricWhereUniqueInput
    data: XOR<WebVMMetricUpdateWithoutInstanceInput, WebVMMetricUncheckedUpdateWithoutInstanceInput>
  }

  export type WebVMMetricUpdateManyWithWhereWithoutInstanceInput = {
    where: WebVMMetricScalarWhereInput
    data: XOR<WebVMMetricUpdateManyMutationInput, WebVMMetricUncheckedUpdateManyWithoutInstanceInput>
  }

  export type WebVMMetricScalarWhereInput = {
    AND?: WebVMMetricScalarWhereInput | WebVMMetricScalarWhereInput[]
    OR?: WebVMMetricScalarWhereInput[]
    NOT?: WebVMMetricScalarWhereInput | WebVMMetricScalarWhereInput[]
    id?: StringFilter<"WebVMMetric"> | string
    instanceId?: StringFilter<"WebVMMetric"> | string
    metricType?: EnumMetricTypeFilter<"WebVMMetric"> | $Enums.MetricType
    value?: FloatFilter<"WebVMMetric"> | number
    unit?: StringFilter<"WebVMMetric"> | string
    timestamp?: DateTimeFilter<"WebVMMetric"> | Date | string
  }

  export type WebVMSnapshotUpsertWithWhereUniqueWithoutInstanceInput = {
    where: WebVMSnapshotWhereUniqueInput
    update: XOR<WebVMSnapshotUpdateWithoutInstanceInput, WebVMSnapshotUncheckedUpdateWithoutInstanceInput>
    create: XOR<WebVMSnapshotCreateWithoutInstanceInput, WebVMSnapshotUncheckedCreateWithoutInstanceInput>
  }

  export type WebVMSnapshotUpdateWithWhereUniqueWithoutInstanceInput = {
    where: WebVMSnapshotWhereUniqueInput
    data: XOR<WebVMSnapshotUpdateWithoutInstanceInput, WebVMSnapshotUncheckedUpdateWithoutInstanceInput>
  }

  export type WebVMSnapshotUpdateManyWithWhereWithoutInstanceInput = {
    where: WebVMSnapshotScalarWhereInput
    data: XOR<WebVMSnapshotUpdateManyMutationInput, WebVMSnapshotUncheckedUpdateManyWithoutInstanceInput>
  }

  export type WebVMSnapshotScalarWhereInput = {
    AND?: WebVMSnapshotScalarWhereInput | WebVMSnapshotScalarWhereInput[]
    OR?: WebVMSnapshotScalarWhereInput[]
    NOT?: WebVMSnapshotScalarWhereInput | WebVMSnapshotScalarWhereInput[]
    id?: StringFilter<"WebVMSnapshot"> | string
    instanceId?: StringFilter<"WebVMSnapshot"> | string
    name?: StringFilter<"WebVMSnapshot"> | string
    description?: StringNullableFilter<"WebVMSnapshot"> | string | null
    size?: BigIntFilter<"WebVMSnapshot"> | bigint | number
    createdAt?: DateTimeFilter<"WebVMSnapshot"> | Date | string
  }

  export type WebVMTemplateUpsertWithoutInstancesInput = {
    update: XOR<WebVMTemplateUpdateWithoutInstancesInput, WebVMTemplateUncheckedUpdateWithoutInstancesInput>
    create: XOR<WebVMTemplateCreateWithoutInstancesInput, WebVMTemplateUncheckedCreateWithoutInstancesInput>
    where?: WebVMTemplateWhereInput
  }

  export type WebVMTemplateUpdateToOneWithWhereWithoutInstancesInput = {
    where?: WebVMTemplateWhereInput
    data: XOR<WebVMTemplateUpdateWithoutInstancesInput, WebVMTemplateUncheckedUpdateWithoutInstancesInput>
  }

  export type WebVMTemplateUpdateWithoutInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    memory?: StringFieldUpdateOperationsInput | string
    cpuCount?: IntFieldUpdateOperationsInput | number
    diskSize?: StringFieldUpdateOperationsInput | string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMTemplateUncheckedUpdateWithoutInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    memory?: StringFieldUpdateOperationsInput | string
    cpuCount?: IntFieldUpdateOperationsInput | number
    diskSize?: StringFieldUpdateOperationsInput | string
    preInstalledSoftware?: NullableJsonNullValueInput | InputJsonValue
    category?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMInstanceCreateWithoutMetricsInput = {
    id?: string
    name: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    workspace: WorkspaceCreateNestedOneWithoutInstancesInput
    snapshots?: WebVMSnapshotCreateNestedManyWithoutInstanceInput
    template?: WebVMTemplateCreateNestedOneWithoutInstancesInput
  }

  export type WebVMInstanceUncheckedCreateWithoutMetricsInput = {
    id?: string
    name: string
    workspaceId: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    templateId?: string | null
    snapshots?: WebVMSnapshotUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type WebVMInstanceCreateOrConnectWithoutMetricsInput = {
    where: WebVMInstanceWhereUniqueInput
    create: XOR<WebVMInstanceCreateWithoutMetricsInput, WebVMInstanceUncheckedCreateWithoutMetricsInput>
  }

  export type WebVMInstanceUpsertWithoutMetricsInput = {
    update: XOR<WebVMInstanceUpdateWithoutMetricsInput, WebVMInstanceUncheckedUpdateWithoutMetricsInput>
    create: XOR<WebVMInstanceCreateWithoutMetricsInput, WebVMInstanceUncheckedCreateWithoutMetricsInput>
    where?: WebVMInstanceWhereInput
  }

  export type WebVMInstanceUpdateToOneWithWhereWithoutMetricsInput = {
    where?: WebVMInstanceWhereInput
    data: XOR<WebVMInstanceUpdateWithoutMetricsInput, WebVMInstanceUncheckedUpdateWithoutMetricsInput>
  }

  export type WebVMInstanceUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workspace?: WorkspaceUpdateOneRequiredWithoutInstancesNestedInput
    snapshots?: WebVMSnapshotUpdateManyWithoutInstanceNestedInput
    template?: WebVMTemplateUpdateOneWithoutInstancesNestedInput
  }

  export type WebVMInstanceUncheckedUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    snapshots?: WebVMSnapshotUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type StorageObjectCreateWithoutBucketInput = {
    id?: string
    key: string
    size: bigint | number
    contentType: string
    etag: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageObjectUncheckedCreateWithoutBucketInput = {
    id?: string
    key: string
    size: bigint | number
    contentType: string
    etag: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageObjectCreateOrConnectWithoutBucketInput = {
    where: StorageObjectWhereUniqueInput
    create: XOR<StorageObjectCreateWithoutBucketInput, StorageObjectUncheckedCreateWithoutBucketInput>
  }

  export type StorageObjectCreateManyBucketInputEnvelope = {
    data: StorageObjectCreateManyBucketInput | StorageObjectCreateManyBucketInput[]
    skipDuplicates?: boolean
  }

  export type StorageUsageCreateWithoutBucketInput = {
    id?: string
    totalSize: bigint | number
    objectCount: number
    quota?: bigint | number
    timestamp?: Date | string
  }

  export type StorageUsageUncheckedCreateWithoutBucketInput = {
    id?: string
    totalSize: bigint | number
    objectCount: number
    quota?: bigint | number
    timestamp?: Date | string
  }

  export type StorageUsageCreateOrConnectWithoutBucketInput = {
    where: StorageUsageWhereUniqueInput
    create: XOR<StorageUsageCreateWithoutBucketInput, StorageUsageUncheckedCreateWithoutBucketInput>
  }

  export type StorageUsageCreateManyBucketInputEnvelope = {
    data: StorageUsageCreateManyBucketInput | StorageUsageCreateManyBucketInput[]
    skipDuplicates?: boolean
  }

  export type StorageObjectUpsertWithWhereUniqueWithoutBucketInput = {
    where: StorageObjectWhereUniqueInput
    update: XOR<StorageObjectUpdateWithoutBucketInput, StorageObjectUncheckedUpdateWithoutBucketInput>
    create: XOR<StorageObjectCreateWithoutBucketInput, StorageObjectUncheckedCreateWithoutBucketInput>
  }

  export type StorageObjectUpdateWithWhereUniqueWithoutBucketInput = {
    where: StorageObjectWhereUniqueInput
    data: XOR<StorageObjectUpdateWithoutBucketInput, StorageObjectUncheckedUpdateWithoutBucketInput>
  }

  export type StorageObjectUpdateManyWithWhereWithoutBucketInput = {
    where: StorageObjectScalarWhereInput
    data: XOR<StorageObjectUpdateManyMutationInput, StorageObjectUncheckedUpdateManyWithoutBucketInput>
  }

  export type StorageObjectScalarWhereInput = {
    AND?: StorageObjectScalarWhereInput | StorageObjectScalarWhereInput[]
    OR?: StorageObjectScalarWhereInput[]
    NOT?: StorageObjectScalarWhereInput | StorageObjectScalarWhereInput[]
    id?: StringFilter<"StorageObject"> | string
    key?: StringFilter<"StorageObject"> | string
    bucketId?: StringFilter<"StorageObject"> | string
    size?: BigIntFilter<"StorageObject"> | bigint | number
    contentType?: StringFilter<"StorageObject"> | string
    etag?: StringFilter<"StorageObject"> | string
    metadata?: JsonNullableFilter<"StorageObject">
    createdAt?: DateTimeFilter<"StorageObject"> | Date | string
    updatedAt?: DateTimeFilter<"StorageObject"> | Date | string
  }

  export type StorageUsageUpsertWithWhereUniqueWithoutBucketInput = {
    where: StorageUsageWhereUniqueInput
    update: XOR<StorageUsageUpdateWithoutBucketInput, StorageUsageUncheckedUpdateWithoutBucketInput>
    create: XOR<StorageUsageCreateWithoutBucketInput, StorageUsageUncheckedCreateWithoutBucketInput>
  }

  export type StorageUsageUpdateWithWhereUniqueWithoutBucketInput = {
    where: StorageUsageWhereUniqueInput
    data: XOR<StorageUsageUpdateWithoutBucketInput, StorageUsageUncheckedUpdateWithoutBucketInput>
  }

  export type StorageUsageUpdateManyWithWhereWithoutBucketInput = {
    where: StorageUsageScalarWhereInput
    data: XOR<StorageUsageUpdateManyMutationInput, StorageUsageUncheckedUpdateManyWithoutBucketInput>
  }

  export type StorageUsageScalarWhereInput = {
    AND?: StorageUsageScalarWhereInput | StorageUsageScalarWhereInput[]
    OR?: StorageUsageScalarWhereInput[]
    NOT?: StorageUsageScalarWhereInput | StorageUsageScalarWhereInput[]
    id?: StringFilter<"StorageUsage"> | string
    bucketId?: StringFilter<"StorageUsage"> | string
    totalSize?: BigIntFilter<"StorageUsage"> | bigint | number
    objectCount?: IntFilter<"StorageUsage"> | number
    quota?: BigIntFilter<"StorageUsage"> | bigint | number
    timestamp?: DateTimeFilter<"StorageUsage"> | Date | string
  }

  export type StorageBucketCreateWithoutObjectsInput = {
    id?: string
    name: string
    region?: string
    versioning?: boolean
    encryption?: boolean
    size?: bigint | number
    objectCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    usage?: StorageUsageCreateNestedManyWithoutBucketInput
  }

  export type StorageBucketUncheckedCreateWithoutObjectsInput = {
    id?: string
    name: string
    region?: string
    versioning?: boolean
    encryption?: boolean
    size?: bigint | number
    objectCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    usage?: StorageUsageUncheckedCreateNestedManyWithoutBucketInput
  }

  export type StorageBucketCreateOrConnectWithoutObjectsInput = {
    where: StorageBucketWhereUniqueInput
    create: XOR<StorageBucketCreateWithoutObjectsInput, StorageBucketUncheckedCreateWithoutObjectsInput>
  }

  export type StorageBucketUpsertWithoutObjectsInput = {
    update: XOR<StorageBucketUpdateWithoutObjectsInput, StorageBucketUncheckedUpdateWithoutObjectsInput>
    create: XOR<StorageBucketCreateWithoutObjectsInput, StorageBucketUncheckedCreateWithoutObjectsInput>
    where?: StorageBucketWhereInput
  }

  export type StorageBucketUpdateToOneWithWhereWithoutObjectsInput = {
    where?: StorageBucketWhereInput
    data: XOR<StorageBucketUpdateWithoutObjectsInput, StorageBucketUncheckedUpdateWithoutObjectsInput>
  }

  export type StorageBucketUpdateWithoutObjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    versioning?: BoolFieldUpdateOperationsInput | boolean
    encryption?: BoolFieldUpdateOperationsInput | boolean
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usage?: StorageUsageUpdateManyWithoutBucketNestedInput
  }

  export type StorageBucketUncheckedUpdateWithoutObjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    versioning?: BoolFieldUpdateOperationsInput | boolean
    encryption?: BoolFieldUpdateOperationsInput | boolean
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usage?: StorageUsageUncheckedUpdateManyWithoutBucketNestedInput
  }

  export type StorageBucketCreateWithoutUsageInput = {
    id?: string
    name: string
    region?: string
    versioning?: boolean
    encryption?: boolean
    size?: bigint | number
    objectCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    objects?: StorageObjectCreateNestedManyWithoutBucketInput
  }

  export type StorageBucketUncheckedCreateWithoutUsageInput = {
    id?: string
    name: string
    region?: string
    versioning?: boolean
    encryption?: boolean
    size?: bigint | number
    objectCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    objects?: StorageObjectUncheckedCreateNestedManyWithoutBucketInput
  }

  export type StorageBucketCreateOrConnectWithoutUsageInput = {
    where: StorageBucketWhereUniqueInput
    create: XOR<StorageBucketCreateWithoutUsageInput, StorageBucketUncheckedCreateWithoutUsageInput>
  }

  export type StorageBucketUpsertWithoutUsageInput = {
    update: XOR<StorageBucketUpdateWithoutUsageInput, StorageBucketUncheckedUpdateWithoutUsageInput>
    create: XOR<StorageBucketCreateWithoutUsageInput, StorageBucketUncheckedCreateWithoutUsageInput>
    where?: StorageBucketWhereInput
  }

  export type StorageBucketUpdateToOneWithWhereWithoutUsageInput = {
    where?: StorageBucketWhereInput
    data: XOR<StorageBucketUpdateWithoutUsageInput, StorageBucketUncheckedUpdateWithoutUsageInput>
  }

  export type StorageBucketUpdateWithoutUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    versioning?: BoolFieldUpdateOperationsInput | boolean
    encryption?: BoolFieldUpdateOperationsInput | boolean
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    objects?: StorageObjectUpdateManyWithoutBucketNestedInput
  }

  export type StorageBucketUncheckedUpdateWithoutUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    versioning?: BoolFieldUpdateOperationsInput | boolean
    encryption?: BoolFieldUpdateOperationsInput | boolean
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    objects?: StorageObjectUncheckedUpdateManyWithoutBucketNestedInput
  }

  export type ContainerStatsCreateWithoutContainerInput = {
    id?: string
    cpuPercent: number
    memoryUsage: bigint | number
    memoryLimit: bigint | number
    networkRx: bigint | number
    networkTx: bigint | number
    blockRead: bigint | number
    blockWrite: bigint | number
    timestamp?: Date | string
  }

  export type ContainerStatsUncheckedCreateWithoutContainerInput = {
    id?: string
    cpuPercent: number
    memoryUsage: bigint | number
    memoryLimit: bigint | number
    networkRx: bigint | number
    networkTx: bigint | number
    blockRead: bigint | number
    blockWrite: bigint | number
    timestamp?: Date | string
  }

  export type ContainerStatsCreateOrConnectWithoutContainerInput = {
    where: ContainerStatsWhereUniqueInput
    create: XOR<ContainerStatsCreateWithoutContainerInput, ContainerStatsUncheckedCreateWithoutContainerInput>
  }

  export type ContainerStatsCreateManyContainerInputEnvelope = {
    data: ContainerStatsCreateManyContainerInput | ContainerStatsCreateManyContainerInput[]
    skipDuplicates?: boolean
  }

  export type ContainerLogCreateWithoutContainerInput = {
    id?: string
    message: string
    level?: $Enums.LogLevel
    timestamp?: Date | string
  }

  export type ContainerLogUncheckedCreateWithoutContainerInput = {
    id?: string
    message: string
    level?: $Enums.LogLevel
    timestamp?: Date | string
  }

  export type ContainerLogCreateOrConnectWithoutContainerInput = {
    where: ContainerLogWhereUniqueInput
    create: XOR<ContainerLogCreateWithoutContainerInput, ContainerLogUncheckedCreateWithoutContainerInput>
  }

  export type ContainerLogCreateManyContainerInputEnvelope = {
    data: ContainerLogCreateManyContainerInput | ContainerLogCreateManyContainerInput[]
    skipDuplicates?: boolean
  }

  export type ContainerStatsUpsertWithWhereUniqueWithoutContainerInput = {
    where: ContainerStatsWhereUniqueInput
    update: XOR<ContainerStatsUpdateWithoutContainerInput, ContainerStatsUncheckedUpdateWithoutContainerInput>
    create: XOR<ContainerStatsCreateWithoutContainerInput, ContainerStatsUncheckedCreateWithoutContainerInput>
  }

  export type ContainerStatsUpdateWithWhereUniqueWithoutContainerInput = {
    where: ContainerStatsWhereUniqueInput
    data: XOR<ContainerStatsUpdateWithoutContainerInput, ContainerStatsUncheckedUpdateWithoutContainerInput>
  }

  export type ContainerStatsUpdateManyWithWhereWithoutContainerInput = {
    where: ContainerStatsScalarWhereInput
    data: XOR<ContainerStatsUpdateManyMutationInput, ContainerStatsUncheckedUpdateManyWithoutContainerInput>
  }

  export type ContainerStatsScalarWhereInput = {
    AND?: ContainerStatsScalarWhereInput | ContainerStatsScalarWhereInput[]
    OR?: ContainerStatsScalarWhereInput[]
    NOT?: ContainerStatsScalarWhereInput | ContainerStatsScalarWhereInput[]
    id?: StringFilter<"ContainerStats"> | string
    containerId?: StringFilter<"ContainerStats"> | string
    cpuPercent?: FloatFilter<"ContainerStats"> | number
    memoryUsage?: BigIntFilter<"ContainerStats"> | bigint | number
    memoryLimit?: BigIntFilter<"ContainerStats"> | bigint | number
    networkRx?: BigIntFilter<"ContainerStats"> | bigint | number
    networkTx?: BigIntFilter<"ContainerStats"> | bigint | number
    blockRead?: BigIntFilter<"ContainerStats"> | bigint | number
    blockWrite?: BigIntFilter<"ContainerStats"> | bigint | number
    timestamp?: DateTimeFilter<"ContainerStats"> | Date | string
  }

  export type ContainerLogUpsertWithWhereUniqueWithoutContainerInput = {
    where: ContainerLogWhereUniqueInput
    update: XOR<ContainerLogUpdateWithoutContainerInput, ContainerLogUncheckedUpdateWithoutContainerInput>
    create: XOR<ContainerLogCreateWithoutContainerInput, ContainerLogUncheckedCreateWithoutContainerInput>
  }

  export type ContainerLogUpdateWithWhereUniqueWithoutContainerInput = {
    where: ContainerLogWhereUniqueInput
    data: XOR<ContainerLogUpdateWithoutContainerInput, ContainerLogUncheckedUpdateWithoutContainerInput>
  }

  export type ContainerLogUpdateManyWithWhereWithoutContainerInput = {
    where: ContainerLogScalarWhereInput
    data: XOR<ContainerLogUpdateManyMutationInput, ContainerLogUncheckedUpdateManyWithoutContainerInput>
  }

  export type ContainerLogScalarWhereInput = {
    AND?: ContainerLogScalarWhereInput | ContainerLogScalarWhereInput[]
    OR?: ContainerLogScalarWhereInput[]
    NOT?: ContainerLogScalarWhereInput | ContainerLogScalarWhereInput[]
    id?: StringFilter<"ContainerLog"> | string
    containerId?: StringFilter<"ContainerLog"> | string
    message?: StringFilter<"ContainerLog"> | string
    level?: EnumLogLevelFilter<"ContainerLog"> | $Enums.LogLevel
    timestamp?: DateTimeFilter<"ContainerLog"> | Date | string
  }

  export type ContainerCreateWithoutStatsInput = {
    id?: string
    name: string
    image: string
    status?: $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: string
    networkMode?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    logs?: ContainerLogCreateNestedManyWithoutContainerInput
  }

  export type ContainerUncheckedCreateWithoutStatsInput = {
    id?: string
    name: string
    image: string
    status?: $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: string
    networkMode?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    logs?: ContainerLogUncheckedCreateNestedManyWithoutContainerInput
  }

  export type ContainerCreateOrConnectWithoutStatsInput = {
    where: ContainerWhereUniqueInput
    create: XOR<ContainerCreateWithoutStatsInput, ContainerUncheckedCreateWithoutStatsInput>
  }

  export type ContainerUpsertWithoutStatsInput = {
    update: XOR<ContainerUpdateWithoutStatsInput, ContainerUncheckedUpdateWithoutStatsInput>
    create: XOR<ContainerCreateWithoutStatsInput, ContainerUncheckedCreateWithoutStatsInput>
    where?: ContainerWhereInput
  }

  export type ContainerUpdateToOneWithWhereWithoutStatsInput = {
    where?: ContainerWhereInput
    data: XOR<ContainerUpdateWithoutStatsInput, ContainerUncheckedUpdateWithoutStatsInput>
  }

  export type ContainerUpdateWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumContainerStatusFieldUpdateOperationsInput | $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: StringFieldUpdateOperationsInput | string
    networkMode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logs?: ContainerLogUpdateManyWithoutContainerNestedInput
  }

  export type ContainerUncheckedUpdateWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumContainerStatusFieldUpdateOperationsInput | $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: StringFieldUpdateOperationsInput | string
    networkMode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logs?: ContainerLogUncheckedUpdateManyWithoutContainerNestedInput
  }

  export type ContainerCreateWithoutLogsInput = {
    id?: string
    name: string
    image: string
    status?: $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: string
    networkMode?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    stats?: ContainerStatsCreateNestedManyWithoutContainerInput
  }

  export type ContainerUncheckedCreateWithoutLogsInput = {
    id?: string
    name: string
    image: string
    status?: $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: string
    networkMode?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    stats?: ContainerStatsUncheckedCreateNestedManyWithoutContainerInput
  }

  export type ContainerCreateOrConnectWithoutLogsInput = {
    where: ContainerWhereUniqueInput
    create: XOR<ContainerCreateWithoutLogsInput, ContainerUncheckedCreateWithoutLogsInput>
  }

  export type ContainerUpsertWithoutLogsInput = {
    update: XOR<ContainerUpdateWithoutLogsInput, ContainerUncheckedUpdateWithoutLogsInput>
    create: XOR<ContainerCreateWithoutLogsInput, ContainerUncheckedCreateWithoutLogsInput>
    where?: ContainerWhereInput
  }

  export type ContainerUpdateToOneWithWhereWithoutLogsInput = {
    where?: ContainerWhereInput
    data: XOR<ContainerUpdateWithoutLogsInput, ContainerUncheckedUpdateWithoutLogsInput>
  }

  export type ContainerUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumContainerStatusFieldUpdateOperationsInput | $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: StringFieldUpdateOperationsInput | string
    networkMode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stats?: ContainerStatsUpdateManyWithoutContainerNestedInput
  }

  export type ContainerUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumContainerStatusFieldUpdateOperationsInput | $Enums.ContainerStatus
    command?: NullableJsonNullValueInput | InputJsonValue
    environment?: NullableJsonNullValueInput | InputJsonValue
    ports?: NullableJsonNullValueInput | InputJsonValue
    volumes?: NullableJsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    restartPolicy?: StringFieldUpdateOperationsInput | string
    networkMode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stats?: ContainerStatsUncheckedUpdateManyWithoutContainerNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberCreateNestedManyWithoutUserInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    preferences?: UserPreferenceCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    organizations?: OrganizationMemberUncheckedCreateNestedManyWithoutUserInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    preferences?: UserPreferenceUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    preferences?: UserPreferenceUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    organizations?: OrganizationMemberUncheckedUpdateManyWithoutUserNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    preferences?: UserPreferenceUncheckedUpdateOneWithoutUserNestedInput
  }

  export type WebVMInstanceCreateWithoutTemplateInput = {
    id?: string
    name: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    workspace: WorkspaceCreateNestedOneWithoutInstancesInput
    metrics?: WebVMMetricCreateNestedManyWithoutInstanceInput
    snapshots?: WebVMSnapshotCreateNestedManyWithoutInstanceInput
  }

  export type WebVMInstanceUncheckedCreateWithoutTemplateInput = {
    id?: string
    name: string
    workspaceId: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    metrics?: WebVMMetricUncheckedCreateNestedManyWithoutInstanceInput
    snapshots?: WebVMSnapshotUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type WebVMInstanceCreateOrConnectWithoutTemplateInput = {
    where: WebVMInstanceWhereUniqueInput
    create: XOR<WebVMInstanceCreateWithoutTemplateInput, WebVMInstanceUncheckedCreateWithoutTemplateInput>
  }

  export type WebVMInstanceCreateManyTemplateInputEnvelope = {
    data: WebVMInstanceCreateManyTemplateInput | WebVMInstanceCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type WebVMInstanceUpsertWithWhereUniqueWithoutTemplateInput = {
    where: WebVMInstanceWhereUniqueInput
    update: XOR<WebVMInstanceUpdateWithoutTemplateInput, WebVMInstanceUncheckedUpdateWithoutTemplateInput>
    create: XOR<WebVMInstanceCreateWithoutTemplateInput, WebVMInstanceUncheckedCreateWithoutTemplateInput>
  }

  export type WebVMInstanceUpdateWithWhereUniqueWithoutTemplateInput = {
    where: WebVMInstanceWhereUniqueInput
    data: XOR<WebVMInstanceUpdateWithoutTemplateInput, WebVMInstanceUncheckedUpdateWithoutTemplateInput>
  }

  export type WebVMInstanceUpdateManyWithWhereWithoutTemplateInput = {
    where: WebVMInstanceScalarWhereInput
    data: XOR<WebVMInstanceUpdateManyMutationInput, WebVMInstanceUncheckedUpdateManyWithoutTemplateInput>
  }

  export type WebVMInstanceCreateWithoutSnapshotsInput = {
    id?: string
    name: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    workspace: WorkspaceCreateNestedOneWithoutInstancesInput
    metrics?: WebVMMetricCreateNestedManyWithoutInstanceInput
    template?: WebVMTemplateCreateNestedOneWithoutInstancesInput
  }

  export type WebVMInstanceUncheckedCreateWithoutSnapshotsInput = {
    id?: string
    name: string
    workspaceId: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    templateId?: string | null
    metrics?: WebVMMetricUncheckedCreateNestedManyWithoutInstanceInput
  }

  export type WebVMInstanceCreateOrConnectWithoutSnapshotsInput = {
    where: WebVMInstanceWhereUniqueInput
    create: XOR<WebVMInstanceCreateWithoutSnapshotsInput, WebVMInstanceUncheckedCreateWithoutSnapshotsInput>
  }

  export type WebVMInstanceUpsertWithoutSnapshotsInput = {
    update: XOR<WebVMInstanceUpdateWithoutSnapshotsInput, WebVMInstanceUncheckedUpdateWithoutSnapshotsInput>
    create: XOR<WebVMInstanceCreateWithoutSnapshotsInput, WebVMInstanceUncheckedCreateWithoutSnapshotsInput>
    where?: WebVMInstanceWhereInput
  }

  export type WebVMInstanceUpdateToOneWithWhereWithoutSnapshotsInput = {
    where?: WebVMInstanceWhereInput
    data: XOR<WebVMInstanceUpdateWithoutSnapshotsInput, WebVMInstanceUncheckedUpdateWithoutSnapshotsInput>
  }

  export type WebVMInstanceUpdateWithoutSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workspace?: WorkspaceUpdateOneRequiredWithoutInstancesNestedInput
    metrics?: WebVMMetricUpdateManyWithoutInstanceNestedInput
    template?: WebVMTemplateUpdateOneWithoutInstancesNestedInput
  }

  export type WebVMInstanceUncheckedUpdateWithoutSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    metrics?: WebVMMetricUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type WorkspaceCreateWithoutPersistenceInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutWorkspacesInput
    instances?: WebVMInstanceCreateNestedManyWithoutWorkspaceInput
    files?: WorkspaceFileCreateNestedManyWithoutWorkspaceInput
    states?: WorkspaceStateCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutPersistenceInput = {
    id?: string
    name: string
    description?: string | null
    projectId: string
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WebVMInstanceUncheckedCreateNestedManyWithoutWorkspaceInput
    files?: WorkspaceFileUncheckedCreateNestedManyWithoutWorkspaceInput
    states?: WorkspaceStateUncheckedCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutPersistenceInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutPersistenceInput, WorkspaceUncheckedCreateWithoutPersistenceInput>
  }

  export type WorkspaceUpsertWithoutPersistenceInput = {
    update: XOR<WorkspaceUpdateWithoutPersistenceInput, WorkspaceUncheckedUpdateWithoutPersistenceInput>
    create: XOR<WorkspaceCreateWithoutPersistenceInput, WorkspaceUncheckedCreateWithoutPersistenceInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutPersistenceInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutPersistenceInput, WorkspaceUncheckedUpdateWithoutPersistenceInput>
  }

  export type WorkspaceUpdateWithoutPersistenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutWorkspacesNestedInput
    instances?: WebVMInstanceUpdateManyWithoutWorkspaceNestedInput
    files?: WorkspaceFileUpdateManyWithoutWorkspaceNestedInput
    states?: WorkspaceStateUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutPersistenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WebVMInstanceUncheckedUpdateManyWithoutWorkspaceNestedInput
    files?: WorkspaceFileUncheckedUpdateManyWithoutWorkspaceNestedInput
    states?: WorkspaceStateUncheckedUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type AlertNotificationCreateWithoutAlertInput = {
    id?: string
    type?: $Enums.NotificationType
    recipient: string
    message: string
    sentAt?: Date | string
  }

  export type AlertNotificationUncheckedCreateWithoutAlertInput = {
    id?: string
    type?: $Enums.NotificationType
    recipient: string
    message: string
    sentAt?: Date | string
  }

  export type AlertNotificationCreateOrConnectWithoutAlertInput = {
    where: AlertNotificationWhereUniqueInput
    create: XOR<AlertNotificationCreateWithoutAlertInput, AlertNotificationUncheckedCreateWithoutAlertInput>
  }

  export type AlertNotificationCreateManyAlertInputEnvelope = {
    data: AlertNotificationCreateManyAlertInput | AlertNotificationCreateManyAlertInput[]
    skipDuplicates?: boolean
  }

  export type AlertNotificationUpsertWithWhereUniqueWithoutAlertInput = {
    where: AlertNotificationWhereUniqueInput
    update: XOR<AlertNotificationUpdateWithoutAlertInput, AlertNotificationUncheckedUpdateWithoutAlertInput>
    create: XOR<AlertNotificationCreateWithoutAlertInput, AlertNotificationUncheckedCreateWithoutAlertInput>
  }

  export type AlertNotificationUpdateWithWhereUniqueWithoutAlertInput = {
    where: AlertNotificationWhereUniqueInput
    data: XOR<AlertNotificationUpdateWithoutAlertInput, AlertNotificationUncheckedUpdateWithoutAlertInput>
  }

  export type AlertNotificationUpdateManyWithWhereWithoutAlertInput = {
    where: AlertNotificationScalarWhereInput
    data: XOR<AlertNotificationUpdateManyMutationInput, AlertNotificationUncheckedUpdateManyWithoutAlertInput>
  }

  export type AlertNotificationScalarWhereInput = {
    AND?: AlertNotificationScalarWhereInput | AlertNotificationScalarWhereInput[]
    OR?: AlertNotificationScalarWhereInput[]
    NOT?: AlertNotificationScalarWhereInput | AlertNotificationScalarWhereInput[]
    id?: StringFilter<"AlertNotification"> | string
    alertId?: StringFilter<"AlertNotification"> | string
    type?: EnumNotificationTypeFilter<"AlertNotification"> | $Enums.NotificationType
    recipient?: StringFilter<"AlertNotification"> | string
    message?: StringFilter<"AlertNotification"> | string
    sentAt?: DateTimeFilter<"AlertNotification"> | Date | string
  }

  export type InfrastructureAlertCreateWithoutNotificationsInput = {
    id?: string
    name: string
    query: string
    condition: string
    threshold: number
    duration: string
    severity?: $Enums.AlertSeverity
    state?: $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    firedAt?: Date | string | null
    resolvedAt?: Date | string | null
  }

  export type InfrastructureAlertUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    query: string
    condition: string
    threshold: number
    duration: string
    severity?: $Enums.AlertSeverity
    state?: $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    firedAt?: Date | string | null
    resolvedAt?: Date | string | null
  }

  export type InfrastructureAlertCreateOrConnectWithoutNotificationsInput = {
    where: InfrastructureAlertWhereUniqueInput
    create: XOR<InfrastructureAlertCreateWithoutNotificationsInput, InfrastructureAlertUncheckedCreateWithoutNotificationsInput>
  }

  export type InfrastructureAlertUpsertWithoutNotificationsInput = {
    update: XOR<InfrastructureAlertUpdateWithoutNotificationsInput, InfrastructureAlertUncheckedUpdateWithoutNotificationsInput>
    create: XOR<InfrastructureAlertCreateWithoutNotificationsInput, InfrastructureAlertUncheckedCreateWithoutNotificationsInput>
    where?: InfrastructureAlertWhereInput
  }

  export type InfrastructureAlertUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: InfrastructureAlertWhereInput
    data: XOR<InfrastructureAlertUpdateWithoutNotificationsInput, InfrastructureAlertUncheckedUpdateWithoutNotificationsInput>
  }

  export type InfrastructureAlertUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    threshold?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    state?: EnumAlertStateFieldUpdateOperationsInput | $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InfrastructureAlertUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    threshold?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    state?: EnumAlertStateFieldUpdateOperationsInput | $Enums.AlertState
    labels?: NullableJsonNullValueInput | InputJsonValue
    annotations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkspaceCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutWorkspacesInput
    instances?: WebVMInstanceCreateNestedManyWithoutWorkspaceInput
    persistence?: WorkspacePersistenceCreateNestedOneWithoutWorkspaceInput
    states?: WorkspaceStateCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    projectId: string
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WebVMInstanceUncheckedCreateNestedManyWithoutWorkspaceInput
    persistence?: WorkspacePersistenceUncheckedCreateNestedOneWithoutWorkspaceInput
    states?: WorkspaceStateUncheckedCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutFilesInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutFilesInput, WorkspaceUncheckedCreateWithoutFilesInput>
  }

  export type WorkspaceFileCreateWithoutChildrenInput = {
    id?: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutFilesInput
    parent?: WorkspaceFileCreateNestedOneWithoutChildrenInput
    indexes?: FileIndexCreateNestedManyWithoutWorkspaceFileInput
  }

  export type WorkspaceFileUncheckedCreateWithoutChildrenInput = {
    id?: string
    workspaceId: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    parentId?: string | null
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
    indexes?: FileIndexUncheckedCreateNestedManyWithoutWorkspaceFileInput
  }

  export type WorkspaceFileCreateOrConnectWithoutChildrenInput = {
    where: WorkspaceFileWhereUniqueInput
    create: XOR<WorkspaceFileCreateWithoutChildrenInput, WorkspaceFileUncheckedCreateWithoutChildrenInput>
  }

  export type WorkspaceFileCreateWithoutParentInput = {
    id?: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutFilesInput
    children?: WorkspaceFileCreateNestedManyWithoutParentInput
    indexes?: FileIndexCreateNestedManyWithoutWorkspaceFileInput
  }

  export type WorkspaceFileUncheckedCreateWithoutParentInput = {
    id?: string
    workspaceId: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
    children?: WorkspaceFileUncheckedCreateNestedManyWithoutParentInput
    indexes?: FileIndexUncheckedCreateNestedManyWithoutWorkspaceFileInput
  }

  export type WorkspaceFileCreateOrConnectWithoutParentInput = {
    where: WorkspaceFileWhereUniqueInput
    create: XOR<WorkspaceFileCreateWithoutParentInput, WorkspaceFileUncheckedCreateWithoutParentInput>
  }

  export type WorkspaceFileCreateManyParentInputEnvelope = {
    data: WorkspaceFileCreateManyParentInput | WorkspaceFileCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type FileIndexCreateWithoutWorkspaceFileInput = {
    id?: string
    content: string
    tokens: JsonNullValueInput | InputJsonValue
    language: string
    symbols: JsonNullValueInput | InputJsonValue
    imports: JsonNullValueInput | InputJsonValue
    exports: JsonNullValueInput | InputJsonValue
    dependencies: JsonNullValueInput | InputJsonValue
    complexity: JsonNullValueInput | InputJsonValue
    lastIndexed?: Date | string
    indexVersion?: string
  }

  export type FileIndexUncheckedCreateWithoutWorkspaceFileInput = {
    id?: string
    content: string
    tokens: JsonNullValueInput | InputJsonValue
    language: string
    symbols: JsonNullValueInput | InputJsonValue
    imports: JsonNullValueInput | InputJsonValue
    exports: JsonNullValueInput | InputJsonValue
    dependencies: JsonNullValueInput | InputJsonValue
    complexity: JsonNullValueInput | InputJsonValue
    lastIndexed?: Date | string
    indexVersion?: string
  }

  export type FileIndexCreateOrConnectWithoutWorkspaceFileInput = {
    where: FileIndexWhereUniqueInput
    create: XOR<FileIndexCreateWithoutWorkspaceFileInput, FileIndexUncheckedCreateWithoutWorkspaceFileInput>
  }

  export type FileIndexCreateManyWorkspaceFileInputEnvelope = {
    data: FileIndexCreateManyWorkspaceFileInput | FileIndexCreateManyWorkspaceFileInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceUpsertWithoutFilesInput = {
    update: XOR<WorkspaceUpdateWithoutFilesInput, WorkspaceUncheckedUpdateWithoutFilesInput>
    create: XOR<WorkspaceCreateWithoutFilesInput, WorkspaceUncheckedCreateWithoutFilesInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutFilesInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutFilesInput, WorkspaceUncheckedUpdateWithoutFilesInput>
  }

  export type WorkspaceUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutWorkspacesNestedInput
    instances?: WebVMInstanceUpdateManyWithoutWorkspaceNestedInput
    persistence?: WorkspacePersistenceUpdateOneWithoutWorkspaceNestedInput
    states?: WorkspaceStateUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WebVMInstanceUncheckedUpdateManyWithoutWorkspaceNestedInput
    persistence?: WorkspacePersistenceUncheckedUpdateOneWithoutWorkspaceNestedInput
    states?: WorkspaceStateUncheckedUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceFileUpsertWithoutChildrenInput = {
    update: XOR<WorkspaceFileUpdateWithoutChildrenInput, WorkspaceFileUncheckedUpdateWithoutChildrenInput>
    create: XOR<WorkspaceFileCreateWithoutChildrenInput, WorkspaceFileUncheckedCreateWithoutChildrenInput>
    where?: WorkspaceFileWhereInput
  }

  export type WorkspaceFileUpdateToOneWithWhereWithoutChildrenInput = {
    where?: WorkspaceFileWhereInput
    data: XOR<WorkspaceFileUpdateWithoutChildrenInput, WorkspaceFileUncheckedUpdateWithoutChildrenInput>
  }

  export type WorkspaceFileUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutFilesNestedInput
    parent?: WorkspaceFileUpdateOneWithoutChildrenNestedInput
    indexes?: FileIndexUpdateManyWithoutWorkspaceFileNestedInput
  }

  export type WorkspaceFileUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    indexes?: FileIndexUncheckedUpdateManyWithoutWorkspaceFileNestedInput
  }

  export type WorkspaceFileUpsertWithWhereUniqueWithoutParentInput = {
    where: WorkspaceFileWhereUniqueInput
    update: XOR<WorkspaceFileUpdateWithoutParentInput, WorkspaceFileUncheckedUpdateWithoutParentInput>
    create: XOR<WorkspaceFileCreateWithoutParentInput, WorkspaceFileUncheckedCreateWithoutParentInput>
  }

  export type WorkspaceFileUpdateWithWhereUniqueWithoutParentInput = {
    where: WorkspaceFileWhereUniqueInput
    data: XOR<WorkspaceFileUpdateWithoutParentInput, WorkspaceFileUncheckedUpdateWithoutParentInput>
  }

  export type WorkspaceFileUpdateManyWithWhereWithoutParentInput = {
    where: WorkspaceFileScalarWhereInput
    data: XOR<WorkspaceFileUpdateManyMutationInput, WorkspaceFileUncheckedUpdateManyWithoutParentInput>
  }

  export type FileIndexUpsertWithWhereUniqueWithoutWorkspaceFileInput = {
    where: FileIndexWhereUniqueInput
    update: XOR<FileIndexUpdateWithoutWorkspaceFileInput, FileIndexUncheckedUpdateWithoutWorkspaceFileInput>
    create: XOR<FileIndexCreateWithoutWorkspaceFileInput, FileIndexUncheckedCreateWithoutWorkspaceFileInput>
  }

  export type FileIndexUpdateWithWhereUniqueWithoutWorkspaceFileInput = {
    where: FileIndexWhereUniqueInput
    data: XOR<FileIndexUpdateWithoutWorkspaceFileInput, FileIndexUncheckedUpdateWithoutWorkspaceFileInput>
  }

  export type FileIndexUpdateManyWithWhereWithoutWorkspaceFileInput = {
    where: FileIndexScalarWhereInput
    data: XOR<FileIndexUpdateManyMutationInput, FileIndexUncheckedUpdateManyWithoutWorkspaceFileInput>
  }

  export type FileIndexScalarWhereInput = {
    AND?: FileIndexScalarWhereInput | FileIndexScalarWhereInput[]
    OR?: FileIndexScalarWhereInput[]
    NOT?: FileIndexScalarWhereInput | FileIndexScalarWhereInput[]
    id?: StringFilter<"FileIndex"> | string
    workspaceId?: StringFilter<"FileIndex"> | string
    path?: StringFilter<"FileIndex"> | string
    content?: StringFilter<"FileIndex"> | string
    tokens?: JsonFilter<"FileIndex">
    language?: StringFilter<"FileIndex"> | string
    symbols?: JsonFilter<"FileIndex">
    imports?: JsonFilter<"FileIndex">
    exports?: JsonFilter<"FileIndex">
    dependencies?: JsonFilter<"FileIndex">
    complexity?: JsonFilter<"FileIndex">
    lastIndexed?: DateTimeFilter<"FileIndex"> | Date | string
    indexVersion?: StringFilter<"FileIndex"> | string
  }

  export type WorkspaceFileCreateWithoutIndexesInput = {
    id?: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutFilesInput
    parent?: WorkspaceFileCreateNestedOneWithoutChildrenInput
    children?: WorkspaceFileCreateNestedManyWithoutParentInput
  }

  export type WorkspaceFileUncheckedCreateWithoutIndexesInput = {
    id?: string
    workspaceId: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    parentId?: string | null
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
    children?: WorkspaceFileUncheckedCreateNestedManyWithoutParentInput
  }

  export type WorkspaceFileCreateOrConnectWithoutIndexesInput = {
    where: WorkspaceFileWhereUniqueInput
    create: XOR<WorkspaceFileCreateWithoutIndexesInput, WorkspaceFileUncheckedCreateWithoutIndexesInput>
  }

  export type WorkspaceFileUpsertWithoutIndexesInput = {
    update: XOR<WorkspaceFileUpdateWithoutIndexesInput, WorkspaceFileUncheckedUpdateWithoutIndexesInput>
    create: XOR<WorkspaceFileCreateWithoutIndexesInput, WorkspaceFileUncheckedCreateWithoutIndexesInput>
    where?: WorkspaceFileWhereInput
  }

  export type WorkspaceFileUpdateToOneWithWhereWithoutIndexesInput = {
    where?: WorkspaceFileWhereInput
    data: XOR<WorkspaceFileUpdateWithoutIndexesInput, WorkspaceFileUncheckedUpdateWithoutIndexesInput>
  }

  export type WorkspaceFileUpdateWithoutIndexesInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutFilesNestedInput
    parent?: WorkspaceFileUpdateOneWithoutChildrenNestedInput
    children?: WorkspaceFileUpdateManyWithoutParentNestedInput
  }

  export type WorkspaceFileUncheckedUpdateWithoutIndexesInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: WorkspaceFileUncheckedUpdateManyWithoutParentNestedInput
  }

  export type WorkspaceCreateWithoutStatesInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutWorkspacesInput
    instances?: WebVMInstanceCreateNestedManyWithoutWorkspaceInput
    persistence?: WorkspacePersistenceCreateNestedOneWithoutWorkspaceInput
    files?: WorkspaceFileCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutStatesInput = {
    id?: string
    name: string
    description?: string | null
    projectId: string
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WebVMInstanceUncheckedCreateNestedManyWithoutWorkspaceInput
    persistence?: WorkspacePersistenceUncheckedCreateNestedOneWithoutWorkspaceInput
    files?: WorkspaceFileUncheckedCreateNestedManyWithoutWorkspaceInput
    syncs?: WorkspaceSyncUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutStatesInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutStatesInput, WorkspaceUncheckedCreateWithoutStatesInput>
  }

  export type WorkspaceUpsertWithoutStatesInput = {
    update: XOR<WorkspaceUpdateWithoutStatesInput, WorkspaceUncheckedUpdateWithoutStatesInput>
    create: XOR<WorkspaceCreateWithoutStatesInput, WorkspaceUncheckedCreateWithoutStatesInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutStatesInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutStatesInput, WorkspaceUncheckedUpdateWithoutStatesInput>
  }

  export type WorkspaceUpdateWithoutStatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutWorkspacesNestedInput
    instances?: WebVMInstanceUpdateManyWithoutWorkspaceNestedInput
    persistence?: WorkspacePersistenceUpdateOneWithoutWorkspaceNestedInput
    files?: WorkspaceFileUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutStatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WebVMInstanceUncheckedUpdateManyWithoutWorkspaceNestedInput
    persistence?: WorkspacePersistenceUncheckedUpdateOneWithoutWorkspaceNestedInput
    files?: WorkspaceFileUncheckedUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceCreateWithoutSyncsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutWorkspacesInput
    instances?: WebVMInstanceCreateNestedManyWithoutWorkspaceInput
    persistence?: WorkspacePersistenceCreateNestedOneWithoutWorkspaceInput
    files?: WorkspaceFileCreateNestedManyWithoutWorkspaceInput
    states?: WorkspaceStateCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutSyncsInput = {
    id?: string
    name: string
    description?: string | null
    projectId: string
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: WebVMInstanceUncheckedCreateNestedManyWithoutWorkspaceInput
    persistence?: WorkspacePersistenceUncheckedCreateNestedOneWithoutWorkspaceInput
    files?: WorkspaceFileUncheckedCreateNestedManyWithoutWorkspaceInput
    states?: WorkspaceStateUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutSyncsInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutSyncsInput, WorkspaceUncheckedCreateWithoutSyncsInput>
  }

  export type WorkspaceUpsertWithoutSyncsInput = {
    update: XOR<WorkspaceUpdateWithoutSyncsInput, WorkspaceUncheckedUpdateWithoutSyncsInput>
    create: XOR<WorkspaceCreateWithoutSyncsInput, WorkspaceUncheckedCreateWithoutSyncsInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutSyncsInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutSyncsInput, WorkspaceUncheckedUpdateWithoutSyncsInput>
  }

  export type WorkspaceUpdateWithoutSyncsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutWorkspacesNestedInput
    instances?: WebVMInstanceUpdateManyWithoutWorkspaceNestedInput
    persistence?: WorkspacePersistenceUpdateOneWithoutWorkspaceNestedInput
    files?: WorkspaceFileUpdateManyWithoutWorkspaceNestedInput
    states?: WorkspaceStateUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutSyncsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WebVMInstanceUncheckedUpdateManyWithoutWorkspaceNestedInput
    persistence?: WorkspacePersistenceUncheckedUpdateOneWithoutWorkspaceNestedInput
    files?: WorkspaceFileUncheckedUpdateManyWithoutWorkspaceNestedInput
    states?: WorkspaceStateUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type OrganizationMemberCreateManyUserInput = {
    id?: string
    organizationId: string
    role?: $Enums.MemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateManyAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    projectId: string
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    resource: string
    resourceId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress: string
    userAgent: string
    timestamp?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
  }

  export type OrganizationMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    projectId?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    projectId?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationMemberCreateManyOrganizationInput = {
    id?: string
    userId: string
    role?: $Enums.MemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationInvitationCreateManyOrganizationInput = {
    id?: string
    email: string
    role?: $Enums.MemberRole
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type OrganizationMemberUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrganizationsNestedInput
  }

  export type OrganizationMemberUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationMemberUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    workspaces?: WorkspaceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationInvitationUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationInvitationUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationInvitationUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.TaskPriority
    assigneeId?: string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceCreateManyProjectInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | $Enums.TaskPriority
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WebVMInstanceUpdateManyWithoutWorkspaceNestedInput
    persistence?: WorkspacePersistenceUpdateOneWithoutWorkspaceNestedInput
    files?: WorkspaceFileUpdateManyWithoutWorkspaceNestedInput
    states?: WorkspaceStateUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: WebVMInstanceUncheckedUpdateManyWithoutWorkspaceNestedInput
    persistence?: WorkspacePersistenceUncheckedUpdateOneWithoutWorkspaceNestedInput
    files?: WorkspaceFileUncheckedUpdateManyWithoutWorkspaceNestedInput
    states?: WorkspaceStateUncheckedUpdateManyWithoutWorkspaceNestedInput
    syncs?: WorkspaceSyncUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumWorkspaceStatusFieldUpdateOperationsInput | $Enums.WorkspaceStatus
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMInstanceCreateManyWorkspaceInput = {
    id?: string
    name: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
    templateId?: string | null
  }

  export type WorkspaceFileCreateManyWorkspaceInput = {
    id?: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    parentId?: string | null
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
  }

  export type WorkspaceStateCreateManyWorkspaceInput = {
    id?: string
    sessionId: string
    environment: JsonNullValueInput | InputJsonValue
    processes: JsonNullValueInput | InputJsonValue
    openFiles: JsonNullValueInput | InputJsonValue
    terminalSessions: JsonNullValueInput | InputJsonValue
    editorState: JsonNullValueInput | InputJsonValue
    gitState: JsonNullValueInput | InputJsonValue
    installedPackages: JsonNullValueInput | InputJsonValue
    customSettings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceSyncCreateManyWorkspaceInput = {
    id?: string
    type?: $Enums.SyncType
    status?: $Enums.SyncStatus
    direction: string
    source: JsonNullValueInput | InputJsonValue
    target: JsonNullValueInput | InputJsonValue
    progress: JsonNullValueInput | InputJsonValue
    conflicts: JsonNullValueInput | InputJsonValue
    lastSync?: Date | string | null
    nextSync?: Date | string | null
    settings: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebVMInstanceUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metrics?: WebVMMetricUpdateManyWithoutInstanceNestedInput
    snapshots?: WebVMSnapshotUpdateManyWithoutInstanceNestedInput
    template?: WebVMTemplateUpdateOneWithoutInstancesNestedInput
  }

  export type WebVMInstanceUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    metrics?: WebVMMetricUncheckedUpdateManyWithoutInstanceNestedInput
    snapshots?: WebVMSnapshotUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type WebVMInstanceUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkspaceFileUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: WorkspaceFileUpdateOneWithoutChildrenNestedInput
    children?: WorkspaceFileUpdateManyWithoutParentNestedInput
    indexes?: FileIndexUpdateManyWithoutWorkspaceFileNestedInput
  }

  export type WorkspaceFileUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: WorkspaceFileUncheckedUpdateManyWithoutParentNestedInput
    indexes?: FileIndexUncheckedUpdateManyWithoutWorkspaceFileNestedInput
  }

  export type WorkspaceFileUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceStateUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    environment?: JsonNullValueInput | InputJsonValue
    processes?: JsonNullValueInput | InputJsonValue
    openFiles?: JsonNullValueInput | InputJsonValue
    terminalSessions?: JsonNullValueInput | InputJsonValue
    editorState?: JsonNullValueInput | InputJsonValue
    gitState?: JsonNullValueInput | InputJsonValue
    installedPackages?: JsonNullValueInput | InputJsonValue
    customSettings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceStateUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    environment?: JsonNullValueInput | InputJsonValue
    processes?: JsonNullValueInput | InputJsonValue
    openFiles?: JsonNullValueInput | InputJsonValue
    terminalSessions?: JsonNullValueInput | InputJsonValue
    editorState?: JsonNullValueInput | InputJsonValue
    gitState?: JsonNullValueInput | InputJsonValue
    installedPackages?: JsonNullValueInput | InputJsonValue
    customSettings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceStateUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    environment?: JsonNullValueInput | InputJsonValue
    processes?: JsonNullValueInput | InputJsonValue
    openFiles?: JsonNullValueInput | InputJsonValue
    terminalSessions?: JsonNullValueInput | InputJsonValue
    editorState?: JsonNullValueInput | InputJsonValue
    gitState?: JsonNullValueInput | InputJsonValue
    installedPackages?: JsonNullValueInput | InputJsonValue
    customSettings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceSyncUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncTypeFieldUpdateOperationsInput | $Enums.SyncType
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    direction?: StringFieldUpdateOperationsInput | string
    source?: JsonNullValueInput | InputJsonValue
    target?: JsonNullValueInput | InputJsonValue
    progress?: JsonNullValueInput | InputJsonValue
    conflicts?: JsonNullValueInput | InputJsonValue
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceSyncUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncTypeFieldUpdateOperationsInput | $Enums.SyncType
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    direction?: StringFieldUpdateOperationsInput | string
    source?: JsonNullValueInput | InputJsonValue
    target?: JsonNullValueInput | InputJsonValue
    progress?: JsonNullValueInput | InputJsonValue
    conflicts?: JsonNullValueInput | InputJsonValue
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceSyncUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncTypeFieldUpdateOperationsInput | $Enums.SyncType
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    direction?: StringFieldUpdateOperationsInput | string
    source?: JsonNullValueInput | InputJsonValue
    target?: JsonNullValueInput | InputJsonValue
    progress?: JsonNullValueInput | InputJsonValue
    conflicts?: JsonNullValueInput | InputJsonValue
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMMetricCreateManyInstanceInput = {
    id?: string
    metricType: $Enums.MetricType
    value: number
    unit: string
    timestamp?: Date | string
  }

  export type WebVMSnapshotCreateManyInstanceInput = {
    id?: string
    name: string
    description?: string | null
    size: bigint | number
    createdAt?: Date | string
  }

  export type WebVMMetricUpdateWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMMetricUncheckedUpdateWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMMetricUncheckedUpdateManyWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    value?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMSnapshotUpdateWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMSnapshotUncheckedUpdateWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMSnapshotUncheckedUpdateManyWithoutInstanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageObjectCreateManyBucketInput = {
    id?: string
    key: string
    size: bigint | number
    contentType: string
    etag: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StorageUsageCreateManyBucketInput = {
    id?: string
    totalSize: bigint | number
    objectCount: number
    quota?: bigint | number
    timestamp?: Date | string
  }

  export type StorageObjectUpdateWithoutBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    contentType?: StringFieldUpdateOperationsInput | string
    etag?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageObjectUncheckedUpdateWithoutBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    contentType?: StringFieldUpdateOperationsInput | string
    etag?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageObjectUncheckedUpdateManyWithoutBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    contentType?: StringFieldUpdateOperationsInput | string
    etag?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageUsageUpdateWithoutBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalSize?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    quota?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageUsageUncheckedUpdateWithoutBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalSize?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    quota?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StorageUsageUncheckedUpdateManyWithoutBucketInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalSize?: BigIntFieldUpdateOperationsInput | bigint | number
    objectCount?: IntFieldUpdateOperationsInput | number
    quota?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerStatsCreateManyContainerInput = {
    id?: string
    cpuPercent: number
    memoryUsage: bigint | number
    memoryLimit: bigint | number
    networkRx: bigint | number
    networkTx: bigint | number
    blockRead: bigint | number
    blockWrite: bigint | number
    timestamp?: Date | string
  }

  export type ContainerLogCreateManyContainerInput = {
    id?: string
    message: string
    level?: $Enums.LogLevel
    timestamp?: Date | string
  }

  export type ContainerStatsUpdateWithoutContainerInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuPercent?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: BigIntFieldUpdateOperationsInput | bigint | number
    memoryLimit?: BigIntFieldUpdateOperationsInput | bigint | number
    networkRx?: BigIntFieldUpdateOperationsInput | bigint | number
    networkTx?: BigIntFieldUpdateOperationsInput | bigint | number
    blockRead?: BigIntFieldUpdateOperationsInput | bigint | number
    blockWrite?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerStatsUncheckedUpdateWithoutContainerInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuPercent?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: BigIntFieldUpdateOperationsInput | bigint | number
    memoryLimit?: BigIntFieldUpdateOperationsInput | bigint | number
    networkRx?: BigIntFieldUpdateOperationsInput | bigint | number
    networkTx?: BigIntFieldUpdateOperationsInput | bigint | number
    blockRead?: BigIntFieldUpdateOperationsInput | bigint | number
    blockWrite?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerStatsUncheckedUpdateManyWithoutContainerInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuPercent?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: BigIntFieldUpdateOperationsInput | bigint | number
    memoryLimit?: BigIntFieldUpdateOperationsInput | bigint | number
    networkRx?: BigIntFieldUpdateOperationsInput | bigint | number
    networkTx?: BigIntFieldUpdateOperationsInput | bigint | number
    blockRead?: BigIntFieldUpdateOperationsInput | bigint | number
    blockWrite?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerLogUpdateWithoutContainerInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerLogUncheckedUpdateWithoutContainerInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerLogUncheckedUpdateManyWithoutContainerInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebVMInstanceCreateManyTemplateInput = {
    id?: string
    name: string
    workspaceId: string
    status?: $Enums.WebVMStatus
    imageUrl?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    startedAt?: Date | string | null
    stoppedAt?: Date | string | null
  }

  export type WebVMInstanceUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workspace?: WorkspaceUpdateOneRequiredWithoutInstancesNestedInput
    metrics?: WebVMMetricUpdateManyWithoutInstanceNestedInput
    snapshots?: WebVMSnapshotUpdateManyWithoutInstanceNestedInput
  }

  export type WebVMInstanceUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metrics?: WebVMMetricUncheckedUpdateManyWithoutInstanceNestedInput
    snapshots?: WebVMSnapshotUncheckedUpdateManyWithoutInstanceNestedInput
  }

  export type WebVMInstanceUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    status?: EnumWebVMStatusFieldUpdateOperationsInput | $Enums.WebVMStatus
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    resources?: NullableJsonNullValueInput | InputJsonValue
    networkConfig?: NullableJsonNullValueInput | InputJsonValue
    connectionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stoppedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertNotificationCreateManyAlertInput = {
    id?: string
    type?: $Enums.NotificationType
    recipient: string
    message: string
    sentAt?: Date | string
  }

  export type AlertNotificationUpdateWithoutAlertInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    recipient?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertNotificationUncheckedUpdateWithoutAlertInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    recipient?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertNotificationUncheckedUpdateManyWithoutAlertInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    recipient?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceFileCreateManyParentInput = {
    id?: string
    workspaceId: string
    path: string
    name: string
    type: string
    size: bigint | number
    mimeType: string
    encoding: string
    content?: string | null
    hash: string
    isDirectory?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    metadata: JsonNullValueInput | InputJsonValue
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastAccessedAt?: Date | string
  }

  export type FileIndexCreateManyWorkspaceFileInput = {
    id?: string
    content: string
    tokens: JsonNullValueInput | InputJsonValue
    language: string
    symbols: JsonNullValueInput | InputJsonValue
    imports: JsonNullValueInput | InputJsonValue
    exports: JsonNullValueInput | InputJsonValue
    dependencies: JsonNullValueInput | InputJsonValue
    complexity: JsonNullValueInput | InputJsonValue
    lastIndexed?: Date | string
    indexVersion?: string
  }

  export type WorkspaceFileUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutFilesNestedInput
    children?: WorkspaceFileUpdateManyWithoutParentNestedInput
    indexes?: FileIndexUpdateManyWithoutWorkspaceFileNestedInput
  }

  export type WorkspaceFileUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: WorkspaceFileUncheckedUpdateManyWithoutParentNestedInput
    indexes?: FileIndexUncheckedUpdateManyWithoutWorkspaceFileNestedInput
  }

  export type WorkspaceFileUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    mimeType?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    isDirectory?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    metadata?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileIndexUpdateWithoutWorkspaceFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    symbols?: JsonNullValueInput | InputJsonValue
    imports?: JsonNullValueInput | InputJsonValue
    exports?: JsonNullValueInput | InputJsonValue
    dependencies?: JsonNullValueInput | InputJsonValue
    complexity?: JsonNullValueInput | InputJsonValue
    lastIndexed?: DateTimeFieldUpdateOperationsInput | Date | string
    indexVersion?: StringFieldUpdateOperationsInput | string
  }

  export type FileIndexUncheckedUpdateWithoutWorkspaceFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    symbols?: JsonNullValueInput | InputJsonValue
    imports?: JsonNullValueInput | InputJsonValue
    exports?: JsonNullValueInput | InputJsonValue
    dependencies?: JsonNullValueInput | InputJsonValue
    complexity?: JsonNullValueInput | InputJsonValue
    lastIndexed?: DateTimeFieldUpdateOperationsInput | Date | string
    indexVersion?: StringFieldUpdateOperationsInput | string
  }

  export type FileIndexUncheckedUpdateManyWithoutWorkspaceFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tokens?: JsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    symbols?: JsonNullValueInput | InputJsonValue
    imports?: JsonNullValueInput | InputJsonValue
    exports?: JsonNullValueInput | InputJsonValue
    dependencies?: JsonNullValueInput | InputJsonValue
    complexity?: JsonNullValueInput | InputJsonValue
    lastIndexed?: DateTimeFieldUpdateOperationsInput | Date | string
    indexVersion?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}